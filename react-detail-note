
*************************************************************************************************
22/01/19
*************************************************************************************************
What all minimum libraries we need for reactjs?
//react.development.js,reactdom.developmennt.js,babel.js
react.development.js is used to create components in react.
how many ways we can create components?//2 ways
functional component and class components
	
Ok within thee function, suppose i have created a function like which is returning something.
	Its returning "Hello World"
 	const  Hellow=()=>{
        return <h1>Hellow World1</h1>
    } 
Now this is acting like a component. and this component is returning some content.
Now this content behaves like jsx.
So this is an html file and within that we are using jsx content..

What is the difference between jsx and html?
	//we can use custom tags in jsx..we can use xml 
	
Now we developed a component. Where we are going to show this content?
Within the browser or not?
Which file is visible to end user?//index.html file or not?
Within the html file which part is visible to the end user?
Body part or not?
Within the body we have to show some content or not?
Ok that content is a static one or dynamically generated?
dynamic content..

Now if have to put some data within the component and want to display it in browser what is required?
one container is required or not?
Now the component is going to give some content. That content we have to place within the body within the container.
container can be a span or a div or any other

This is done by my react.development.js library.

Now lets go to react-dom.development.js library.
We have to put the content within the ui some container is required or not. 
SO for that purpose react-dom.development.js file is required or not?

Ok how we can put it?
Now ReactDOM.render() takes how many arguments?
//3 arguments
//component, container and a callback function
//component is always represented like an element tag 
//How my element looks like? open tag and close tag 
//next second element is container that is the reference of the element, whether it is getElementById() or getElemeneyTagName()
	or querySelector does not matter
//last one is like a callback function..we can put a function there.
//When this callback function is going to be executed?
//callback is nothing but what? somebody is going to call or not..
//i am going to give this method to  my render()method
//that render() method is going to call this method indirectly or not?
//This particular content once this is loaded within the container..
//once everything is completed then at that time this callback method is going to be triggered..
//so if we need the confirmation or something like yes the content is loaded then we can go for callback function.
//if we want to put we can put it..it is optional..

<script src="react-dom.development.js"></script>
<script src="babel.js"></script>
<div id="root"></div>
<script type='text/babel'>
    const  Hellow=()=>{
        return <h1>Hellow World1</h1>
    } 
	const  App=()=>{
        return <div><Hellow /><Hellow /><Hellow /><Hellow /><Hellow /><Hellow /><Hellow /></div>
    }
    
    ReactDOM.render(<App />,document.getElementById('root'));
</script>


***
Now if we create a component (functional or class) does not matter
But if we name it as app instead of App then it gives below error.
	The tag <app> is unrecognized in this browser. If you meant to render a React component, start its name with an uppercase letter.
    in app
    
So remember we have to create components in React using first letter Uppercase


Now if we remove react-dom library which error will come?means removing the react-dom script is not going to execute
ReferenceError: Can't find variable: ReactDOM


Now if we remove react library which error will come?
My component here in above is a normal javascript function. 
If my normal javascript function has to behave like a react component then by default this react library has to load.
Otherwise it will be treated like a normal javascript function only..

**Imp**
If babel is not there??
We will get below error..
SyntaxError: Unexpected token '<'
If we compile with babel only it is going to work.
Because what we have written it is a jsx content..

Ok now my react is a single page application or not?
//yes we can treat it like a spa

What is the difference between a framework and a library?
	if it is a framework somebody is going to design right?
	Who designed this angular8?
	By google people or not?
	Who designed this particular technology or whatever it it he is going to give some guideline to you.
	you should have to follow those guidelines
	For example angularjs or angular8 what is the guideline?
	We have to create a module.
	We are going to create components, services..
	Whatever we are going to create everything has to be under this module
	These 2 guidelines we have to follow.
	Then at that time we can treat like whether application whether it is angularjs or angular8 app 
	Who is going to design this technology he has to provide some guidelines.
	Those guidelines we have to follow..
	If we follow only we can tell like yes this is an angularjs application or angular8 application

	Now come to the library.
	We know jquery right
	My jquery is what? it is a library or not?
	If it is a library there is no such guidelines or nothing.
	they are going to give like one simple javascript file. 
	We can load that javascript file which contains some predefined methods where ever we want
	My react is also same like that one. It is not a framework.
	We can use it like where ever we want.
	
	Ok tell me one scenario. 
	without any guidelines i want to put like some content
	We have index.html..
	We have body opening and closing tag
	We have a span..Within this span we want to some content using react..
	span is embedded within the body but before span 10 elements are there and after span 10 elements are there.
	So 2 things are required
	react library and react-dom library
	
	Why because these libraries has some methods 
	I am going to use those methods..
	First of all here inside span i want to put some content i.e. hello world content
	can we prepare the content? Ok how we can prepare the content?
	By using component..
	Can I put like
		const App = ... already we know this we can add the code
	First tell me..now i have the content
	Where you want me to show the content?
	Within the span ok.
	If it is a span , using the id or something we can get the reference of the span or not
	Which library is require now? //react-dom
	So that can i put like ReactDOM.render() and within this we can put content and the container
	So we have no guidelines nothing.
	We have the content and we have the reference . put that thats it.
	
	
	In case of angular we are going to create the module
	We are going to create the components
	The components should have to be registered with the modules
	And then only we can use that one.
	
	So this is the difference between a library and a framework
	
My react is a framework or a library?//library
My angular/angularjs is a framework or a library?//framework

Without spa also we can use react.
But most of the times we use it like a spa only



My requirement is very simple..
I want to create a box

I want to show something to the end user. 
So one html file is required.
Within html file body tag is required.
Within the body tag one container is required.
Within this container I have to put this box or not?

Now this is container inside body.
I need the content or not?
Ok how can create the content?By using component..
So that const Textbox 
This Box should Box a box
We have to return a div to create a box.
So we will add some css for it..

Within this html how we can add style?
for this particular Box component it is returning a div
So we can add a class or id to it
lets add a class name box
How we can add? using className...
then we can use .box and embed this css within style tag.

By default my div is block level element.
It taks parent width as its own width or not
If it is a div who is the parent? body or not
So it takes the full width of body

But our requirement is what?
I want height is 50px and width is 50px..If i mention display:block.
If we inspect element and ake mouse to div element there in elements tab we can see it is still pointing to whole div..
that is the unused space But i dnt need that unused space
So we will go for inline-block that is our custom width
And we have not placed any content within the div just gave height and width to give it a box look

box.html
===========
<script src="react.development.js"></script>
<script src="react-dom.development.js"></script>
<script src="babel.js"></script>
<style>
   .box{
       width:50px;
       height: 50px;
       border: 1px solid red;
       display: inline-block;
   }
</style>
<div id="root"></div>

<script type="text/babel">
    const Box=()=>{
        return <div className="box"></div>
    }

    ReactDOM.render(<Box />,document.getElementById('root'));
</script>

Now we have used ReactDOM.render() to load component Box to container div with id root

@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
Now lets go to our second requirement
I want like a 3*3 matrix shape of boxes
That means first row having 3 box
second row having 3 box
and third having 3 box

So how we are going to load? The below ways are not valid..
    ReactDOM.render(<Box /><Box /><Box /><Box /><Box /><Box /><Box /><Box /><Box />,document.getElementById('root'));
    ReactDOM.render(<Box />,<Box />,<Box />,<Box />,<Box />,<Box />,<Box />,<Box />,<Box />,document.getElementById('root'));
	//in second case the second argument always expects container but we provided component
	
So in first argument we can pass only one argument.. that is a single component
So that single component only going to visible within container.
So whatever it returns it will be visible.
So now lets create a single component App and return it..


Now within this App we have to send these 9 boxes. So lets prepare these 9 boxes here...
If we put all 9 boxes without a wrapping element in the return of component App it gives error like this.
	SyntaxError: Inline Babel script: Adjacent JSX elements must be wrapped in an enclosing tag (9:8)

So everytime whatever a component is returning it does not matter or how many times content we show that does not matter 
but everything has to be wrapped inside a single element

So now if we wrap all 9 boxes with a div it is working.
But it is displayed in a single row.
I want in 3 rows like 3*3 matrix
So how we can do that?
Lets wrap first 3 boxes within one div, next 3 in another and next 3 in another within the parent wrapper div
   return <div>
                   <div><Box /><Box /><Box /></div>
                   <div><Box /><Box /><Box /></div>
                   <div><Box /><Box /><Box /></div>
                </div>
                
Now 9 boxes are displayed as 3*3 matrix.

But my requirement is it should display numbers from 1 to 9 within the boxes..
So where we can add these numbers?
We have a Box component..Within this only we have to create the content or not.
But this is a generic component and we are using 9 times.
If we keep content like 1 every box will be displayed like 1 1... 1 for all 9 boxes

But how we can make like 1 for first box , 2 for second box..., 9 for 9th box
How we can make it dynamic?

k now can you tell me if <Box /> is an element custom element, if i want to pass soe data to the component Box
How we can pass it?
Like an attribute we can pass within the element..
 
Now if there is a predefined element like div , span etc we  have some predefined attributes
But now this Box is a user defined one. How we can pass attributes here? Here we can anything any attribute.
Like a key and a corresponding value we can pass

Can i pass like v="1" and v="2" and v="3" and so on...
			return <div>
                   <div><Box v="1" /><Box v="2" /><Box v="3" /></div>
                   <div><Box v="4" /><Box v="5" /><Box v="6" /></div>
                   <div><Box v="7" /><Box v="8" /><Box v="9" /></div>
                </div>


Like this for each Box Element we can add multiple key value pairs.
So how Box component or function is going to receive these?
	like an object only or not.. as all are like key value pairs
Now If it is a functional component or a normal javascript function , we are going to receive these as an json object.
So within the component we will use expression to print the content.. d is object we receiving so use {d.v}

 const Box = (d) => {
    return <div className='box'>{d.v}</div>;
  };
  
  
 const App = () => {
    return (
      <div>
        <div>
          <Box v='1' />
          <Box v='2' />
          <Box v='3' />
        </div>
        <div>
          <Box v='4' />
          <Box v='5' />
          <Box v='6' />
        </div>
        <div>
          <Box v='7' />
          <Box v='8' />
          <Box v='9' />
        </div>
      </div>
    );
  };


  ReactDOM.render(<App />, document.getElementById('root'));
 
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
Now can we do the same requirement using class component?
lets create another file BoxClassComp.html

Lets add the 3 scripts
Add the div container to the body of html
If we dont specify <body><div></div></body> and just specify like <div></div> it will still load within body.

Now lets create a class component.
So everything is almost same , only we are going to use functional component to React class component 
remaining all are same.

Lastly we will use ReactDOM.render() to render the component in container same way

class Box {
    render() {
      return <div className='box'>{this.props.v}</div>;
    }
  }
//By default above is treated like a class but 
if we want to make this class like react component my class should have to extend from one class 
	that is given by react people that is coming from react library
Within my react library there is a class known as Component class
If we want to make my class acting like a react component 
Then at that time my class should have to extend from that particular react Component class or not.

So we have to put like extends from React.Component{}
 i.e. class Box extends from React.Component{}
 
Can you define a class? What is a class?
A class contains variables and methods or not
Can you tell me how many variables are there and how many methods are there in this case? normal js class?
//No variables and no methods

If i put like React.Component can you tell me how many variables are there and how many methods are there?
My own members are zero. I have some extended members also there or not? yes or no? ok..
Here this is the class. i.e. React.Component
This class is created by some other people
Class is a collection of variables and methods.
My React.Component contains what? variables and methods
That variables and methods comes to which class now? My Box class or not?

By default if we put like class Box{} there is no variables and no methods are there.
If you extend from React.Component class  whatever the variables and methods are there within React.Component 
	are now visible to my Box component. So all variables and methods are now available to my Box component

So here in our Box class which is extending React.Component some of variables and methods are there 
	which is coming from React.Component
Now my Box is considered or acting like a react component
Otherwise if it does not extend from React.Component it is a normal javascript class only.
What is the purpose of this component?
It should return some content or not?
Now which place is the right place to put the content within the class?variables or methods?
My method is used for preparing the content or not?

Which method you are going to write? 
For example if i write 

class Box extends from React.Component{
	prepareContent(){ 
		return <div>hello world </div>
	}
}

class App extends React.Component {
    render() {
      return (
        <div>
          <div>
            <Box v='1' />
            <Box v='2' />
            <Box v='3' />
          </div>
          <div>
            <Box />
            <Box />
            <Box />
          </div>
          <div>
            <Box />
            <Box />
            <Box />
          </div>
        </div>
      );
    }
  }
  ReactDOM.render(<App />, document.getElementsByTagName('div')[0]);
  
  
can we write like this?
ok now this hello world is coming here i.e. <App />..
it is going to put this content within the container..

my hello world is going to be visible or not?
not visible...
what is the problems?
We are giving Box component which is fine, but we have written another method prepareContent()
But how ReactDOM.render() will know which method is going to return from the component?
 
For example I have another class A which is also extending from React.Component
It has a method called content(). This content() method also returns me some content...
	class A extends Reat.Component{
		content()){
			return <div>hello world </div>
		}
	}
Now if we give the A class in ReactDOM.render()
	 ReactDOM.render(<A /> , container)

Then at that tme what happen?
My render() method takes this A component , Where it is going to search the content?
In the past in Bx class there is a content within prepareContent() method.
No my content is available where? within the content() method or not..
If we give the chance to you people to put or prepare the content , you can write any method with any name or not
That is the problem for ReactDOM.render() to recognise the method or not.
So that which one is the better one?
Hence the react people does not give the chance to you
If you want to prepare the content react people says I am going to give one method to you. just use that method.
So that method is coming from React.Component class. 
render() is the method name

What is the purpose of the render() method?
To prepare the content within the class component or not
Other than taht if we put like prepareContent() here what happened you know..
This is my class .. 
If it is a class can you tell me if you to call a method what you have to do?
You have to create the object for the class or not?
So react people is going to create the object for this A class or Box class.
They are going to call o.render() method.
But in these classes A or Box render() method is overridden or not ?
So that there is no content nothing is going to be visible

Make sure if my class is extending from React.Component class 
If we want to prepare some content that one we have to put within the render() method only
There is no other option.

Once this is the class, its going to create an object
o.render() is there
whatever you are going to return that only going to be visible within the container or nt.

 
Ok can you tell me what is the difference between ReactDOM.render() and component class render()?
 //render() method is coming from React.Component to prepare the content 
 //ReactDOM.render() method is used for render the component within container
 That is the difference.
 
 BoxClassComp.html
 ===================
<script src="react.development.js"></script>
<script src="react-dom.development.js"></script>
<script src="babel.js"></script>
<style>
  .box {
    width: 50px;
    height: 50px;
    border: 1px solid red;
    display: inline-block;
  }
</style>
<div></div>
<script type="text/babel">
  class Box extends React.Component {
    constructor(){
    	super();
    }
    render() {
      return <div className='box'>{this.props.v}</div>;
    }
  }

  class App extends React.Component {
    render() {
      return (
        <div>
          <div>
            <Box v='1' />
            <Box v='2' />
            <Box v='3' />
          </div>
          <div>
            <Box v='4' />
            <Box v='5' />
            <Box v='6' />
          </div>
          <div>
            <Box v='7' />
            <Box v='8' />
            <Box v='9' />
          </div>
        </div>
      );
    }
  }
  ReactDOM.render(<App />, document.getElementsByTagName('div')[0]);
</script>



Note : 	*Q* if we do not override the React.Component render() method we will get below error..
 		So it is mandatatory method to be overridden when extending a class from React.Component
 		Warning: App(...): No `render` method found on the returned component instance: you may have forgotten to define `render`.



Note : 	*Q* if we extends a class from React.Component class and also overridden render() method 
	   	But we are not having a return statement. Then also we will get error as follows.
	   	Error: App(...): Nothing was returned from render. 
	   	This usually means a return statement is missing. Or, to render nothing, return null.


So we have to override render() method
And we have to return some content..
If we are not returning any content then what is the purpose of the component?

So now tell me in a component from *Q* where my execution is going to start in react app?
//My execution is always going to start from ReactDOM.render() method only
//first one is what ? component
//My component may be function or class
//If it is a function it is going to be called more than that nothing
//If it is a class it will create an object of that class or not?
//how we will make sure that class object or instantiation has been done?
//our class constructor is going to be called
//and then call the render method with this class object..
//my render() method should be overridden within the component and return some content or not
//By default if we dont write any constructor the default constructor gets called.
//we can always override the constructor, but we have to mention super() as first line within the constructor
//Or else we will get below error
	SyntaxError: Inline Babel script: missing super() call in constructor
*Q* Now why this super() call is required?
//To call the parent class constructor
//Because if we dont call super() from our component class 
   then the React.Component class has from which our component is extended has also some variables right.
   Those variables are never initialised...
   Only our component class variables are initialised.
   Hence for that we have to call the super() to initialise React.Component class variables
   
//


*************************************************************************************************
23/01/19
*************************************************************************************************
We have covered class and functional components
We have also covered how we can pass data from an component object to a component class for both functional and class components
While instantiating the component we pass data via attributes.. as custom key value pairs
In case of functional component we receive it as argument i.e. an object like object.key
In case of class component it is passed as this.props.key1, this.props.key2...

In the previous example if you remember we created 2 components.
App and Box..
Box is to prepare a div within its render() giving look of a Box shape
App is to use Box component within its render() to load it 9 times to represent in a 3*3 matrix

Now what is the relationship between App and Box
My App is simply acting like a parent as we are placing Box within the App component
And my Box is working like a child 

Now in this case we are passing data from where to where?
From App to Box means from parent to child or not?
So this is the way we are passing data from parent to child..

lets jump to our next requirement.
My requirement is very simple.

I want sum of 2 numbers.
I have 2 textfields for num1, num2 , 
I have one h1 for displaying sum value
And I have one button add,
If i click on add button it should sum both the numbers reading from textfield and display within h1 result
if sum is > 100 my display sum label should be in red color
if sum is < 100 my display sum label should be in green color

In this example see how many things we are going to cover...
The first thing we have to prepare the view.
And then if i click on add - then handle event
Once you handle the event then we have to take the data from the text input fields
And then we have to perform some operation.
I have the result and then we are going to bind the result within the view dynamically.
My hello world was static one..in previous example or even 1 2 3 ..9 were static
But here data is dynamic, if i enter 2, 3 it should be 5
if i enter 30,3 then it should be 33

ANd then my data is this one..
if it is less than 100 it should be green in color or if greater than 100 it should be red in color.
I am not sure..always red..always green
That means what? How to apply styles dynamically?
Tell me how to start?

One component is required.
That is going to give some content..
That content is nothing but your view or not
first of all create this one.. add.html
one container is required. so <div id="root"></div> within body.
Add  a class extend it from React.Component
      class Arth extends React.Component{
      	render(){
      		return <div> </div>
      	}
      }

It should override render() method nd that should return something.
And whatever we return it should be wrapped within a single element.
Ok Once i have the content where we have to load? Within the container right.
So using ReactDOM.render() we can load this.
first is component, second argument is container.

So now lets prepare the render() return - the view or content
we have to prepare like the below...

num1 : [textbox]
num2 : [textbox]
  [add button]

  [result]


render(){
              return <div>
                   <p> 
                      No1:<input ref="n1Ref" />
                    </p>
                    <p> 
                      No2:<input ref="n2Ref" />
                    </p>
                    <p>
                        <input type='button' value='sum' onClick={this.fnAdd} />
                    </p>
                    <h1>Sum is: <span style={{color:this.state.clr}}> {this.state.sum}</span></h1>
                    <h1>Sum is: <span className={this.state.sum > 100 ? 'cr':'cg'}> {this.state.sum}</span></h1>
                    
                </div>
          }

//Now if i enter some data in first textfield, enter some data in second text field and click on sum
//First of all before getting the data we have to handle this event or not.
//we have to take the data and perform some operation or not..
//ok now tell me how we can handle the event?
//write onClick event
//How many methods we can write within the class??
//Any number of methods or not.
//So that can we write one method that will be called on button click?
//Within the class if we want to call a method what is required?
//one object or not?
//how can we represent the object within the class?
//so somebody should have to call this method like this.add()?
//Who has to call? and when we have to call?
//at the time of clicking or not?
//So this person has to handle the event or not?
//so what is the event name?
//In you javascript how many events are there...each and every event is going to be applied here(with react component) with camel case.
//in javascript nothing is camelcase
//but in react all are camel case
//So that can we copy this one?
//go to where? onclick or not? should have to change what? onclick to onClick or not?
//Now here it has to call function fnAdd()
//In your react how you can call means 
//i want to call one method which is available within the class
//Within the class if you want to call the method i want what?
//my curent object is required
//which method you want me to call ? fnAdd
//this is the function call representation in your react.
    <input type='button' value='sum' onClick={this.fnAdd} />

//Here we are not saying fnAdd is a function or a variable. in above line...
//My react will take care..whatever we are going to put
//if its a function it is gets called
//if it is a variable then it will be binded
//There is no need to put like 
    <input type='button' value='sum' onClick={this.fnAdd()} /> ->wrong
//Now save and refresh browser..check if fnAdd() method is getting triggered or not..


//Within the function fnAdd() "this" is available or not? How we wil get to know?
//now if we have constructor defined along with render() method then what is the flow?
//first constructor() will be called and then render()
//once constructor gets executed my object is available.
//with that object my render() method is triggered
//so here also my "this" is available.
//within the render() method it is not doing anything. 
//It is just printing the content.
//So this fnAdd() function will be triggered when we click on the button .
//now i click on sum 
//lest go to console and check by using debuggnig if the control is going there or not.
//Now my requirement is i want to make my current object is available within the function fnAdd()
//Within my class except my function fnAdd() my "this" is available outside
//But within the function fnAdd() my this is like undefined.
//But what I want is within the function fnAdd() i want my "this" to be available.
//So it gives error if we use like this.n1 or this.n2
//n1,n2 are class variables

//to avoid that one what we have to do?
//We have to use like either call,bind or apply.
//why we go for call(),apply() or bind()?
//If we want to make one object available like a current object then we will go for call(),bind() or apply()
//Then why we will go for bind(), why not call() or apply() ??
//We already discuss these..lets see this example
lets create a function with one argument a, and within that function lets return this.x+a
When we execute function with one argument like suppose 10 i have passed i will get NaN(not a number)

function f1(a){ return this.x + a}
f1(10)// NaN

Why it is NaN?
as this.x is undefined
What is my this within a normal function?
//it is pointing window object..
//within the window i have so many thing but x is not there.
//x we have defined.
//So as here this is pointing to window and within window x is not there that means this.x is undefined
//

//But what i am asking like is I have my x value within another object obj.
//Can we get this x value 10 from another object obj instead of window (within the function f1)?
//then how we can call?

//lets try to use call...
let obj = { x :10 }
f1.call(obj,10) //20

//lets try to use apply...
let obj = { x :10 }
f1.apply(obj,[10])//20

In both the cases in call() and apply() it is giving the result 20 means what?
The function f1 is executed. call() and apply() directly execute the method.

//lets try to use bind...
//in bind() also we pass the object as frist argument and the arguments..
//But does not gets executed immediately.
//Rather it returns a function we can save it as a variable
//and later when we need we can just call that returning function

let obj = { x :10 }
let f2 = f1.bind(obj,10)
f2()

So which one is the recommended one? bind() or not?
Because we want our function to be executed at the time of button click only

Now in our case which object to be made available to fnAdd()?
our class "this" object or not?
So which place is the best place or recommended to bind "this" to fnAdd()?
constructor or not?
Why because what time my "this" is available?
At the time of creation of class instance or not?
When we pass component <Arith /> to ReactDOM.render() as first argument...
That time only the object of Arith class is created
And constructor() gets called and my this is available here

TO whom I have to bind()? 
To my fnAdd() or not?
So that how we can bind it?
Within the constructor we have to write the super().
My "this" is available now.
My object "this" we have to bind to which method? with fnAdd()
How we can bind the method? i.e. 
	this.fnAdd.bind(this)
	
Now this above bind() call returns another function or not ?
Now any method returns anything can we store in a variable?
Which variable you want me to store?
Can we put like a or something?
If we put like a what happened?
Now a contains what? which function? fnAdd() with my current object.
But at the time of button calling which method we are calling? fnAdd only or not?
But as we are storing returning function to a , my a contains this not my fnAdd
So i dont want to store it like a different name like a or b or anything
Can we put the variable like this.fnAdd (the same function name to be in sync)
	this.fnAdd = this.fnAdd.bind(this)

Now after executing this statement we are assigning the same value for the same name.
Now this fnAdd is pointing to the same function with "this" object binding done

Now lets refresh the page and see if we are still getting error or not?
Now my method is going to trigger.
What next?

Now we have to take the value from the textboxes.
Same like javascript no changes nothing..

In javascript how we can get the value?
First we have to get the reference then we have to get the value or not?
In normal javascript how can we get the reference?
//using document.getElementById() or document.getElementByClassName() or any other...

In your react if you want to get the reference of any html element we have one predefined attribute is there.
That attribute is called "ref"
Now we can add that now.
Now where we can add this ref?
I have my textbox is there..
	<input id="n1" />
In javascript so we use document.getElementById("n1").value to get the value...

Same like that in react it is done like this..
	<input ref="n1Ref" />

Where we are going to need this reference in order to get its value?
fnAdd() or not?
Ok how we can get the reference?
Ok if want to get the reference go to the console
We have so many properties are there..
Now "this.refs" is coming from where? My React.Component or not?'
	this.refs.n1Ref.value is equivalent to my document.getElementById("n1").value

So lets first add ref to textboxes and then use this one... within fnAdd()

class Arth extends React.Component {
    constructor() {
      super();
      this.fnAdd = this.fnAdd.bind(this);
    }

    fnAdd() {
      let n1 = this.refs.n1Ref.value;
      let n2 = this.refs.n2Ref.value;
      let sum = Number(n1) + Number(n2);
      console.log(sum);
    }

    render() {
      return (
        <div>
          <p>
            No1:
            <input ref='n1Ref' />
          </p>
          <p>
            No2:
            <input ref='n2Ref' />
          </p>
          <p>
            <input type='button' value='sum' onClick={this.fnAdd} />
          </p>
        </div>
      );
    }
  }
  
But my requirement is what?
We have to print the result sum in a h1 tag after the button...
Now i have my sum available inside fnAdd() that is a local variable.
But i want to display sum within my render() method
There are 2 different methods..
This is the requirement.
Now the scope of sum is limited to fnAdd() only or not..
If we declare variables like let,const or var those are treated like local variables..
I want the data within another function.
Now i want to share the data throughout the application like that one variable is required or not?
my "this" current object is available all where or not?
 
Now instead of let can we put the value within the current object "this"?
Now if we put the value like this.something we can get it within render or not?
Now if we want some default value for this sum how we can do this?
Inside constructor we can do it or not?
this.sum =0; //within the constructor

And also within onClick we are changing the this.sum value assigning the sum of 2 numbers
Now within the render() we are printing this.sum

now here within fnAdd() we can see my current object is updated and here it always prints the correct value this.sum
But within render() method it is unable to update the same. Why ? What is the problem?

  class Arth extends React.Component {
    constructor() {
      super();
      this.sum = 0;
      this.fnAdd = this.fnAdd.bind(this);
    }

    fnAdd() {
      let n1 = this.refs.n1Ref.value;
      let n2 = this.refs.n2Ref.value;
      this.sum = Number(n1) + Number(n2);
      console.log(this.sum); 
      //now here we can see my current object is updated 
      And here it always prints the correct value
      But within render method it is unable to update the same
    }

    render() {
      return (
        <div>
          <p>
            No1:
            <input ref='n1Ref' />
          </p>
          <p>
            No2:
            <input ref='n2Ref' />
          </p>
          <p>
            <input type='button' value='sum' onClick={this.fnAdd} />
          </p>
          <h1>{this.sum}</h1>
        </div>
      );
    }
  }



My render() method is not able to detect the changes or not?
My render() method is defined by whom? By React.Component or not
So that any value within the current object my render() method is not able to detect if we have changed in the middle.
First time load any changes done to my current object is recognised by the render() method
My flow is like that only.

First my component gets loaded that means constructor gets executed.
Ok within the constructor this.sum = 0; we wrote.
And then our render() method is going to call..
And within the render() method we displayed {this.sum} which gets printed as 0.

After that what we did? we clicked on the button.
Then fnAdd() is triggered. Now suppose within fnAdd() we are doing this.sum = 300
Then the value is not reflected on ui.
render() is not triggered again as changes are not listened by render() method.
This is the problem or not?

So that the react people says if you have a variable and you want to change its value in the middle 
And at the same time you want to reflect the variable in the browser 
Then react community is providing another variable called as state variable..

When we go for this?
First time load only if we want put anything within the render() we can store it in "this".
After that if we are going to change the value in the middle then we will go for state variable or not.
*Q* What is the difference between state and prop? This is the one ...
We will see that later..

So that we have to put the sum variable within the state or current variable?
That is coming from where? React.Component or not?

Same like that my prop is which type?
//Object type or not
//Similarly my state is also object type


So that object how we can represent we will see..How we can call the state?
this.state only or not?
If we have to add any operation to this.state where we can write? constructor only or not?
	this.state = {
		sum : 0
	}

In the render() method how we can display it? {this.state.sum} or not?
  class Arth extends React.Component {
    constructor() {
      super();
      this.sum = 0;
      this.state = {
        sum: 0,
      };
      this.fnAdd = this.fnAdd.bind(this);
    }

    fnAdd() {
      let n1 = this.refs.n1Ref.value;
      let n2 = this.refs.n2Ref.value;
      this.state.sum = Number(n1) + Number(n2);
      console.log(this.state.sum);
    }

    render() {
      console.log(this, this.sum);
      return (
        <div>
          <p>
            No1:
            <input ref='n1Ref' />
          </p>
          <p>
            No2:
            <input ref='n2Ref' />
          </p>
          <p>
            <input type='button' value='sum' onClick={this.fnAdd} />
          </p>
          <h1>{this.sum}</h1>
          <h1>{this.state.sum}</h1>
        </div>
      );
    }
  }

Now within fnAdd() we updated sum as this.state.sum 

Now lets save everything and open the browser to see if data is reflected on ui or not?
If render() method is called again or not

We are printing this.state.sum value within fnAdd() which is giving correct value for state variable 
	everytime we add 2 numbers state is updated..
	But then why the render() method is not triggered?
	Why render() method is not showing latest state variable sum value?
	
So now we saw if we update the state variable like a normal javascript object then that time also my render() method is not trigered
If we made any change state should internally called the render() method or not..
But this is a normal javascript object assignment or not.
But we need to explicitly tell my react that hi state variable is changed. can you please run the render() method?
If we didnt tell to react guy then at that time my render() method is never called

So within the react.js there has one method 
To get the update activity we have to tell to this method , so that time my react is going to call this render() method or not
They have provided one update method..called as setState()
So if we call this method by passing the latest sum value as an object, it is going to call internally the render()
So that the result gets reflected as the ui or view is rerendered

setState({sum :30 }) //will call render() method

Within this setState() or this.state we can assign as many variables we want as we are going to store or pass an json object

Now my render() method is called 2 times if we summed once
i.e. initial render, and then the click event

Now suppose I have to update sum value 10 times then how many times render() is called?
//11 times r not..one is initial render() and then 10 times for setState() which called on click of button
Each and every state change value will be visible on ui....
This is going to impact the performance or not? lets discuss all these n next session.





*************************************************************************************************
24/01/19
*************************************************************************************************

*Q* Tell me when you go for let, 
	when you go for const, 
	when you go for this, 
	when you go for this.state 
	and when you go for this.props?

Within the function if we declare let variable it is treated like a local variable.
In es6 no one uses like var. better to go with let or const.
Within the function if we declare const variable we can not change that value.
We can never reassign it. 
If there is a requirement to create a variable that will behave like a constant then better to go with consts

When a component is loading first time if that time we want to perform some operation to display something we can use "this"
So "this" can be used only for first time load....
Next time if we make any changes using "this", then my render() method is not listen to those values.

But if I have a requirement like my variable value should change in the middle 
	even after initial load then we will go for this.state

Now if any data is coming from outside to my component and my component is a class component 
Then I can get the values by using this.props or not.

*Q* Can you tell me my render() method is triggered how many times?
On initial load first my constructor is going to trigger, then my render() method is going to trigger
This we already knew. Next when render() method is triggered?
When there is a state change that time also my render() method is triggered or not?


*Q* Can you tell me how we can change the state variable?
I have a state variable is there..
this.state = {
	n : 10
}

Can you tell me where we are going to write this code? 
Within the constructor or not?
Why we are going to write within the constructor?
Because "this" is available within the constructor. 
And if we have to initialise state variable then we will go for constructor

If we want to make this n value like 20 after some time, how can we make this state value change?
this.state is which type? object type or not?
If we want to update the object data how we can update?
this.state.n = 20; This is simple like javascript's object update.
If you update like above..
Yes my state variable value got updated, but this value is not listened by the render() method.
Ok then how we can tell React to call the render() method 
So that our state variable changes within the render() method will be visible or displayed on browser as view will be reloaded
So there is a method called setState() which is given by React library which will update the state
At the same time it is also going to call the render() method to re-render the content or view.

Ok now you told like on a state change also render() method will be called.
So now render() method is called two times. once on initial load of component , second on state variable update.
Now my render() method contains 1000 lines of code...
here start 500 lines of code is there...
//In between I am going to put my state value.
//{this.state.n}
here end 500 lines of code is there...


So now when a component for very first time on initial load :-
First time what is my state value? //10 on initial load.
So for first time first 500 lines of code is loaded 
Then my state variable is loaded
Then next set of 500 lines of code is loaded.

After sometime what you did?
We have changed the state variable value or not?//yes
So now value is 20.
Internally it is going to call render() method again.
Within this render() method how many lines of code is there?
500 , state changes one line of code , 500 
Once again it is going to trigger or not
So each time there is a state variable change the render() method is triggered or not?
So these 1000 lines of is executed every time or not?
So this is a performance impact or not?
How the react community people have overcome this problem?

Now there is a concept is there called as virtual DOM.
How my virtual DOM is going to work we will see.
How my browser is going to read some value?
I have an html page where i have a div with opening and closing tag
<div>Sachin</div>
I have some css applied on div within css file.
Now within the browser my Sachin is going to print within the render() method or not.
So what internally happens when we un this one.html file?
So we have loaded HTML
We have loaded CSS.
So my html code whatever i wrote within the browser some parsers are there
To parse our htmlcode HTML parser is there within the browser
So that my browser needs your html code with html parser
Ok the next one not only the html code with this particular html what do we have?
CSS also there or not?
So that my css reading is also done by my css parser.
These two are available in the browser.
My HTML code is read by HTML parser.
My CSS code is read by CSS parser.
Now both are independent now
But we are going to attach it somewhere or not
Then only we can show it right
After that it is going to attach
Once my attachment is done how you are going to print?
In your browser you are going to print like Sachin
But internally If you see the elements tab how it looks like?
html is there, head is there, body is there , div is there
Likethis one tree structure is going to follow or not
Here it is going to create a render tree 
That tree is going to be created
And then my tree is completed 
At last what we have to show?
We have to paint the data within the browser or not
The next one is painting 
Once it is painted then what happens?
It is going to be displayed within the browser or not?
This is the thing that happened internally
My browser can understand only 3 things
My html,css and javascript or not?

Ok..What is visible to the end user then?
HTML page only
Why we go for js?
When we need some dynamic operation on the view that time we go for the javascript or not
At last we have to show html content with css only or not
So that my html content and css are the final one
There are some parsers are there in the browser, 
They parse the content, attach the content, prepare the tree
And it is going to paint that and display within browser.

Now think the div is displaying Sachin which is a static text.
Now i want to put some dynamic data here. 
instead of Sachin I want to put Dhoni
Then how we can write the javascript method?
document.getElementById("divid").innerText = "Dhoni"
Now after executing this line what is my div value? on button click or something
Dhoni or not?
Now internally what happens?
Internally how my original DOM is going to update from Sachin to Dhoni?

First we are going to identify the element
Ok here whatever my data is there, whatever my children is there..
This is my div within body.
Within the div how many children we can write?
Any number of children we can write or not?

For example 100 number of lines of code are there
After executing this document.getElementById("divid").innerText = "Dhoni" what happens?
100 lines of code is now overridden by Dhoni or not?
At the time of executing this line it is going to identify this div 
And remove whatever children is there within the DIV
Now what is the children of div?
It is a text node holding text Sachin
So Sachin will be removed
And then whatever new data is there that new data is going to be placed here or not?
Ok so it is going to place the new data..
Once the data is ok now then at that time if new data is coming it should be displayed on browser or not?
So my HTMLParser is going to read the existing values
And then CSS Parser is going to read the CSS
And once again attachement is done
And then prepare that Tree
And then paint it
Then only my Dhoni is gong to visible here on brwser.
So the same process is followed everytime when ever the original DOM is updated.
So the original DOM update is like this only. which may cause performance issue
To avoid this one my react team has come up with virtual dom concept

How much virtual dom is going to work we will see that now.
This is a javascript one
Ok..now see how my virtual DOM is going to work means this is my original DOM right
From my original DOM at the time of rendering my react is going to take the original DOM
Whatever the content is there within my original DOM 
And it is going to put within the virtual DOm or in one object within the js file or something it is going to maintain..

For example 100 lines of code at the time of loading 
that 100 lines of code is going to take and he is going to put react.js library or somewhere outside of your application
Now 10 lines of code or 1 line of code or whatever it is.. 11 lines of code is there for example within the real DOM
At the time of loading 11 lines of code is there
That 11 lines of code is going to copied where? TO the virtual DOM.
Now within the 10 lines of code 5 lines and 5 lines is ok.. 
But in between 6th line my n value is keeps on changing or not
Yes or no?
If my n value is going to be keep on changing then at that time my virtual DOM is going to be updated first.
And then he is going to compare my virtual DOM with the original DOM
Understand or not?

First time 11 lines of code is there. And in between my n value is 1. This is first time load.
After 5 second or some time my n value is going to change to 2.
My react does not directly put the value within the original DOM
It is updated within the Virtual DOM.
Once it is updated within the virtual DOM its going to compare my original DOM with the virtual DOM
Once we compare how many lines of code is changed? only one line of code is changed or not? that is 6th line
Only that line of code is going to be pushed within the real DOM
For that reason they wrote one algorithm. 
As compare is there between virtual DOM and real DOM ,they wrote some algorithm called as diffing algorithm

Ok 500 lines of code is there, state variable is there, next 500 lines of code is there.
Which value is going to change?
state variable or not that is 501..
So only that line of code is going to be pushed to real DOM after the comparison is done

*Q* So if anyone asks why we go for react?
In your application if you are making frequent changes on the DOM
For example take this facebook one.
We have one post is there...one like button is there and one comment section is there
Another post is there...one like button is there and one comment section is there
So if we hit like and like and like it keeps on changing right...
So what part is updated in the post only that is going to be updated. 
Rest all are not updated nothing thats not impacted..
That means how many times my render() methodis going to trigger its not impact performance
It is one of interview question

Ok now coming to our previous program add 2 numbers.. what is pending?
We have to add the color or not
when number is  > 100 red, otherwise green

*Q* Ok now tell me how many ways we can add the styles?
2 ways 
class and inline styling ok..
By using inline styling how we can put we wills see...
Ok where we have to write the code first tell me?
In render() method right... where we get the sum value and we can decide 
TO whom i have to apply the styles?
On the span or not? where we are displaying the state variable sum value... that is within render() return
How we can update the style? using style attribute or not?
This style attribute we can put like {color : 'red'}
But that color red should be dynamic only?
now this.state.sum is available 
based on its value we will update style..
Now lets create a clr as a state variable as its value will be changed accordingly when the sum changes.
So within constructor we can add it to this.state
earlier we had sum as a state variable with default value 0
now lets add cls as "" empty string
	this.state = {
 		sum: 0,
        clr: '',
	}

Now within fnAdd() once we get the sum value can we write a condition to change clr value?
When sum < 100 we are updating state variable clr as green
Otherwise if sum > 100 we are updating state variable clr as red
Also note instead of writing setState() multiple times like with red or green
We can only write it one place
Lets take a local variable _clr and let that variable keep the value green or red based on condition
	fnAdd() {
      let n1 = this.refs.n1Ref.value;
      let n2 = this.refs.n2Ref.value;
      let sum = Number(n1) + Number(n2);
      let _clr = 'red';
      if (sum < 100) {
        _clr = 'green';
      }

      this.setState({
        sum: sum,
        clr: _clr,
      });
    }

So upto it is ok..
Now we have to use this.state.clr inside span style attribute to set the color attribute or not?

How many properties we can apply using inline styling?
Any number of properties like color any number of properties 
So it has to go like a json object with key value pairs...{color:'red',fontSize:12,...}
Any dynamic value if we want to render in react how we render using expression or not?
i.e. {}

            <span style={{ color: this.state.clr }}> {this.state.sum}</span>
*Q* So this double {{}} curly brace for style means what?
    This is like one for dynamic rendering and another is to consider it like an object


here iif we want to add another property we can put like a comma and add it...
So this is one way we can apply styles 
This is called inline...


Now there is another approach using className also we can add styles...
So we have 2 conditions to satisfy either red or green
Lets create these 2 classes i.e. example cg or cr
<style>
  .cr {
    color: red;
  }
  .cg {
    color: green;
  }
</style>

Now can we create another h1 with span to display sum using className
We can use ternary operator to add the className based on this.state.sum value

Here is the code...
 			<span className={this.state.sum > 100 ? 'cr' : 'cg'}>
              {this.state.sum}
            </span>


Now save everything and rerun the code again.

Now we can see both ways the styling works...

@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
Now lets discuss communication between the components...
We will see parent to child as well as child to parent
Ok we can say a component is a parent component and one component is a child component?
How we can decide that?
Inside another component A If we render another component B then A is acting like parent and B is acting like child
Already we have discussed how to pass data from parent to children. But we will see this.
And we will also discuss children to parent communication

First lets discuss parent to child
I have one parent component called App
I have one more component child component called Child
Then how we can tell this Child component is child and App is parent
Within App component we have to use Child component or not.
Then only we can say that App is parent of Child
Where inside App we can use Child component?
Within the render() method or not...
Now I have to pass data from App to Child
SO can we create first data inside App?
How I can maintain data inside App?
Can we create some variable?
Can we store in current object or store..
Lets store it in state inside constructor.
this.state = {
	name : "Sachin"
}

Now this name "Sachin" we want to display in Child or not?
My data is available within the parent App
We are going to pass the data to children
SO my Child is going display the data or not?

So my Child within render() method of App...How we have used?
Like an element or not? <Child />
So can we pass the data from App like an attribute to Child?
So Child is user defined component.
We can pass any number of attributes with key and values...
So we can pass like 
	<Child n={this.state.name} /> from App render() method...

Now my Child component may be a class component or may be a functional component or not?
If my Child component is a functional component it will receive data passed from parent App like an argument as an object..
So inside Child component we have to fetch the data as an object by using same key from argument object.
Exactly by using the same attribute name passed from parent. 
For example from App we passed <Child n={this.state.name} /> 
Inside Child we will receive as follows. We are using same key "n" that is passed from parent App.
	function Child(obj){
		console.log(obj.n)
	}


If my Child component is a class component it will receive data passed from parent App like this.props
So From parent App we are going to pass data similar way. there is no change in it...
For example from App we passed <Child n={this.state.name} /> 
But now when we come to Child to receive data its a class component now.
It will receive as follows.
	class Child extends React.Component{
		render(){
				console.log(this.props.n)
			return <div> </div>
		}
		
	}


Now we will discuss the communication from child to parent..
Now I have a child component called Child. It has the data and a button .
When i click on the button the data should go to parent
Lets write the code.
Within the Child what we have?
One textbox and and one button.
At the time of clicking on button only we have to send the data. We have to perform some operation or not?
Which operation we want to perform?
Take the data from Child and send it to Parent or not?
So lets handle the onClick event first..
And we also covered how to get the textbox value using this.refs..
So lets receive the value from textbox within button onClick method we have defined.

  class Child extends React.Component{
        render(){
            return <div>
            <h1>Am Child</h1>
            <input ref="nameRef" />
            <input type='button' value='send data to parent' onClick={this.fnGetData} />
            </div>
        }
        fnGetData(){
            let name=this.refs.nameRef.value;
            this.props.fnSetData(name);
        }
    }
    
Now this data I want to pass.
In the component how many ref we create all the refs will be available within this.refs
And we can retrieve using this.refs.refkey
	let name=this.refs.nameRef.value;

Now if I use like this which error came?
It will be undefined because we have not yet binded the function fnGetData yet
So now this is not recognized within fnGetData(), this is undefined here
this.refs is not available within the fnGetData(), 
So we will have to bind the fnGetData() method with this
    <input type='button' value='send data to parent' onClick={this.fnGetData.bind(this)} />
    
Either parent to child and child to parent I want to pass data.
Some communication is required or not.
That communication is happened through attribute only once again.

SO that lets go to App component where we have instantiated Child
There only we have to add attributes or not?
Now my attribute is what? Any name we can put like anything or not..
We can give key as any name and value could be a string or number or object or function whatever we can we mention.

If you remember our last example parent to child we passed attribute that is <Child n={this.state.name} /> from App.
So basically we passed an object and we were receiving like props or not..{this.props.n}
So here also same thing..
Now App is my parent component. 
Within my component we can write any number of methods or not?
Can we write a method here in App? like fnSetData()
Now any method we defined within a class how we can represent in a render() method?
this.fnSetData()? yes like this we have to use or not..

So now we have <Child /> rendered in App
And we have set an attribute fnSetData={this.fnSetData}  inside <Child />

Now as discussed in Child class we can use the attribute like this.props.fnSetData we had set for <Child fnSetData={this.fnSetData}/> inside App
Now if it is a variable we will just store it somewhere otherwise if it is a function we are going to call it ot not?
So we are calling that this.props.fnSetData(name) from our Child class button click method this.fnGetData.bind(this)

  class Child extends React.Component{
        render(){
            return <div>
            <h1>Am Child</h1>
            <input ref="nameRef" />
            <input type='button' value='send data to parent' onClick={this.fnGetData.bind(this)} />
            </div>
        }
        fnGetData(){
            let name=this.refs.nameRef.value;
            this.props.fnSetData(name);
        }
    }

And we are passing with one argument here...if yu notice
this.props.fnSetData(name)
ie. one argument name we have passed while calling this...
That means in Parent App where we have defined method fnSetData() 
we have to define one argument method here as the child is going to call this method internally and sending one argument..
	fnSetData(d){
            this.setState({
                'name':d
            })
    }


So this is like child to parent communication...
Here is the full code example child to parent :-

<script type='text/babel'>
    class Child extends React.Component{
        render(){
            return <div>
            <h1>Am Child</h1>
            <input ref="nameRef" />
            <input type='button' value='send data to parent' onClick={this.fnGetData.bind(this)} />
            </div>
        }
        fnGetData(){
            let name=this.refs.nameRef.value;
            this.props.fnSetData(name);
        }
    }
    
    class App extends React.Component{
        constructor(){
            super();
            this.state={
                name:''
            }
            this.fnSetData=this.fnSetData.bind(this);
        }
        fnSetData(d){
            this.setState({
                'name':d
            })
        }
        render(){
            return <div><h1>Am parent:{this.state.name} </h1> <Child fnSetData={this.fnSetData} /></div>
        }
    }
    
    ReactDOM.render(<App />,document.getElementById('root'));
</script>


Here is the full code example parent to child :-

<script type="text/babel">
  class Child extends React.Component {
    constructor() {
      super();
    }
    render() {
      return <h1>Am Child: {this.props.n}</h1>;
    }
  }
  //   const Child = (data) => {
  //     return <h1>Am Child: {data.n}</h1>;
  //   };
  class App extends React.Component {
    constructor() {
      super();
      this.name = 'Sachin';
    }
    render() {
      return <Child n={this.name} />;
    }
  }

  ReactDOM.render(<App />, document.getElementById('root'));
</script>
`

*************************************************************************************************
27/01/19
*************************************************************************************************
Balloon Programming
====================
We need 4 components
Board 
Balloon
Arrow
Score
App -> root component

Within the App component we will keep directly the Board component and the Score component.
Within the Board component we will keep Arrow and Balloon component.
So total we will be needing 5 components App, Board, Score, Balloon, and Arrow

Lets design this one first....

shoot.html
===========
1. We need 3 files for react - react.development.js, react-dom.development.js, babel.js
2. Create a div to behave like container. Give an id like "root" or something
3. Write a script tag with type="text/babel"
4. Then lets create a class called App using react. 
	class App extends React.Component{
		render(){
		
		}
   }
   
   Please tell me some members coming from React class - render(),constructor(),props, this.refs, this.state, this.setState()
   If our class is extending from React.Component immediately we have to override render().
   If we don't we will get error - render() method not found ...
   Simply if my component is the class component my React is going to create an object 
   With this object we are going to call the render() method. And if the method is not found it gives error 
   	 - render() method not found ... 
   	 instance.render() it is going to call
   	 So we have to override the render() method..
   	 And render() method has to return something.
   	 If there is no return statement again we will get error - my render() method does not return anything
   	 Now once everything is ready here.. this class component with render() with return..
   	 We have to load this to the container that is the div with id ="root" we created
   	 For this which library is required? "react-dom.development.js"
   	 
5. ReactDOM.render(<App/>,"root")
6. Now create Board Component with 2 components - render return -  <Arrow> and 3 <Baloon>
7. 


shoot.html
-----------
//importing all 3 scripts
//creating root conainer where app component will be loaded <div id="root"></div>
//creating <script type="text/babel"> to write our js code
//creating <App> component and render 2 elements - <Board> and <Score>
//ReactDOM.render(<App/>,"root")
//Now create Board Component with 2 components - render return -  <Arrow> and 3 <Baloon>
  App
    -Board
        -Arrow
        -Balloon
    -Score
//Create Arrow Component
//Create Balloon Component
//Now add styles for .board class(relative) , .balloon class (absolute,border-radius), .arrow(absolute, width)
//Now in Board Component render() 
    -return <Balloon> component with attributes to set height,width,top and left for each balloon
    eg. <Balloon s="70" t="100" l="80" />
//Next in Balloon Component receive these above values as props.
  Use it in render()
            const { s, l, t } = this.props;
            return <div className="balloon" style={{width:s,height:s,top:t,left:l}}></div>
//Now refresh the page and we will see 
    - 3 circles/balloons are ready 
    - arrow is ready
//We have 3 balloons. But i have to choose the target balloon.
 Which balloon we click that balloon is going to be the target balloon. We will change its border color to green.
 Lets add a class as bal-active..
 And every time on any balloon click we will check if the class already exist 
 	we will remove that and add it to target balloon.
 Set the target balloon on click of any selected balloon using event object
    - write a click method inside Balloon Component 
    - add fnBalClick(eve){ 
        //add code here
        let targetBal=eve.target;
        let activeBal=document.querySelector('.bal-active');
        if(activeBal){
        activeBal.classList.remove('bal-active');
        }
        targetBal.classList.add('bal-active');
        }
    - in Balloon component render() - return
    <div className="baloon" onClick={this.fnBalClick} style={{width:s,height:s,left:l,top:t}}>
               </div>

- Now again refresh the shoot.html.
- On selection of any balloon it will be green color Now
	 .bal-active {
    	border: 2px solid green !important;
  	}
  	

*************************************************************************************************
28/01/19
*************************************************************************************************

- Next is to add keyup, keydown ,enter for arrow. 
  We have to add it to Window addEventlistener on Arrow Load i.e. within constructor
- Here as we are going to move the arrow top and left will be changed dynamically.
  So we have t set them using state inside Arrow constrcutor and use them in render()
  constructor(){
            super();
             this.state = {
                t: 0,
                l: 0
            }
  }
  Also render - 
   render() {
            return <div className="arrow" style={{ top: this.state.t, left: this.state.l }}></div>
        }

- Next Add the listeners- and change the top and left accordingly for arrow on keyup and keydown
  We will write code when keycode is 13 i.e. enter, 38 keyup and 40 keydown
  enter to start moving arrow from left to right (left will change)
  keyup to start moving arrow bottom to top (top will change)
  keydown to start moving arrow top to bottom (top will change)
  
  Here the position of arrow is not static as top and left will change based on how we move it using keys..
  So lets use 2 state variables for top and left... t and l 
  And initialise to 0 inside constructor as on initial load arrow position will be 0,0(top,left corner)
  
  Also in render() we have to set style for arrow for this dynamically changed left and top ...i.e. l and t
  So  <div className='arrow' style={{ top: this.state.t, left: this.state.l }}  ></div>
  
  class Arrow extends React.Component {
      constructor() {
        super();
        this.state = {
          t: 0,
          l: 0,
        };
   		 window.addEventListener('keyup', (eve) => {
                if (eve.keyCode == 13) {
                    console.log("enter")

                    let myInterval = setInterval(() => {
                        this.setState({
                            l: this.state.l + 1
                        })
                        if (this.state.l == 350) { //i.e. 400 - 50(width of arrow)
                            clearInterval(myInterval);
                            this.setState({
                                t: 0,
                                l: 0
                            });
                        }
                    }, 20);
                }
                if (eve.keyCode == 38) {
                    console.log("keyup")
                    if (this.state.t != 0) {
                        this.setState({
                            t: this.state.t - 5
                        })
                    }
                }

                if (eve.keyCode == 40) {
                    console.log("keydown")
                    if (this.state.t != 400) {
                        this.setState({
                            t: this.state.t + 5
                        })
                    }
                }
    		})
    	}
      render() {
        return (
          <div
            className='arrow'
            style={{ top: this.state.t, left: this.state.l }}
          ></div>
        );
      }
    }

//Now instead of hardcoding to 350 to reach the arrow to boundary we need to hit the balloon exact.
  So We need to pass the balloon options like left, top etc to Arrow.
  We can pass to Balloon info to its parent Board and then back to Arrow from Board
  How we can pass balloon info to its parent Board?
  	//by using event delegation or not..
  	//create a method in parent i.e. in Board 
  	//call it from child i.e. from Balloon
  	
  	Board
  	=======
  	class Board extends React.Component {
  	constructor() {
        super();
        this.state = {
          balInfo: null,
        };
        this.fnGetBalInfo = this.fnGetBalInfo.bind(this);
    }
  	fnGetBalInfo(baloon) {
        this.setState({
          balInfo: baloon,
        });
      }
     render() {
        return (
          <div className='board'>
            <Arrow balInfo={this.state.balInfo} />
            <Balloon fnGetBalInfo={this.fnGetBalInfo} s='50' l='300' t='80' />
            <Balloon fnGetBalInfo={this.fnGetBalInfo} s='100' l='200' t='180' />
            <Balloon fnGetBalInfo={this.fnGetBalInfo} s='70' l='300' t='300' />
          </div>
        );
      }
    }


  Balloon
  =========
    fnBalClick(eve) {
        console.log(eve);
        let targetBal = eve.target;

        let activeBal = document.querySelector('.bal-active');
        if (activeBal) {
          activeBal.classList.remove('bal-active');
        }
        targetBal.classList.add('bal-active');
         
        //below imp line to pass balloon element i.e. targetBal to Board by calling method fnGetBalInfo()
        //fnGetBalInfo() is defined in Board component and passed to <Balloon /> like an attribute
        //So inside Balloon it is available like this.props.fnGetBalInfo()
    
        this.props.fnGetBalInfo(targetBal);
      }

Now we have the balInfo or the balloon instance stored in balInfo which is a state variable in Board.
So now we can send this to Arrow using attributes
            <Arrow balInfo={this.state.balInfo} />
And inside Arrow component we can receive the same using this.props.balInfo.


And in Arrow component as we discussed we will get that using this.props.balInfo
So this balInfo we passed from balloon to Board(child to parent) and from Board to Arrow(parent to child)
So whatever the parent has by default available to its child or not.
By default my balInfo will be null.
Now we are going to update with what? our original balloon info or not.

Now we clicked on enter?which one is going to trigger? Arrow component or not?
So click on enter is nothing but what keycode = 13

Now in order to disable the balloon we need top,left and height of balloon.
    const { offsetHeight, offsetTop, offsetLeft } = this.props.balInfo;
    
My arrow top is - this.state.t
Balloon top is - offsetTop
Balloon bottom is - offsetTop + offsetHeight
So for perfect hit my arrow top should be greater than offsetTop and my arrow top should be less than offsetTop+offsetHeight

Now the arrow when it touches the ballon border it should remove the balloon 
and arrow should move to 0,0 left top corner.
But now this is not happening arrow is hitting the board right side border after hitting balloon.
So to achieve that we have to set the targetLeft 
That will be offsetleft(balloon left) and subtracting 50(arrow width)
	i.e. targetLeft = offsetLeft - 50

So when arrow left will reach targetLeft then we have to stop the arrow moving further 
	and set arrow top and arrow left to 0 and 0.And make the balloon disappear

We should check 2 scenarios here. One we discussed one scenario here when it is a perfect hit.
i.e. 
my arrow top should be greater than offsetTop and my arrow top should be less than offsetTop+offsetHeight
if(t>offsetTop && t< offsetTop+offsetHeight){}
here t is the arrow top
offsetTop is balloon top
offsetHeight is balloon height

Now lets discuss 2nd scenario where arrow never touches the selected balloon.
That means else case - if it touches the wall it should move to 0,0 left top corner. 
  window.addEventListener('keyup',(eve)=>{
          if(eve.keyCode == 13){
              debugger;
              if(!this.props.balInfo){
                alert('please select target baloon');
                return;
              }
              const {offsetHeight,offsetTop,offsetLeft}=this.props.balInfo;
              const {t,l} =this.state;
              if(t>offsetTop &&t<(offsetTop+offsetHeight)){
                  let targetLeft=offsetLeft-50;
                  let myInterval=setInterval(() => {
                  this.setState({
                      l:this.state.l+1
                  })
                  if(this.state.l == targetLeft){
                    clearInterval(myInterval);
                    this.props.balInfo.style.display='none';
                    this.setState({
                        t:0,
                        l:0
                    });
                    this.props.fnShootInfo(true);
                  }
              }, 20);
              }else{
                let myInterval=setInterval(() => {
                  this.setState({
                      l:this.state.l+1
                  })
                  if(this.state.l == 350){
                    clearInterval(myInterval)
                    this.setState({
                        t:0,
                        l:0
                    })
                    this.props.fnShootInfo(false);
                  }
              }, 20);
              }
          }
        .....
        .....
    }

If we did not select any balloon then there will be no balloon info balInfo.
It will be null. We have to handle that as well.
		if(!this.props.balInfo){
                alert('please select target baloon');
                return;
              }


*************************************************************************************************
29/01/19
*************************************************************************************************
Now lets update the score component with the score and chances left.
In my arrow component if its a correct hit then we have to inform to score component.
Now Arrow should inform to Board, Board should inform to App and then App should pass to its child Score.

if its correct hit, score will be increased by 1
if its a wrong hit, chances left will be decreased by 1
So if its a correct hit lets send a boolean value to Score true or false
How we can do that? By event delegation... 

Lets create a method in Board fnShootInfo() 
And give it to the Arrow component to send a boolean vale for perfect hit or not
    <Arrow fnShootInfo={this.fnShootInfo} balInfo={this.state.balInfo} />
Here the above line is the render() return of Board component where we are instantiating Arrow to load..
And fnShootInfo() is the method we pass as an attribute to Arrow 
fnShootInfo() we defined inside Board component only.
Later when Arrow is going to receive it , it will receive this method from Board as props.
i.e. this.props.fnShootInfo() and in here it can pass any data by calling the function.
Below code how it is called from Arrow component..
	if(t>offsetTop &&t<(offsetTop+offsetHeight)){
            .....
            this.props.fnShootInfo(true);    
    }else{
    		......
    		this.props.fnShootInfo(false);  
    }  

Below is how method is defined inside Board and it is expecting an argument while it will be called.
Here we are also setting the balInfo to null if its a perfect hit.
And then its calling another method fnScore() which is defined in App. 
And we are calling this fnScore() by passing a boolean value.
Because Score is defined in App. Its a sibling to Board. 
As far we know there is no way to pass from Board directly to its sibling Score
So we have to pass it back from Board to App and then  from App to Score
 	fnShootInfo(val) {
        if (val) {
          this.setState({
            balInfo: null,
          });
        }
        this.props.fnScore(val);
      }


And similarly when arrow information is available in Board component 
lets pass it to its parent component App
So inside App we have to define one method and pass it to Board as attribute. See below code
i.e. App component
    
class App extends React.Component{
     constructor(){
         super();
         this.state={
             score:0,
             cl:1
         }
         this.fnScore=this.fnScore.bind(this);
     }
     fnScore(val){
        if(val){
            this.setState({
                score:this.state.score+1
            })
        }else{
        	//if chances left is reached 0 then refresh the whole page..
            if(this.state.cl ==0){
                window.location.reload();
            }
            this.setState({
                cl:this.state.cl-1
            })
        }
     }
     render(){
         return <div>
                    <Board  fnScore={this.fnScore} />
                    <Score score={this.state.score} cl={this.state.cl} />
                </div>
     }
}

We have also maintained 2 state variable for score and chances left in App component 
	as we have the boolean value made available here i.e. (correct hit or not)
	
Now we can send these 2 state variables to its child Score.
  <Score score={this.state.score} cl={this.state.cl} />


Next lets go to Score component and update the values and lets display it.
It will receive both from App component like props..
class Score extends React.Component{
    render(){
        return <div> 
                  <h1>Score:{this.props.score}</h1>
                  <h1>Changes Left:{this.props.cl}</h1>
               </div>
    }
}

Now refresh the page and check if everything works as expected or not.
Now we are done with the balloon programming.
Lets move next requirement..

@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
Here is my next requirement. 
I have a registration form. 
I want to take the data and put the data into the database.
I want complete end to end flow in react
I want my simple registration form with my user id and my password and my emailid and phone number.
I have a button called as register.
If I click on the register button I have to fetch the data, push the data into the database.
This is my total requirement.
My database I am going to use like mysql one.

client side person responsibility
==================================
1.Now if we have to prepare this view by using jsx we know that.
2.If I click on the register button we know that how to handle the event.
3.If I click on the button we have to take the data from view
4.We have to validate the data
5.Prepare one json object

Now we have to put this data to the database. But client is not connected to the datatbase.
Our client side technology like jquery, angularjs,angular,react so many technologies are there.
No technology has the capability to connect to the database or not..
Now some other person is required or not?
Who is that other person?
That is the server side person.
So in this particular scenario we are using nodejs as the server side guy.
Understand or not?
Now nodejs is going to communicate with the the database to store the data.
Hence reactjs is going to comunicate with nodejs(server) instead of database directly.
From client to server how we can communicate?
with ajax call or not?
already we have discussed earlier
ajax is going handle the communication between client to server (request) and server to client (response)

6.Through ajax we have to send the request to the server and get this response or not. 

So the above are our react side / client side responsibilities.
Now lets go to the server side responsibilities.

server side person responsibility
==================================
1)Has to receive the client side request
2)Establish connection with the database.
3)Once my database is ready we have to perform some operation with the database

Has to receive the client side request
Through request one json object is going to the server or not.
Now once the request is received by the server , where is my data?
my data is coming as part of the request object.

Now we have to make the connection to the database.
Server has the capability to connect with the database.
So establish connection with the database.

Once my database is ready we have to perform some operation with the database or not?
What operation we have to perform with the database?

So in our requirement we have to insert some data or not.
Once my operation is completed we have to send the response back or not?



So if want this full requirement what all things are required?
client app
server app
mysql - database (school) - student table


Now the client side part almost we know..prepare view, take the data, prepare the json.. etc
lets concentrate on ajax call now
As a developer if you want to send the data to the server what things are required in general?
	- url
	- request method

Server side guy has to provide all these details.
When we go for server side interaction?
When we have to perform some operation on the database then that time only we will need server
Otherwise not required.

Its because client does not have the capability to communicate with the database.
So if i want to perform any operation on the database my server side technology is required.
Otherwise not required.
So in our case scenarios server side technology required or not required?
required right...

Now the server side person which type of code he has?
not only student, multiple tables are there or not..
yes or no?
So we have the school database
within the school we have student table, result table etc..
we can perform all crud operations.
And our server can handle all these tables.
And we can maintain separate files for each..

we will create like student.js and we will perform operations like insert, delete , update, select.
Now in our case from client side when we click on register button which method should get called?
//insert

Now the person who developing client side app may not be the same person who develops the server side app.
so assume they are different people.
So how client person will know that which method he is going to call?

So for that the server side guy will tell to client side person - 
	if your operation is insert can you call this method?

No one expose the name directly or not.
For that reason for each and every method they give like one identity called as url
lets put like std-registration - this url given by the server side people.
By using this url the client to send request one request to this particular server 
Based on this url this particular method in server will get called

So apart from url we also need to send the request method type. that is also decided by server side guy.
These are the methods we use - GET,POST,PUT,DELETE
Once again who decides these methods? server side guy or not?
Based on what? based on their(client side) operations...
Here this method is for insert..it is going to insert a new record to the database.
So if it is a new record my request method is like POST
Here we are going to delete a record from the database. 
So my url is std-delete and my method name is delete
If i have to update student url is std-update and my method name is put.
Now there are 10 users are there. i want that 10 students.
Then my url is like std-get and method name is get.

That means my server side guy knows what is the functionality we are going to do on this particular table
Based on that functionality he is going to decide our method or not..
So my server side guy responsibility is what? 
He has to decide the url and the method and he has to give the method and the url to whom?
To my client side person.
So that by using that one we can send request to the server side person.

Now we have to prepare the json object..
json object how it looks like?
within the client side my json object is nothing but like key and value pairs.
Which one we have? key we have or values we have?
we have the values only.
See we are entering username as u1, password is p1, email is u1@gmail.com and phone is 9357534344
So we have the values i.e. u1,p1,u1@gmail.com and 9357534344
I have the values
Then what about the keys
Once again my keys most of times are decided by the server side guy.

Now my data is going as part of what request only or not?
ok here what is my first step?
	//receive the request is the first step
What is my second step?
	//take the data from the request
	//data is coming as a part of body
	//so we will receive as req.body.key
		e.g. req.body.username
			 req.body.password
			 req.body.email
			 req.body.phonenumber

so my keys are username,password,email and phonenumber

Suppose from ui we are sending the data where keys are u,p,e,m
If you pass the data in this format this object goes where? my server...
but server side it is expecting keys like username,password,email and phonenumber
So there is a mismatch is there or not.
So at that time what is my data? undefined or not..
So what my server side guy is expecting in that format only we need to pass the data.
Ok how this guy knows?
So my server side guy sends/has to tell the data formats also or not.

SO as a client side developer what you are expecting from server side?
a url,
method type,
data format if we need to pass the data

Now if we have all these url, method type and data format can we send a request to the server.

lets start...

We can install xampp - we will get mysql, server all in single pack
Otherwise we can directly install mysql database.
xampp for php but we can use for mysql also
Once u install that gives us an icon like this. one xampp folder is created.
....
sql runs on apache in xampp...do this setup.
I am skipping because I am using SQLWorkBench

CREATE TABLE `my-react-schoolapp`.`student` (
  `id` INT NOT NULL AUTO_INCREMENT,
  `uid` VARCHAR(50) NULL,
  `password` VARCHAR(50) NULL,
  `address` VARCHAR(200) NULL,
  `email` VARCHAR(200) NULL,
  PRIMARY KEY (`id`));



So lets start with the development..
lets create a folder called schoolApp
Now within this particular application lets create 2 folders.
- client
- server

Now one database we have to create.
We have created one - my-react-schholdb
Within this database what we have to create?
One student table. lets create that with 4 fields.
first field is id thats identity and it is auto incremented.
works like primary key
whats next one?
userid, password, email and phone number



Now coming to the folder structure we have created 2.
Come to the server folder.
Now my client is react app
and my server is a nodejs app
schoolapp
	- client
	- server

In our server side if we want our nodejs skeleton how we will get it?
We have one framework called express is the framework
Using the express framework we can get the skeleton of our project.
Ok..how we can get that express means in your machine node software should be installed
So we will go one by one.
We dont create the skeleton manually. most people use commands to create.
So we are using express for same.
Its a command given by node community.
For that lets open command prompt.
type npm or node.
npm stands for node package manager.
In our system if node is not installed we will get an error like - npm is not found as an external or internal command
That is the error came. if its there then no error
So if it is not there go to google..we have to download node software and install it.
Once installed quit the command prompt. open it again. type npm.
it should be available by this time.

now within command prompt type express. express is not there.
Which error came?
express is not found as an external or internal command.
If its there no problem.
If its not there install it using npm
npm i -g express
npm i -g express-generator

these 2 we need to install before we start the server side code.
Now we have to create skeleton in server folder.
go to server folder through command prompt.
Now you are in the server folder.
Now My node is there. my express is there.

cd server
express //gives the skeleton

Now we will get the skeleton
Lets open that in VSC.

bin - This is for build purpose. Now we are in development mode. so lets not discuss this one.
public - contains images,js,css. Can you tell me where you are using stylesheet? server side or client side?
		 client side right... javascript also client side, images alos client side or not.
		 This public folder which is related to client side related stuff or not
		 But I am using nodejs like a client or server?Server right...
		 But we can use nodejs for both client side and server side also
		 But in our case we are going to use nodejs as server side  and i am using react as client side.
		 So this folder is also not required now.
views - views is the one which is visible to the end user.
		In your react what is the extension? jsx
		In your angular what is the extension? html
		In your nodejs what is the extension? jade file
		The purpose is what? you need to show something to the end user or not.
		My view is which side client or server?
		client side or not?
		But in our case my client is react so no need to touch this folder as well.
		

Now remaining things are what?
routes folder is there.
app.js is there
package.json is there

Only these 3 things we have to know.
Now lets open routes folder.
Here we have to write our end points.
What files you need here? student.js or not
we are going to perform operation on student
we can create one file otherwise we can use existing file also i.e. index.js
And all we are going to do here is writing the end points

Next one is what? app.js
If you observe here see we have so many files and folders available.
How we can run all the fies and folders? Individually i cant run right..
SO i want a root file 
Ok if i run the root fie that means all the other files and folders are like up and running.
Whatever you wrote within the node application each and every file should have to included in app.js or not.
So if we run app.js then it means that our application is up and running or not..
So my app.js is working like a root file.
Ok can you tell me how we can run our app.js

If we have the js file how many ways we can use the file?
2 ways..one is loading and the other is running

Ok for example think our react.development.js we are running that one or loading?
We are loading..
So which file is running that case..we have some html file developed that is running..

So here in server folder my app.js is running or loading?
It is always up and running.
We have a command called as a node.
node app.js or node app
We are running our node app.js file means what ?
We are running our node application.
So lets see that how we are running that one.

But now while running it gives me an error. why is that?
my app.js is depending upon some other libraries or not.
those libraries are not loaded.
So if you open app.js and check here.. 
see within the app.js we have so many other things are there or not.
These are the libraries or not.
So what we have to do?
We have to get those libraries or not?
Then what we have to do?
Within my node application my app.js file is there
While running this file my app.js is depending upon some other libraries.
Those libraries we have to download it or not.
Like in our reactjs we can say react.development.js is one library.
Now this above library we have downloaded manually or not?
In realtime no one downloads the libraries like manually.
Because if we are downloading manually so much time it will take or not
So that one person is there. That person is going to give all the ui related libraries.
That person is nothing but our nodejs package manager.
So that my node npm put all the libraries within the cloud
So can we ask npm to download the libraries from cloud.
Now onwards lets not download the libraries manually.

how many libraries are required to download using npm how we will know that?
For that purpose we have one more library is there.That is known as package.json
My package.json contains all our application related libraries.
If we open the file we can see our dependancies are mentioned
SO these are the minimum dependancies to run our node application
So npm has to read our package.json and read our dependancies object and get all these libraries and has to place somewhere within our code
npm install is the command to download
and node_modules is the folder which gets generated parallel to package.json file with all libraries downloaded within it.
For this our internet should be enabled.

cd server
npm install

Once dependancies are downloaded to node_modules we can run our app
node app

My application is running. but now immediately our server is going to stop or not..
But our requirement is what?
In my local machine my server should run using a port number always or not?
If it is running always then only i can send a request right?
If my server is stopped if you are going to send the request who is going to receive the request?

In your local machine my application has to occupy one port number.
In that port number that application shoud be always up and running.

So where we are going to mention the port number? for that lets modify app.js
end of file add - 
app.listen(2020); //any port you can give
console.log('server is up and running');

Now save the file app.js and run the file once again.
node app

Now this file is up and running. it is never stopped,.
Now if you want to check if the server is up and running or not how you are going to check?
This is our nodeapp
This application is running where? on localhost in our local machine

localhost:2020 => node application

Now our requirement is what?
We have to execute a method in student.js file or not?

Within the roues folder how many files are there by default? //index.js
And we have added student.js that we have added manually.
Similarly we create as many we want.

Inside this student.js file we will have so many methods.
Suppose we are writing one method with url /std-registration,
So to reach this method or execute this we will be appending it to nodejs baseurl

But no one exposes the file name directly. 
So each and every file having one identity. that is suppose std for student.js
Now within this student.js as discussed we will having so many methods with different identity(url)
But which one we want now? that is std-registration
So the full fledge ur to access this method is - 
	localhost:2020/std/std-registration
	
Now this one we have to give it to my client side developer or not..

So whatever route file we create that has to be register with app.js
app.js
=======
var stdRouter=require('./routes/student');
...
...
app.use('/std',stdRouter);
...
...
app.listen(2020);
console.log('server running');
...
....
module.exports = app;



Now within the student.js file what we have to write?
We have to perform insert,update, delete and fetch all these operations
We have some functionality that we have to follow the syntax.
We are using which framework? express 
express - first lets get that.
	var express = require("express");
Now within the express we have a method available called router to write the end points
It gives a router to write end points
	var router = express.Router();
	
How we can write our end points? one url and one function is required or not?
route.get() or router.post() or router.put() or router.delete()
And finally we have to export the router object

	
student.js
==========
var express=require('express');
var router = express.Router();
....
module.exports=router;

*************************************************************************************************
30/01/19
*************************************************************************************************
Now come to our requirement.
What is my requirement?
Somebody gives me data. I have to store it in database.
Who is going to communicate with the database? nodejs...
So client gives the data to nodejs
From my client to server how my communication is happened? through request ajax only
through request and response.
So that this client person is going to send request to the server. 
In the request we have the data or not?
Most of the times my data is in the format of json object or not.
different types are there we will see that later.

First tell me, we have to concentrate on which folder now?
routes folder right..
Now within this particular database what you created?
This is my sql server. Within the sql server we have so many databases.
one database we have created is my-react-schooldb
Within this database there are so many table available. One table name is student table..
Now we have to insert the data to the student table. That is our requirement.
Now we have perform some opertion where? On student table..
Like this how many tables are there?
there will multiple tables or not?

yes or no?
Within this student table what operations you are going to perform?
insert,update,delete,fetch like this different different operation we are going to perform or not?
For that purpose I am going to write my own file.student.js within routes.
Now in routes we already have 2 files index.js and users.js
lets add student.js

So inside routers any file we create we have to register within app.js
because app.js is only file which is always up and running.
So we have to include all other files inside app.js only.
So how we can include that?
We already discussed that... by using require()
	var stdRouter=require('./routes/student');

So this gives one student file i.e. stdRouter
So if we have to execute any method inside student file how we will go?
First nodejs base url..
In our case it is localhost:2020
The for file there is one identity i.e. std in our case
and then the identity for the specific method is std-registration
So final url is - localhost:2020/std/std-registration
i.e. 
<localhost:port>/<filename-identity>/<methodname_inside_filename_identity>


Now to write any endpoint we need a library called express.
lets add express to this file using require()
Any library that is within the node_modules folder we do not have to mention any path.
We have to use it directly by name..
for example
require("express"); if we mention like this it is going to search from node_modules.

Now my express is available. What we have to do next?
If we have to use routing then express has a Router() method available.
So that can we call that method? express.Router()
It gives us a router object.

Now within this router we have different different methods available. we already discussed all these.
If we want to insert data can we write router.post()
If we want to fetch data we can write router.get()
If we want to delete data we can write router.delete()
If we want to update data we can write router.put()

Now our post() take 2 argument.first argument is a string and second is a callback function
Once my request hits this function we have to write some functionality.
Where we can write that?
We have a callback function for same.
This callback function is going to automatically trigger when somebody is going to hit the url or not
	//Now inside of callback what we need to do?
	//to insert the data first of all data is required right
	//my data is coming from where?
	//request object..it is obviously required
	//now once we have data from request object we have to perform some operation on data
	//and then we will use response object to send back to client
	//next is the third argument we will talk about it later.
	//Now how my data is coming?
	//from client to server how many ways we can pass the data?
	//if its a get request we can pass the data as part of query param only.
	//my query parameter is always part of url. 
	  It is going to start with ? after url and then key1=value1&key2=value2&...
	//if its a post request my data we can pass like query param, or request body like in json object
	//we can decide that one like how we want to send..
	//if huge data is there which one is recommended one?
	json object coming as part of request body
	Now think like my data is coming like request body. how we can take the data?
	so my json object will contain key and values
	so we can use keys to retrieve the data.
	 	var u= req.body.uid;
       var p=req.body.pwd;
       var e=req.body.email;
       var add=req.body.add;
       
    //Now this is the server side part. Now what things we have to share to the client side person?
    //url, method type and along with that these keys or not?
    //i.e. uid,pwd,email,add
    //Now the client person should use exactly same keys while preparing the json.
    

	
student.js
=========
var express=require('express');
var router=express.Router();

router.post("/std-reg", function(req,res,next){
	 	var u= req.body.uid;
       var p=req.body.pwd;
       var e=req.body.email;
       var add=req.body.add;
})


//Now the server side person got the data from client using request object body.
Now what operation he has to perform on this data?
We have to save means insert to database or not?
so for that we need to connect to the database from server to establish connection.
mysql library is required.

npm i mysql --save
If we use the above command it is going to download all dependancies for mysql within node_modules folder.
At the same time it will make an entry in dependancies section in package.json
So --save is to download library to node_modules and at same time register it to package.json
now mysql is available in package.json.

So why we need to save dependancies in package.json while downloading?
Suppose tomorrow we are going to share our code to some other person.
Then at that time we are going to share our node_modules or not required?
no one shares the node-modules. because it is a huge file.
Then how we can get these node_modules?
So if i dont use --save then it will never gets added to package.json.
For you it will work, 
but for the person who is taking the code it is going to break as the dependancies will be missing.
And it will be difficult to remember which dependancies we had added earlier.
As node_modules will be keeping thousands of dependancies.
So lets save this as --save

Please not we are not using -g that is global installation.
Because we might not use mysql for other projects. There might be requirements for mongodb or any other db.
So we do not need mysql that time.

now mysql library we have to import to student.js in order to establish connection with the database.
How we can import?
	const mysql = require("mysql")
	
Now mysql is also running on a server and we have to mention the port and all.
so we have to give few information as follows
	1. where mysql server is running
	2. which database we want to connect in mysql
	3. userid and password for databse
	
	And we have few methods available in mysql library that we are using.
	We can use method createConnection() to establish the connection.
	mysql is an object.
	it calls createConnection() and expects a json object
	So we are passing connection related information as an json object
	
    var con=mysql.createConnection({
           host:'localhost',
           database:'reactschool0120',
           user:'root',
           password:''
       })


Now we have provided some information to createConnection() 
i.e. a json object with connection details.
My createConnection() returns me a connection object i.e. con we received as a const con
Now we have to check if connection info we provided is correct or not
So for this con object has a connect() method
Now if my server is the localhost it may take just 2 seconds.
But if my server is available within the cloud then it may take more time.
How much it will take i dot know that.But i want to know if my provided information is correct or not
How can i so that? Using callback function or not?
So connect() method has a callback method which will get triggered after establishing the connection.
So callback() first argument like error and second argument like a success
If its an error that means whatever information we have provided it is wrong
So if error is there what we have to do? We will send back error info  to the client side person
so lets send the response back with err
			if(err){
                res.send('db con error');
            }

If there is no error and suppose the if block never gets executed that means everything is fine.
so we have to perform some operation now as my connection is success.
lets insert the data we received.

lets prepare the query before hand. Then we can pass to con.query()
So to execute the query we have con.query()
Even while executing the query it may be a success or it may be a failure.
if its eror or success lets pass these information to the client using res.send()
lets handle both cases.

student.js
=============
var express=require('express');
var router=express.Router();
var mysql=require('mysql');

router.post('/std-reg',function(req,res,next){
       var u= req.body.uid;
       var p= req.body.pwd;
       var e= req.body.email;
       var add= req.body.add;

       var con=mysql.createConnection({
           host:'localhost',
           database:'reactschool0120',
           user:'root',
           password:''
       })

       con.connect(function(err){
            if(err){
                res.send('db con error');
            }
            //my id is auto generated so we can remove that one from query.
            var q="INSERT INTO `student`(`uid`, `pwd`, `email`, `address`) VALUES('"+u+"','"+p+"','"+e+"','"+add+"')"
            con.query(q,function(e,r){
                if(e){
                    res.send(e);
                }else{
                    res.send(r);
                }
            })
        })


})

module.exports=router;
// we have exported this file so that it can be used in app.js as this is only file up and running

test this in postman

before that check once if the url if we hit from browser is coming to this method or not.
So type localhost://2020/std/std-reg/

Lets go and open the browser development tool -> network tab -> xhr -> click on the url
Now we have header,preview,response, how much time it took all these are there.
Now lets open the header.
We have 4 section present in header
	- general
		//general is for what?your server side resource related stuff
		//server side which resource..which end point you are going to hit by using which method
		//what it is going to return
		//that related information available within the general one
		//url, method name, status code, port etc
	- request headers (authentication)
	- response headers
		//above 2 used for authentication
		//we have client nd we have server
		//client sends request to the server
		//As part of request we are going to pass the data or not.
		//The data may be object format, string format, query param, email, doc file
		//So my client is sending one request to the server. 
		//Now server is going to take the data from the request or not.
		//And my request data could be any type. 
		//How my server will know what type of data has arrived?
		//SO by default server side person dont know the type of data.
		//Hence its the responsibility of client side person to inform the type of data in request headers.
		//Now again my server is sending response data back to the client
		//The data format could be anything
		//may be a json object, may be an image, may be another one
		//as a client side person how i know that one? which kind of response i have got?
		//My server side person has to tell something about the response or not.
		//So for that we use response headers.
		//My browser is the client. By default it is going to place these many request headers
		//Sometimes we are going to pass some tokens also for security purpose through headers only.
		
		So in our case for request these are the details.
		url- localhost:2020//std/std-reg
		method- post
		dataFormat - {
			"uid" : "u1",
			"pwd" : "p1",
			"email" : "e1",
			"add" : "hyd"
		}
		
	- request payload
	

* if post request we can send data using query param and request body
* If get request we can send data using query param only.


*************************************************************************************************
31/01/19
*************************************************************************************************

Now server side coding is done.
We will move into the client side part.
We have 4 fields - uid,pwd,email,add
ui - input type text
pwd - input type password
email - input type email
add - input type textarea

And finally we have a registration button

So first time load there will no records available in database. 
So in client we will show no records found
Now if i enter some values and click on the register button it will be stored in the database.
Now the text on screen "no records found" should be removed 
And the record which just saved to db has to be displayed instead in table format

Now again when another record is added to database successfully it will be displayed in the table again.

And so table will have exactly 7 columns.
First 5 are - id(auto incremented field), uid,pwd,email,address
Last 2 are - edit and delete 

That means each row will have an edit button and one delete button.

So basically how the HTML page should look like?
I have the registration form with 4 fields and a register button and one update button
By default my register button should be enabled and update button should be disabled.
Below that we have to display the table data.

Now when i click on edit for any record/row within the table 
Then that row data should be pre-populated within the register form above.
So on click of edit my register button should be disabled and update button should be enabled
Now we can change the field values and click on update.
These new data will be saved in the database.
And will be populated on UI or refreshed on ui
And again here register form should be loaded as initial state.
It will clear all fields and disable the update button and enable the register button

Now we have covered 3 operations. 
One is insert the data.. retrieve the data or fetch the data and load it to ui,
And also update the specific record/row
Now the last one pending is delete operation.

Now we select one record to delete by clicking on delete button.
Now one popup should appear asking are u sure you want to delete this record?
Once you click yes record should be deleted from database and once again my ui table should be refreshed.

So far we have written only one end point i.e. inserting data to database.
Let complete that part from ui as well..


Lets create a student.html in client folder.
Place all the necessary required scripts. - react.development.js,reactdom.development.js,babel.js
Lets import all
Make sure react library loads first because reactdom library uses react
<script src="react.development.js"></script>
<script src="react-dom.development.js"></script>
<script src="babel.js"></script>


Next we have to show something to the end user. 
For that we are going to create a component.
That component is going to render in a container.
So lets create that container.
	<div id="root"></div>

Now the component we are going to create we will be rendering within this container div with id is "root"
And we will be using reactDOM for same.

Now lets create the component first..
Now if our component is going to extend from React.Component then we have to override one method 
That is render() method.
And we have to return something from render()
Can you tell me some of the members coing from React.Component?
	//state,props,refs,setState()
	//"this" means coming from React.Component

So lets create the register form in render() return statement..
Now we have to render the component in the container or not.

<script type='text/babel'>
   class Student extends React.Component{
		render(){
			return <div>
                 <p>uid: <input id="uid" /></p>
                 <p>password: <input id="pwd" type="password" /></p>
                 <p>Email:<input id="email"  /></p>
                 <p>Address:<textarea id='add'></textarea></p>
                 <p><input type='button' value="Register"/></p>
			</div>
			
		}
	}

ReactDOM.render(<Student />,document.getElementById('root'));
	
</script>
			
So this is the skeleton or not..
Now lets run this...
Next we have to validate the data. 
So when we click on the register button that time we have to take the data and then only we can validate right.
If the data is not there then How we can validate?
When we have to validate the data?
At the time of clicking on the button or not?
So what is the client side responsibility?

has to handle the event, and then has to take the data and validate the data, 
and prepare the json object server side guy is expecting
and then finally send the request to the server or not

So how we can handle the event first?
using onclick or not.
So at the time of clicking on button we have to execute one method.
can we write the method.
This method has to execute.
So the method we have to use in button onclick 
We have to call or use the method name?
We have to use name it will get called automatically
	 <p><input type='button' value="Register" onClick={this.fnRegister.bind(this)}/></p>
If it is a variable it is going to bind.
Lets create a method fnRegister() inside component. 
we can embed the same way like render() method is embedded


student.html
==============
<script src="react.development.js"></script>
<script src="react-dom.development.js"></script>
<script src="babel.js"></script>

<div id="root"></div>

<script type='text/babel'>
   class Student extends React.Component{
		render(){
			return <div>
                 <p>uid: <input /></p>
                 <p>password: <input type="password" /></p>
                 <p>Email:<input /></p>
                 <p>Address:<textarea ></textarea></p>
                 <p><input type='button' value="Register" onClick={this.fnRegister.bind(this)}/></p>
			</div>
			
		}
	}

ReactDOM.render(<Student />,document.getElementById('root'));
	
</script>

Lets now refresh the page..
Whats next.
So now lets take data from the input field.
There are three ways to take the data from input fields
So far we are using like refs.
Now i dont want to use **refs.

By using **events also we can get the data.
Its very simple thing..
I have a textbox is there.
If we put any data here I want to take the data. I want to store somewhere.
Can you tell me how many fields are there like this?
We have 4 fields.

Server side guy is going to send a mail to client or not?
How my mail is looks like? 
url, method type and data format or not

Within my data format what he is going to tell?
its like userid is uid as key we need  to pass.
pwd as key we need to send for password
email and addr as keys respectively.
And while preparing the json we have to take this keys into consideration

By using events i want. How we can do this?
Which event is the suitable one?
onchange() or not..

lets add that...
If we add anything to the textbox one method should trigger or not..
lets write a method and map to onchange.

<script type='text/babel'>
   class Student extends React.Component{
		render(){
			return <div>
                 <p>uid: <input onChange={this.fnChange}/></p>
                 <p>password: <input type="password" onChange={this.fnChange}/></p>
                 <p>Email:<input onChange={this.fnChange}/></p>
                 <p>Address:<textarea  onChange={this.fnChange}></textarea></p>
                 <p><input type='button' value="Register" onClick={this.fnRegister.bind(this)}/></p>
			</div>
			
		}
	}

ReactDOM.render(<Student />,document.getElementById('root'));
	
</script>

Now just think we have multiple textboxes. So for each are we going to write separate onchange method?
Or for all textbox we will keep a single method?
Which is is best?
For all textboxes in the component should keep a single one.
as mutiple methods not recommended one
Now if we have a single method for all textbox, 
How this method will get to know that the change is happened to first textbox, second textbox?
So for that it will use event object.
Lets handle that event object.

Now where we are going to put the data?
We have to prepare a json object or not.
Now our responsibility is what?
For example whatever data we entered in first textbox that has to bind with uid or not..
whatever data we entered in second textbox that has to bind with pwd or not..
Like this we have to prepare a json object

Now when we enter the data using even we can get the value.
	i.e. event.target.value
But what about its key? key is required or not?
as we are going to map values to key in order to prepare json so key is required.

This is the user id field input textbox.
Lets add id to each textbox field.
And we can get this user defined id for each textbox using event object again same like value
	i.e. event.target.id
	
So lets add ids to each field.
	return <div>
                 <p>uid: <input id="uid" onChange={this.fnChange}/></p>
                 <p>password: <input id="pwd" type="password" onChange={this.fnChange}/></p>
                 <p>Email:<input id="email"  onChange={this.fnChange}/></p>
                 <p>Address:<textarea id='add' onChange={this.fnChange}></textarea></p>
                 <p><input type='button' value="Register" onClick={this.fnRegister.bind(this)}/></p>
			</div>
	
So now can we insert this one in an json object ?
Now tell me when we want to give this data to the server?
on click of register button.

state variable is the recommended one as its going to change..
so lets create a state variable 
	this.state = {
		data : {
			'uid':'',
            'pwd':'',
            'email':'',
            'add':''
		}
	}


Now we have to update this state variable data.. inside fnChange()
Hence we will use setState() for same
It takes one argument now. ie. one object
Here we are going to update data variable..
So we can see below how we did..
i.e. obj = {"name" : "soumya","roll":1,  "name" : "Stahl" }
If we use same key multiple times it will consider the last key and only consider the latest value.
Its like merging with existing values.
So now object value will be 
i.e. obj = {name: "Stahl", roll: 1}

Similarly down whenever any changes happen to any textbox field only that will be updated in the object.
Rest fields will carry the existing last updated values.
	fnChange(eve){
            let targetEle=eve.target;
            let key=targetEle.id;
            let val=targetEle.value;
            this.setState({
                'data':{
                    ...this.state.data,
                    [key]:val
                }
            })
        }


Now once this is done my data is available as a state variable this.state.data
And we can use it from button onclick method to send it to server.
Can we do this one now?
Lets do this...

 fnRegister(){
 	console.log(this.state.data);
 }


How we can send request to the server?
We can send request in multiple ways
Using axios in react, ajax in jquery, or in javascript XML

How we can send request to the server using js?
By using class XMLHttpRequest
var obj = new XMLHttpRequest();
obj.open() is the method takes 3 arguments
first one is method type, second is url, 3rd arg is synchronous or asynchronous 
By default asynchronous. jut make it as like this..

What is next one? 
obj.send()
Now my request is going with this particular method through this url or not?
But here what is missing?
Data..we have not passed yet.

As part of request only we need to pass the data.
How we can pass data to the send() method ?
through argument only or not?

Now my server side guy is going to process/or fetch the data, connect to db and insert data to db.
And gives the response back to the client.
Based on the response we have to display something on ui. like inserted successfully.. or failure or something.

here in our javascript while the time of sending the data to the server my data is always in the type of normal object only.
But send() method is always expecting string.
So we have to convert it into string before send()

Now what my server side guy has to do?
receive the request.
take data from request,
connect with db,
perform operation one query we have to execute
send response back to client

While sending response back we are always expecting a success or failure also?
failure also.. right
So how much time it is going to take to get the response back..
How we know that?We did not know that..
How we can handle that?
So for that we have a callback method called obj.onload()
And for failure we have another callback called obj.onerror()

fnRegister(){
            debugger;
            let httpObj=new XMLHttpRequest();
            httpObj.open('post','http://localhost:2020/std/std-reg')
            httpObj.setRequestHeader('Content-Type','application/json');
            httpObj.send(JSON.stringify(this.state.data));
            //success callback
            httpObj.onload=function() {
                debugger;
                let res=httpObj.responseText;
                //it is received like a string. string contains the object data. so we have to parse it.
                res=JSON.parse(res);
                if(res.affectedRows > 0){
                      this.setState({
                          'msg':"Inserted Successfully",
                           data:{
                            'uid':'',
                            'pwd':'',
                            'email':'',
                            'add':''
                        }
                      })
                }else{
                    this.setState({
                          'msg':"Not inserted try again"
                      })
                }
            }.bind(this)
            httpObj.onerror=function(){
                this.setState({
                          'msg':"Somethig went wrong"
                      })
            }
        }


//set msg as empty string inside constructor this.state ={}

//We are getting cors error
Access to XMLHttpRequest at "http://localhost:2020/std/std-reg" from origin null has been blocked by cors policy
No Access-Control-Allow-Origin header is present on the requested resources

server is running on localhost:2020, but we are sending request from another origin 
What is my origin?
Its just a simple html file.
I am just running html file from my local path
And There is no http or nothing like that..Then why we are getting this cors error?

So we are getting this above cors error as server is expecting request from same origin means from localhost:2020
So we have to handle this at the server side. 
As server may be a single one but client may be many using the same server. 
Now I am going to hit from apache running on another port,that is running on 8080 to insert the data
Next one is like file protocol i am going to inset the data
From here I am trying to send the data..
Because server side guy always expect request from the same path only
But you are going to send the request from where?
My localhost:8080 or not?
Then at that time my server is by default not accepting this particular one.
If you want make this particular one to access / allow the request from anywhere,
Then at that time we have to change the code right...
But where we are going to change?

Server is the place where we have to make change as it is only blocking all others.
So in nodejs one library is available called "cors" to handle the cors related errors.
How we can install this one?
npm i cors --save

So at app level we have to handle this..
So that we will not get any error for any other end points
It should work for all
Check package.json if its updated or not

So now lets use it in App.js. Require it in app.js
const cors = require("cors");
app.use(cors)

Now refresh all and start running student.html again on browser
Go to network -> xhr -> select the url
Go to Header tab
We have General, Request Headers, Response Headers, Request Payload is nothing but body
Query String Parameters is nothing query params we sent via url

Now we are passing data like string as send() expects string,string contains object but going like string only
SO my server thinks like it is a string only.
So within the string it is not able to recognise the string so giving undefined in the response

So as a client side developer we are sending data like a string i.e.content-type : application/text
But we have to tell the server side guy we are sending like a string , 
that you do not take it like a string take it as json object only
How we can tell that to server?
By using request headers or not..
So we have to add the content type for request object
            obj.setRequestHeader('Content-Type','application/json');

Before sending the request obj.send() we have to set request headers like above. 
And that is after obj.open()
Now save everything and send the request again.

Now what response we get from server is object type.
So we can fetch res.responseText for data..
We will aslo have to check res.affectedRows 
If > 0 it is inserted successfully.

	fnRegister(){
            debugger;
            let httpObj=new XMLHttpRequest();
            httpObj.open('post','http://localhost:2020/std/std-reg')
            httpObj.setRequestHeader('Content-Type','application/json');
            httpObj.send(JSON.stringify(this.state.data));
            httpObj.onload=function() { //success callback
                debugger;
                let res=httpObj.responseText;
                res=JSON.parse(res);
                if(res.affectedRows > 0){
                      this.setState({
                          'msg':"Inserted Successfully",
                          //emptying the fields
                           data:{
                            'uid':'',
                            'pwd':'',
                            'email':'',
                            'add':''
                        }
                      })
                }else{
                    this.setState({ 
                          'msg':"Not inserted try again"
                      })
                }
            }
            httpObj.onerror=function(){ //error callback
                this.setState({
                          'msg':"Somethig went wrong"
                      })
            }
        }



Now whatever msg state variable we set we can display it in ui after the register button
            <h1>{this.state.msg}</h1>

It gives me one error .
Lets go to the console..
** this.setState() is not a function that means this is undefined
var o = {} 
o.f //undefined
o.f() //o.f is not a function

So this.setState({}) inside fnRegister() is actually giving the problem within httpObj.onload
actually my "this" is there
And we are expecting this.setState() to work
If my current object is pointing to my component then only my "this.setState()" will be available.
Other than that if my "this" is pointing to some other object then my "this.setState()" is there or not there?
//not there...
Now lets put a debugger there and check what my "this" is pointing to...
Within onload put a debugger..

Now see my this is there but pointing to something else.
If my "this" is undefined" then what error we should get?
"cannot read property setState() of undefined" 
which means my "this" is undefined
But here which error came?
my setState() is not not defined
My "this" is there or not there?
There but it is pointing to something else.

onload fucntion is not our function.
it is a javascript function.
So "this" within onload pointing to window object.




Now once we get the data or responseText back 
lets update the data in the textfield value field using state.data and individual field
So we have to to this in component render() method
 render(){
            const {uid,pwd,email,add}=this.state.data;
            return <div>
                 <p>uid: <input value={uid} id="uid" onChange={this.fnChange} /></p>
                 <p>password: <input value={pwd} id="pwd" type="password" onChange={this.fnChange} /></p>
                 <p>Email:<input id="email" value={email} onChange={this.fnChange} /></p>
                 <p>Address:<textarea value={add} id='add' onChange={this.fnChange}></textarea></p>
                 <p><input type='button' value="Register" onClick={this.fnRegister.bind(this)} /></p>
                 <h1>{this.state.msg}</h1>
                 ...
                 </div>
        }


We can take onload like a arrow function to get rid of this.
there is another way also..
We already have "this" available inside fnRegister as we already bind this one.
Now we can use that to bind the onload method at the end 
That is -> httpObj.onload = function(){}.bind(this)

  httpObj.onload=function() { //success callback
                debugger;
                let res=httpObj.responseText;
                res=JSON.parse(res);
                if(res.affectedRows > 0){
                      this.setState({
                          'msg':"Inserted Successfully",
                          //emptying the fields
                           data:{
                            'uid':'',
                            'pwd':'',
                            'email':'',
                            'add':''
                        }
                      })
                }else{
                    this.setState({ 
                          'msg':"Not inserted try again"
                      })
                }
            }.bind(this)


And then change in the render method 
All the fields value attribute
 render(){
            const {uid,pwd,email,add}=this.state.data;
            return <div>
                 <p>uid: <input value={uid} id="uid" onChange={this.fnChange} /></p>
                 <p>password: <input value={pwd} id="pwd" type="password" onChange={this.fnChange} /></p>
                 <p>Email:<input id="email" value={email} onChange={this.fnChange} /></p>
                 <p>Address:<textarea value={add} id='add' onChange={this.fnChange}></textarea></p>
                 <p><input type='button' value="Register" onClick={this.fnRegister.bind(this)} /></p>
                 <h1>{this.state.msg}</h1>
                 </div>
                 
        }

*************************************************************************************************
03/02/19
*************************************************************************************************
Lets start where we had stopped last class..
Now we are going to insert data to student table as std-register api is ready 
Also the UI view is ready..
We can insert the data..

But first time if there is no data in table then we need to show "no data found" on ui
So we will need a get request or not
Already we created a file student.js server side for insert..
Lets add another end point for get request now.
How we caan write?
Using router object or not?
router.get()
It takes how many arguments?//2 - url and callback function
callback function takes how many arguments?//3  - request,response,next
Anybody who is hitting this url /get-std, this callback method will be executed by passing 3 objects
Can you tell me this request contains what? //data or not?
data that is coming from client or not?
Ok can you tell me how many ways we can send the data in request object?
one is request body using json object , so we can use req.body.key
another is queryparam ,then we can use  at server side like req.body.queryparamkey
next is params also we can pass it, authparams

student.js
===========
router.get('/get-std',function(req,res,next){
         shared.fnGetMysqlCon(res,function(con){
            var q="SELECT * FROM `student`";
            con.query(q,function(e,r){
                if(e){
                    res.send(e);
                }else{
                    res.send(r);
                }
            })
         })     
})


As a server side developer what this guy has to do first?
He has to take the data from request object from req.params if any or not..
But in this is the server side guy expecting any data?
No right..
because I am going to load all the records or not?
We are not going to set any condition for fetch request so there is no query param passed to request object

Now for the get request also we need to create the connection or not?
Already we have one library available for that known as mysql
So in mysql there is a method available called createConnection()
which takes how many arguments?
takes one object as an argument which has few properties set..
	like where my database is running, database name, userid and password
	
Now this createConnection() returns me what?
it returns one connection object.
Now we provided some data. 
We need to check if these informations are correct or not
With this data can we connect to the database?
If it is connected properly no problem.
If it is not connected properly then we have to give one message ...db connection error or not

Now lets check this by con.connect() method
Now while connecting how much time it will take we dont know that one
It is true or false i dont know that one.
Then at that time they are going to call one method one callback method after trying...

var shared={};
var mysql=require('mysql');
shared.baseUrl="";
shared.fnGetMysqlCon=function(res,cb){
    var con=  mysql.createConnection({
        host:'localhost',
        database:'reactschool0120',
        user:'root',
        password:''
    });
    con.connect(function(err){
        if(err){
            res.send('db con error');
        }
        cb(con);
    })
}
shared.fnGetMongoCon=function(){}
module.exports=shared;

Now this callback function gives me how many arguments?
One is error, another is success
If it is a success,leave it i dont want..
But if error is there we need to tell to end user.
How we can tell ? using response object or not?

router.get('/get-std',function(req,res,next){
         shared.fnGetMysqlCon(res,function(con){
            var q="SELECT * FROM `student`";
            con.query(q,function(e,r){
                if(e){
                    res.send(e);
                }else{
                    res.send(r);
                }
            })
         })     
})

Now we can use con.query() execute the query.
So it is expecting 2 arguments
One is query 
second is callback function with 2 argument error or success
if query is failed we can send error back to client
If query is success we can send result back to the client

Now coming back to the client we can define a method within Student file to get the records..
Lets use jquery for the API call..
Import below jquery library
<script src="jquery-3.4.1.min.js"></script>

Lets write the ajax call for get request..
Now we need to show data or records we receive in a table
But first tell me where we are going to make call now?
We have created a method fnGetStudents() it should return all students.
But where we will call this?
On initial load only we want to show right?
Can we make a call to this method within constructor?


constructor(){
	...
	this.state={
                students:[]
            }
	this.fnGetStudents();
}
fnGetStudents(){
           $.get('http://localhost:2020/std/get-std')
           .then((res)=>{
                this.setState({
                    students:res
                })
           })
           .catch((res)=>{
            this.setState({
                    students:[]
                })
           })
        }


Now as we know this these students data is going to change because we have delete, insert and update operation
So how we can store this?
state or not?
lets use state 
Lets store an empty array and then make a request to db to change its value.

Now once we have the data available in state variable after get request is success
We have to use that student records to prepare a table...

render(){
	return <div>
		........
		........
 		<p>
            <table border="2px">
                <tr>
                	<th>ID</th>
                    <th>Uid</th>
                    <th>Password</th>
                    <th>Email</th>
                    <th>Address</th>
                    <th>Edit</th>
                    <th>Delete</th>
                </tr>
                {
                    this.state.students.map((o,i)=>{
                        return <tr key={"tr" + i}>
                            	<td>{o.id}</td>
                                <td>{o.uid}</td>
                                <td>{o.pwd}</td>
                                <td>{o.email}</td>
                                <td>{o.address}</td>
                                <td><input type='button' value="edit" /></td>
                                <td><input type='button' value="delete" /></td>
							</tr>
                        })
                    }
            </table>
        </p>		
	</div>
}


Now instead of writing table in the same file we have to make it generic 
As we may use table in multiple components within our application.
For now we just have a single file so skip it

In the next class we are going to cover edit and delete functionality

*************************************************************************************************
04/02/19
*************************************************************************************************
We added the edit and delete button
This is our view right..
userid,password,email, and address
Your register button is there..
Now suppose we entered userid u1, password p1, email e1, and address a1 and click on register button..
Now it got stored in db using insert api.
Next suppose we refreshed page and we have the record available within table.
Now suppose i clicked on the table
My register button should be disabled and my update button should be enabled..
And the row where we clicked on EDIT button that row data should be pre-populated within the student form.
That means userid textfield will have u1, password will have p1, email will have e1 and add will have a1...

As at the time of loading the student.html file what we did?
We are calling get-std api to load all student records from database from student table. 
And we called from within the constructor

At first time load if we want to load some data, how we can do?? 
So we called fnGetStudents() inside constructor 
As it's a class component when we instantiate constructor will be always called on initial load. 

We also know if we want to fetch data from client we can't do that directly from front end. 
So we need to take the help of a server
Within the server side what we did? 
We wrote one end point to get the data from database

That end point url is what❓
/get-std 

These details we have to share with whom? 
Our clients or not?? 
Now at client side we have url, we have method type. 
We make call to the end point to get the data or not?? 
Niw for the get request we are going to use jquery ajax call.. 
We will provide the url, method etc provided by server side people... 
Now once my request is done it will either return success or failure. 
How we can handle that one?? 
My get() method returns me what? A promise or not? 
Any method returns a promise how we can handle that one? 
Using then() method or not?? 
then() first callback is a success method
then() second callback is a error method

Now we have the response available within the success callback. 
We have to show within the tabular format or not?? 
Now where we are going to show?? 
Within the render we are having the content or view. 
There only we are going to show or not? 
So our data is available within the constructor and we want the same data in render method. 

How many ways we can share the data within the components? 
There are three ways are there. 
If my data is available within the current object that is available through out the component. 
By using this.state also data us available through out the component. 
By using this.props also data is available through out the component. 
Based on your requirement you can share the data using one of these. 
Which one is recommend? 
this.state
Why not this? 
Why not this.props? 

My this.props always coming from outside. 
If it is coming from outside I can use but i can not change it. 
Why? 
My this.props is an object it is a freezed object
Freezed object means we can retrieve the data, but we can not make insert  update, delete operation we can't perform. 
That's why this.props is not recommended

But why not this?? 
At first time load my this is going to trigger. 
My constructor is going to call this method that is ok. 
How much it will take to get the response I don't know that.
As it is an ajax call it is asynchronous in nature. 
Immediately my render method is going to trigger or not. 
At that point of time my data is not available. 
After sometimes it is available. 
Let's see the flow.. 
If I put the data in the current object then by default this.data holds nothing. 
Immediately the control goes to render method. 
After sometime we are getting the data within constructor where we are making ajax call success call back. 
Now within the success method if we do this.data = response then what happen?? 
My render method is not triggered again. 
So this is the problem with this.data.
So this.data is not recommended as well. 

So I have one option left that is this.state
Now how we can use this.state?? 
First time my data is empty
Can we create an empty variable or empty array?? 
Can we write like 
this.state = {
       myData : [ ]
}
And then after some time we are getting this data.. 
So inside ajax success call back within constructor what we have to do?? 
this.setState({myData : response }) 
Now this is updated. 
Now we have already written some code to update the data in the table.. 
Now setState() is going to call the render method again. 
Now how we can use this data within render method? 
Using this.state.myData or not 
Now this.state.myData is an array of objects. 
Each and every object is representing one row or not?? 
In the array there are so many elements are there.. 
For each and every elements we are performing same operation to prepare the row or not? 
Then which one is recommended?? 
map() method or not?? 
map()  always returns an array of what we are going to show in that particular div or not.. 
So what we have to write within the render method tell me.. 




Now how you know that how many headers are there as a client side developer?? 
We can hit that request in postman or some rest client and we can check right.. 
So we know what input we have to pass what output is coming.. 
Based on that we can use the response object.. 
Once you get the response how many fields ate there? 
You know these fields or not? 
Based on that only we have to prepare the table or not?? 
So we see 5 fields.. 
We are going to create five headers. 
Now we are going hardcore this one. 
Now first row is completed.. 
Second row onwards it is depending upon ur data or not?? 
Within the data how many elements are there that many elements you have to prepare or not.. As data is this.state.myData holding array of objects. 
So now we are going to use map() 
Let's use that now.. 
{
    this.state.myData.map((v,i) =>{
         // here prepare the tr and tds... 
        // to build tds use Object.keys(v).map() 
        // last two columns we can add on each tr loop
     }) 
}

But in every row my last two columns are holding edit and delete button
Save every thing now....... 


Come to server side student.js file. 
Write an endpoint for getStudents
//code...

Now suppose I will click on delete button 
But how I ll know that which row is clicked?? 
Each and every row has some unique identity. 
So this delete function is expecting one id
Now on button onclick this method will be triggered and it is expecting one id
How it will receive?? As argument or not.. 

But now tell me on button click how we are going to pass the id? Because in react we never call it in expression. Function reference only I give usually.. 
<button onClick = { this.fnDelete } />

We can do as below. As bbind() method lso returns a function reference
In bind() method first argument is object, second argument onwards we can pass the actual parameters to the function. 

<button onClick = { this.fnDelete.bind(this,id) } />

Now come to edit functionality... 
When we click on edit button we give fnEdit function reference. 
<button onClick = { this.fnEdit.bind(this,id) } />

When we click on the edit button based on the id we need to search or find the exact record that matches with the id or not.. 
Fir that we will use find() method.. 
That is this.state.data.bind() is the method
fnEdit() is not to call api it is used to load the selected record we chose for edit to be prepolulated in the register form.. 
When we clicked on edit button that record or row id is passed to find() method. It searched within whole data set. And matches the selected row data in form of object... As it is searched from array of objects..By using this.props also data is available through out the component. 
Based on your requirement you can share the data using one of these. 
Which one is recommend? 
this.state
Why not this? 
Why not this.props? 

My this.props always coming from outside. 
If it is coming from outside I can use but i can not change it. 
Why? 
My this.props is an object it is a freezed object
Freezed object means we can retrieve the data, but we can not make insert  update, delete operation we can't perform. 
That's why this.props is not recommended

But why not this?? 
At first time load my this is going to trigger. 
My constructor is going to call this method that is ok. 
How much it will take to get the response I don't know that.
As it is an ajax call it is asynchronous in nature. 
Immediately my render method is going to trigger or not. 
At that point of time my data is not available. 
After sometimes it is available. 
Let's see the flow.. 
If I put the data in the current object then by default this.data holds nothing. 
Immediately the control goes to render method. 
After sometime we are getting the data within constructor where we are making ajax call success call back. 
Now within the success method if we do this.data = response then what happen?? 
My render method is not triggered again. 
So this is the problem with this.data.
So this.data is not recommended as well. 

So I have one option left that is this.state
Now how we can use this.state?? 
First time my data is empty
Can we create an empty variable or empty array?? 
Can we write like 
this.state = {
       myData : [ ]
}
And then after some time we are getting this data.. 
So inside ajax success call back within constructor what we have to do?? 
this.setState({myData : response }) 
Now this is updated. 
Now we have already written some code to update the data in the table.. 
Now setState() is going to call the render method again. 
Now how we can use this data within render method? 
Using this.state.myData or not 
Now this.state.myData is an array of objects. 
Each and every object is representing one row or not?? 
In the array there are so many elements are there.. 
For each and every elements we are performing same operation to prepare the row or not? 
Then which one is recommended?? 
map() method or not?? 
map()  always returns an array of what we are going to show in that particular div or not.. 
So what we have to write within the render method tell me.. 




Now how you know that how many headers are there as a client side developer?? 
We can hit that request in postman or some rest client and we can check right.. 
So we know what input we have to pass what output is coming.. 
Based on that we can use the response object.. 
Once you get the response how many fields ate there? 
You know these fields or not? 
Based on that only we have to prepare the table or not?? 
So we see 5 fields.. 
We are going to create five headers. 
Now we are going hardcore this one. 
Now first row is completed.. 
Second row onwards it is depending upon ur data or not?? 
Within the data how many elements are there that many elements you have to prepare or not.. As data is this.state.myData holding array of objects. 
So now we are going to use map() 
Let's use that now.. 
{
    this.state.myData.map((v,i) =>{
         // here prepare the tr and tds... 
        // to build tds use Object.keys(v).map() 
        // last two columns we can add on each tr loop
     }) 
}

But in every row my last two columns are holding edit and delete button
Save every thing now....... 


Come to server side student.js file. 
Write an endpoint for getStudents
//code...

Now suppose I will click on delete button 
But how I ll know that which row is clicked?? 
Each and every row has some unique identity. 
So this delete function is expecting one id
Now on button onclick this method will be triggered and it is expecting one id
How it will receive?? As argument or not.. 

But now tell me on button click how we are going to pass the id? Because in react we never call it in expression. Function reference only I give usually.. 
<button onClick = { this.fnDelete } />

We can do as below. As bbind() method lso returns a function reference
In bind() method first argument is object, second argument onwards we can pass the actual parameters to the function. 

<button onClick = { this.fnDelete.bind(this,id) } />

Lets use fetch api for delete operation end api call..

fnDelete(id){
            let isOk=confirm('r u sure');
            if(isOk){
                fetch('http://localhost:2020/std/delete-std?id='+id)
                .then((res)=>{
                    return res.json();
                })
                .then((res)=>{
                    if(res.affectedRows > 0){
                        this.fnGetStudents();
                        this.setState({
                            'msg':'Deleted successfully'
                        })
                        setTimeout(() => {
                            this.setState({
                                'msg':''
                            })
                        }, 3000);
                    }else{
                        this.setState({
                            'msg':'not deleted try again'
                        })
                    }
                })
                .catch((res)=>{
                    this.setState({
                        'msg':'something went wrong'
                    })
                })
            }
        }



*************************************************************************************************
05/02/19
*************************************************************************************************

Now come to edit functionality... 
When we click on edit button we give fnEdit function reference. 
<button onClick = { this.fnEdit.bind(this,o) } />

Whenever we select a row for EDIT, the row object we can pass to fnEdit()
So as it is an argument we can call like the fnDelete() by using bind() method we can pass argument.
Now within fnEdit() what we will do is we will set the myData the state variable with the object/row data we have passed
As we are using setState() to update myData it is going to call render() method again
As a result view will be refreshed again
And we can see the register form with the specific row data..

fnEdit() is not to call api it is used to load the selected record we chose for edit to be prepolulated in the register form.. 
	fnEdit(stdObj,eve){
           this.setState({
               data:stdObj,
               isEdit:true
           })
    }

Now if we refresh the page and if we click on edit it is now populating data on register form...

Now one flag is also set isEdit true.. 
so that based on isEdit the update button will be enabled and register button will be disabled
So ae using conditional rendering here...

 {!this.state.isEdit && <input type='button' value="Register" onClick={this.fnRegister.bind(this)} />}
 {this.state.isEdit &&<input type='button' value="Update" onClick={this.fnUpdate.bind(this)} />}


Now we can change the fields and we can write an end point in fnUpdate to update the value..
Before developing ui side code lets develop endpoint server side..

lets go to server side folder
routers/student.js
====================
/update-std

We are sending 5 details..

router.post('/update-std',function(req,res,next){
    var id=req.body.id;
    var uid=req.body.uid;
    var pwd=req.body.pwd;
    var email=req.body.email;
    var add=req.body.address;

    shared.fnGetMysqlCon(res,function(con){
        var q="UPDATE `student` SET `uid`='"+uid+"',`pwd`='"+pwd+"',`email`='"+email+"',`address`='"+add+"' WHERE id="+id;
        con.query(q,function(e,r){
            if(e){
                res.send(e);
            }else{
                res.send(r);
            }
        })
    })

})

Now here we are establishing connection with mysql..
we are preparing the update query using the data we have received.
Now update everything based on id value.
Now after executing con.query() we have success and failure callbacks
in success callback we are sending response back to client..


Now lets go to client as end point is ready.
lets use axios to update .
<script src="axios.min.js"></script>

 fnUpdate(){
            debugger;
           axios.post('http://localhost:2020/std/update-std',this.state.data)
           .then((res)=>{
                debugger;
                if(res.data.affectedRows > 0){
                        this.fnGetStudents();
                        this.setState({
                            'msg':'Updated Successfully',
                            'isEdit':false,
                            'data':{
                            'id':'',
                            'uid':'',
                            'pwd':'',
                            'email':'',
                            'q':''
                        }

                        })
                        setTimeout(() => {
                            this.setState({
                                'msg':''
                            })
                        }, 3000);
                }else{
                    this.setState({
                            'msg':'not udpated...please try again'
                        })
                }
           }) 
           .catch((res)=>{
                      this.setState({
                            'msg':'Something wentwrong'
                        })
           })
        }


Lets write the delete end point as well we already discussed.
We are sending id as a query param...
//**this will go in url.. just to demonstrate use of req param server side...

This also has a success and error callback..
in success callback we are sending response back to client..

router.get('/delete-std',function(req,res,next){
     var id=req.query.id;
     shared.fnGetMysqlCon(res,function(con){
        var q="delete from student where id="+id;
        con.query(q,function(e,r){
            if(e){
                res.send(e);
            }else{
                res.send(r);
            }
        })
     })

})


Now come to client side code...
 <td><input type='button' value="delete" onClick={this.fnDelete.bind(this,o.id)} /></td>
 
Add a confirm message
If pressed yes then only it will start executing the api
Otherwise nothing will happen

Lets use the javascript fetch() method to make end api call..
If we did not mention any second argument to fetch() is treated as get request
For post method - fetch(url,obj)
 
   fnDelete(id){
            let isOk=confirm('r u sure');
            if(isOk){
                fetch('http://localhost:2020/std/delete-std?id='+id)
                .then((res)=>{
                    return res.json();
                })
                .then((res)=>{
                    if(res.affectedRows > 0){
                        this.fnGetStudents();
                        this.setState({
                            'msg':'Deleted successfully'
                        })
                        setTimeout(() => {
                            this.setState({
                                'msg':''
                            })
                        }, 3000);
                    }else{
                        this.setState({
                            'msg':'not deleted try again'
                        })
                    }
                })
                .catch((res)=>{
                    this.setState({
                        'msg':'something went wrong'
                    })
                })
            }
        }

*************************************************************************************************
06/02/19
*************************************************************************************************
Now we are done with the development..
How can we run the application?
Go to server folder..
DO npm install..
Now we have to run the application..
Run - node app

Now come to client folder..
Open the student.html file in browser..




















































@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
So far if you want to communicate with 3 components..
Suppose i have A component is there..
Within this I have B component is there..and also C component is there...
If i have to pass data B to C how we can pass??
We are passing data to B to A and then A to C..
Like this we pass or not..


Next my A contain B, B contains D, D contains E, E contains F.
Now my requirement is I have some data within this particular component A
I want to print the data within the component G.
A -> ((B -> D -> E -> F -> G) , (C))
That means A is parent root component
A has 2 child B and C
B has one child D and C has none.
D has one child E
E has one child F
F has one child G.

So far what you know? By using that one can you print the data?
Ok how we can?
Ok I have class component A..it contains some data..using one state variable lets maintain it

My data is available in A component.
I want to print within G component.
Now start..What we have to do?
Within my A component what it contains?
My A component contains my B component and my C component or not?
How we can write it?
Within my render() method I will put like B component and my C component.
I have to pass data to B.
B has to pass data to D.
So this.state.name is my data within A. I have to pass it to B.
How we can do?
By using attribute or not?
As we discussed my value is this.state.name
My key is what?key can be anything...
lets keep it as "n"..


class A extends React.Component{
	constructor(){
		this.state = {
			name : "sachin"
		}
	}
	render(){
		return <div> <B n={this.state.name} /> <C /></div>
	}
}

Now tell me my B contains what?
D component or not..
Now we can get the data in B that is coming from A?
Anything that is coming from outside can be received using props or not..
So we will receive like {this.props.n}
Now we can pass to D from B? using again attributes or not?
We did that in A..

class B extends React.Component{
	render(){
		return <div> <D n={this.props.n}/></div>
	}
}

Similarly we can pass this one level down to E component from D.
Similarly we can pass this one level down to F component from E.
Similarly we can pass this one level down to G component from F.

class D extends React.Component{
	render(){
		return <div> <E n={this.props.n}/></div>
	}
}
class E extends React.Component{
	render(){
		return <div> <F n={this.props.n}/></div>
	}
}
class F extends React.Component{
	render(){
		return <div> <G n={this.props.n}/></div>
	}
}

class G extends React.Component{
	render(){
		return <div> {this.props.n} </div>
	}
}


Ok Within this hierarchy anywhere it is going to break my data is going to stop here or not..
It doe not go anywhere or not...This is problematic or not

Now my requirement is like i dont want to write like this..
I have 100 of elements are there. 100 of children are there..
How I can pass the data from parent root to the innermost children?
It is problematic or not?

Now my requirement is like I have component A is there. My component A contain some data.
I want to share the data all my children at a time.
Which children want the data just go and take the data..which is having within my A component
Ok generally we are going to pass the data from my parent to child is nothing but 
	whatever data is by default available in my parent is going to be available in child as this.props
So again the same props is passed next level down to another children..
So again the same props is passed next level down to another children..
So again the same props is passed next level down to another children..
..
Anywhere my this.props is going to miss then at that time my data flow is going to miss or not..

So that if you wat to make some data available within the parent , that data is going to be available all your children..
Then at that time we have one more concept is there within the react called "context"

Ok now who has the data? A component  or not?
Now this person keeps the data in some place.. known as context..
Now remaining all components are there right..B C D all ..What is the relationship of these components with A?
All are children or grand children..or any lower down but all are children only.
All children have the capability to get the data from this particular context
Now within this which one needs data? G wants right..
Only G wants.. So that only my G only go and bring the data.

So that in this particular example if D only wants , then D only go and bring the data
That is possible only my parent to children.
All my children should be children of this particular parent who is going to give the data to all..
For that purpose my context concept is there..

Here in A we have the data.
So what we have to create?
We have to create the context object or not?
You have to create one context object..
who has to provide the data to the context and who has to consume the data from context?
A has to provide data to context
My remaining all components has to consume the data from context

Lets recap our scenario
A -> ((B -> D -> E -> F -> G) , (C))
That means A is parent root component
A has 2 child B and C
B has one child D and C has none.
D has one child E
E has one child F
F has one child G.

So three things are tere
1. We have to create the context..
2. My A component has to provide the data to the context
3. All my remaining children components should have to consume the data from the context..

So my context is only possible when we want to share data from parent to any level down to the children
children to parent it is not possible.

So here if i have data in C it is not available to A,B,D,E,F,G
because all these D,E,F,G are not C's children
B is sibling of C so context is not possible 
A is parent of B so context is not possible..

So for siblings also it is not possible..

Lets create 4 components
A,B,C,D
A contains B
B contains C
C contains D

Lets write the code for same...the skeletal structure of it..



class A extends React.Component{
        render(){
            return <div> <B /></div>
        }
    }

class B extends React.Component{
        render(){
            return <h1><C /></h1>
        }
    }


class C extends React.Component{
        render(){
            return <h1><D /></h1>
        }
    }


class D extends React.Component{
        render(){
            return <div> Am D Component </div>
        }
    }

ReactDOM.render(<A />,document.getElementById('root'));




Now tell me what we have to do?
WHo has the data?
A component
So that can we maintain the data within A?
How we can maintain the data?
Can we use a state variable name to store some name..
lets use constructor to create a state variable..
Or we can also take this.name if it is not going to be modified within the class..
We have takes this.name

class A extends React.Component{
        constructor(){
            super();
            this.name="Sachin";
        }
        render(){
            return <div>
                <B />
            </div>
        }
    }


Now this data you have to give to whom?
TO all your children or not? through context
So first of all what is required? context or not?
SO that can we create our context?
One method is there called React.createContext()
In the browser console we can check this..where our app is running..
	React.createContext()
	{$$typeof: Symbol(react.context), _calculateChangedBits: null, _currentValue: undefined, _currentValue2: undefined, _threadCount: 0, …}

Gives a context object to maintain your data.
Now lets create that..we are just creating a variable to hold this.
We could have stored using this.ctx = React.createContext();
Because when we create like above context is set local to A component
It wont be available for all others for B,C,D
as we are using A class scope..that's "this" from A class it is only available within A

SO if we create a context using "this" , then ctx is not available to the children.
We can pass data to ctx in A component as ctx available here.
But how we are going to receive the data? it is not available to remaining components


But my requirement is like every component should be able to access context object..
so that one component can share and rest all can receive..
So it is always advisable to create context at some global level. 
Lets create context object outside of all components
So that it will be available to A component to send data and remaining as well to receive the data.

So lets use const.
const ctx=React.createContext();

Now my ctx object is available.
My A component now has to give data to this context object ctx.
So how we are going to provide data from A component to ctx?
Within the page how many context are there?taht does not matter

within the ctx object we have the component called as Provider.
Provider to provide the data to ctx.
Consumer is also there to consume the data from ctx..

lets use these...using ctx.Provider and ctx.Consumer
Next how we can provide the data?
Using attribute or not?
To which component we are going to provide the data? TO all my children or not..

So which means if there is a requirement in this flow like I wanto send data from C to D using context, 
then we have to use ctx.Provider in component C and also we have to use ctx.Consumer in component D.

In our requirement D needs to consume.
So lets go to D.
We have to consume
So for that already we ctx.Consumer
This is like component only
Now this is going to consume which data?
The data which is provided within the ctx that data only available here or not?
On this data what we have to do?
We have to perform some operation or not?
So that these react people gives like a callback method with that particular stored data as an argument.
Now we are passing like a string data from A 
If it is string type we ca use simple expression to print it..

Here is the full code...



const ctx=React.createContext();
class A extends React.Component{
        constructor(){
            super();
            this.name="Sachin";
        }
        render(){
            return <div>
             <ctx.Provider value={this.name}>
                <B />
             </ctx.Provider>
            </div>
        }
    }

class B extends React.Component{
        render(){
            return <h1><C /></h1>
        }
    }

class C extends React.Component{
        render(){
            return <h1><D /></h1>
        }
    }

class D extends React.Component{
        render(){
            return <div>Am D Component
                <ctx.Consumer>
                   {
                       (data)=>{
                            return <div>{data}</div>
                       }
                   }
                </ctx.Consumer>
            </div>
        }
    }




Now my data is available from A to D using context
While consuming ctx.Consumer is the component
It provides a callback method
That method is going to be called with that provided data..
Using the data what you have to do?
If you want to show the data then use it..


If through out the application i want to put this context
Which component wants to put the data put it
And Which component wants to get the data get it
then at that time we are using state management with redux...

Here C and B is there.
What is the relation?
Siblings...
Here also x,y,z children on G
G contains x
x contains y 
y contains z

Then from A data is available to all components..
But how I can give data from B to C?
They are siblings right
Or from C to Z?
Z is not children of C..
For that we have one more concept is there.
That is called as state management tool

How it going to call means very simple thing..
Who wants to put the data? Who has the data? Z
Can we ask the guy to store the data here..
Now who wants the data? C
Can we ask this guy to get the data from here?
That means what? 
For the total application you are maintaining the data in one place..
The person who want to send set the data.
the person who want to receive get the data..
So this is state management that is possible through redux.
By using hooks also we can maintain ctx . We will see these later..


@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
Life cycle Methods
===================
 
Lifecycle methods are only for the class components.
These are not for the functional components
Why because these are the methods are coming from where?
These are already written by some other people just we are going to import those methods..

If it is a class component can you tell me the flow?
If it is a class component what happens?
If it is a functional component what happens?

If it is a class component then simply it is going to be called..It is going to return some content and display it..
But if it is a functional component simply it is going to create one object or not?

When we are creating one object means what? One method is going to be triggered..constructor is going to be triggered or not?
Once my object is created , with this object or instance  what we are going to do?
We will call the render() method or not?
Yes or no?

So far we know this render() flow and construtor() flow only..
Within the render() method what we did?
Some content is there..We are going to put the content within the browser or not?

Now in your react set the data within the browser is nothing but putting the data within the browser is mounting..
Removing the data from he browser is unmounting..
Lets take one example
I have one website is tere.
here header and footer is there
Then in the middle body part home,about, contact and service is there.
If I click on home what happens?
My home data is going to be visible on the browser or not?
SO home is mounted or ot?
If i click on the about then ?
My home is about to unmount and about is going to be mounted or not?
Mounting is nothing but putting the data in the browser and unmounting is like removing the data from the browser or not?
We are going to tell like this..

Now this is the constructor
This is the render method ok..
First time load my render() method is mounting some data or not?
Where? In the browser or not?
Now my requirement is before mounting the data within the browser I want to perform some operation
Where we can write that one?
Within the constructor or not?
But instead of writing it inside constructor we have another life cycle method is there called componentWillMount()
This life cycle method is going to be triggered before mounting your data ok..within the render() method ok.. after constructor() execution.
That means what in between we have another method is there or not?
In the past we learnt constructor() and then render() method was executed.
In between there has one more life cycle method is there.
If we wrote the method that is going to be called when? After the constructor.
But this is a deprecated method..Still it is going to work.
Before rendering the data within the browser at first time load , if you want to perform some operation which one is the recommended one?
My componentWillMount() is the better option or not?
Dont write the logic and all within the constructor.
**we can use get request here to get the data..


les write a class App
Add a state variable name as Sachin..
This value is going to change later.

Now see first time my App is going to load.
my constructor is going to be triggered.
next my render() method is going to be triggered.
In between if you want to perform some operation , That means what?
Before rendering and after constructor execution if you want to perform some operation 
We have another lifecycle method is there for this. 
That is know as componentWillMount()
So that can we override that one?
Can we put a console message?
            console.log('will mount')

Now lets save the file and run this one
Now open developer window in browser.
Open the console tab..



lets write the code..
  class App extends React.Component{
   		constructor(){
   			super();
            console.log('con');
         }
 		render(){
            console.log('render')
   	    	return <div><Child n={this.state.name}/></div>
   	    }
   	    componentWillMount(){
            console.log('will mount')
        }
   }


We will see logs like below order..
con
will mount
render


So my constructor() is executed.
Then componentWillMount() is triggered.
And then my render() method is triggered.

Now see after rendering if we want to perform some operation then we have another lifecycle method is there
It is called componentDidMount()

Lets add this as well to our previous code.
 componentDidMount(){
          console.log('did mount')
          }


Now save the file and rerun the file again in browser.
In the console we can see the order of logs..
con
will mount
render
did mount


So these 4 methods are going to be triggered on first time load only..
That means what at the time of instantiation is happened then at that time it is going to call all these at first time..
If the method is written it will be called. but not mandatory.
But my render() method is what?
We must override this method..

Ok now what is my value?
first time my value is like Sachin
That is hardcoded data..
Now i want to make it like a state value.
this.state.name = "Sachin"

Now after 3 seconds i want to change it to Dhoni
Now after 3 seconds i want to change it to Kohli
This is my requirement.
This is the state variable which means its keep on changing
		constructor(){
   			super();
            console.log('con');
            this.state={
            	'name':'sachin'
         	}
         }

Now after 3 seconds we want to change it to Dhoni
What we can do?
We have to use setTimeout() or not?We will mention 3000 here
Then within this what we need to do?
We need to change name.. that is we have to use this.setState({name : "Dhoni"}) or not..
We want to perform a change to state variable after 3 seconds
We we are using setTimeout() with 3 seconds and within its callback we wrote setState()


		constructor(){
   			super();
            console.log('con');
            this.state={
            	'name':'sachin'
         	}

          	setTimeout(function(){
              this.setState({
              	'name':'dhoni'
           	  })
            }.bind(this),3000);
       	}


Again after 3 seconds we need to change to Kohli.
So total time is 6 seconds or not?
If we are changing the state by using setState() what react is going to do?
It will call the render() method or not?
Ok again after 3 seconds again another change...
It will call the render() method again or not?

Now on initial load these are triggered..
con
will mount
render
did mount

Now 2 times render() method will be triggered.
So when dhoni is going to be visible to end user?
After render() method is executed 2nd time after setState() triggered.
That means what? this render() is going to update our view state or not...Sachin to Dhoni.
My requirement is before updating my new state value within the browser 
	if we want to perform some operation there is one more life cycle method is there know as componentWillUpdate() is the life cycle method..
I have sachin is the value, I have second value dhoni. Before putting dhoni within the browser and removing sachin do you want to do anything?
Then we have a method called componentWillUpdate()..we can perform that operation here..

Now my sachin is changed to dhoni.
After updating the data if you want to perform any operation then we have again another life cycle method called componentDidUpdate()

So can you tell me these 3 life cycle methods (componentWillUpdate(),render(),componentDidUpdate()) when it is going to be triggered?
On each and every state change or not?
First time my value is what?Sachin
Next time my value is what?Dhoni
Before put the Dhoni within the browser if you want to do anything componentWillUpdate()
And then render() method and then componentDidUpdate()
Lets add these lifecycle methods to the code now..

  		componentDidUpdate(){
          console.log('did update')
        }

        componentWillUpdate(){
           console.log('will update');
        }


So the order of execution on a state variable change will be following

will update
render
did update


Save the file and run the page in browser.
Check the logs in browser console..

Now suppose my requirement like I want my state variable to be updated or changed internally.
I dont want to update the data within the browser.
My sachin is changed to dhoni..dhoni is changed to Kohli.
My state is updated. 
But i want to stop the update on browser..
So which method execution we have to stop?
render() method or not..
So with render() these are included.
SO if you want to stop the execution of these 3 methods or not?


by default Sachin is updated to Dhoni
All the above 3 methods are triggered.
But my requirement is to stop execution of these 3
For that purpose one more life cycle method is there called as shouldComponentUpdate()
This method is going to trigger when you know?
Once my state is updated this method is going to be triggered first..
It is going to ask like do you want to update the new data?
By default whats the value it returns? it is true.
But we want to update or dont want to update on browser?
We dont want right..
So can we make it to false?

So can you tell me what is the default value for my shouldComponentUpdate()?//true
because of that reason these methods are triggered by default on state change.
Now i make it as false..
So once setState() is called, shouldComponentUpdate() is called returning false.
Hence these methods are not triggered..

So now my data is updated as kohli but that is not rendered within the browser
   			shouldComponentUpdate(){
               console.log('should update');
               //return true; -> by default
               return false
          }

save everything refresh page and check what is the output..



*************************************************************************************************
07/02/19
*************************************************************************************************

Last class we discussed shouldComponentUpdate(), we can return false if we dont want to call render method or other 2 life cycle methods.
That is componentWillUpdate and componentDidUpdate.

Ok Now my requirement is, ok tell me within the state which value is there?
Kohli or not?
We are updating but that value is not updated where?
On browser or not?
Still my value is what? this.state.value is kohli
But it is not updated within the browser because of the below line..
		shouldComponentUpdate(){
               return false
          }

Ok now my requirement is this shouldComponentUpdate() should return false only
But after some time I want to display Dhoni
What happened here?
Already we make like return false or not?
I dont want to change this one..
understand my requirement.
first Sachin to Dhoni, then Dhoni to Kohli
Then at that time i dont to update the changes on browser.
So i put like what?Sachin..
After 10 second, after 20 seconds ,after 1 minute then what we need?
my state value should display..
I want to show Kohli..

Now what we have to do?
We have to render forcefully or not?
React.forceUpdate() is the method within React library.
If you put like React.forceUpdate() then at that time what happen?
Then at that time this shouldComponentUpdate() is not considerable
Directly it is going to call componentWillUpdate(), render() and componentDidUpdate()
When we want to do this?

Sachin->Dhoni->Kohli these changes done in 6 seconds
After 1 minute if we want to render on ui we have to do then ?
We have to use React.forceUpdate() after 1 minute
So this React.forceUpdate() is not a life cycle method.
it is a normal method available in react...

So far good?ok...

Now I have a parent component is there
I have a child component is there..
I have a state variable name as Sachin in Parent
And I am passing that to my Child component as n as the key attribute and value is {this.state.name}
So Child will receive the values sent from Parent as props or not?


   class Parent extends React.Component{
   		constructor(){
   			super();
            this.state={
            'name':'sachin'
         	}
        }
	    render(){
            console.log('render')
   	    	return <div><Child n={this.state.name}/></div>
   	    }
   }


 class Child extends React.Component{
         componentWillReceiveProps(){
               console.log('will receive props')
         }
         render(){
               console.log('child render');
               return <div>{this.props.n}</div>
         }
   }



Most of the times my Children only get the props or not?
Somebody is going to give it..
As a child I want to know any new props comes to me or not?
How many props came?
2 props came
At that time i want to know that one.. which props came
For that we have one lifecycle method is there
That is lifecycle method is going to be triggered who receive the props
That is always within the child who is going to receive props..
The ife cycle method name is componentWillReceiveProps()
First time Sachin No problem at all
Second time Dhoni after 3 seconds my Dhoni comes here in Child
Before render() method my componentWillReceiveProps() will be triggered
That means we get the new props or not?
after 3 seconds once again my Kohli came, that time once again componentWillReceiveProps() will be triggered or not
This is the componentWillReceiveProps() method

then the next one..

I have an website
I have header and footer
Within the website in body I want to put like Home, About, Contact and Service
Can you tell me how many components are required in this particular case?

Header,
Footer,
Home,
About,
Contact,
Service,
Menu

Can you tell me at the time of clicking on Header what happens?
My Home component is mounted or not?
So that how my component is looks like?

class Home extends React.Component{
	render(){
		return <div>....</div>
	}
}


So whatever we put within the render() method that is going to be printed here or not?
Now if i click on the about one then at that time what happens?
My Home is going to unmounted and my about will be mounted or not?
Now my requirement is..my home is going to be unmounted right at the time of clicking on about..
before unmounting before moving to other tab if we want to perform some operation or wants to do something then at tat time how we can do that?
Then  at that time we have another life cycle method is there. That is known as componentWillUnmount()

Now what happens 
This is my website.
I clicked on the home..
If it is only the code then at that time what happens?
My Home component is going to be triggered.
Within my Homecomponent there is no lifecycle method is there except componentWillUnmount()
Then at that time its going to call what?
render() method
then it it going to render the component or not?
Now if I click on my about then at that time what happens?
If i click on the about then Home is going to unmount or not?
Before unmounting if you want to do something then can ou write the code here?
Then at the time of clicking on the about method this one is going to be triggered.
componentWillUnmount()
Before unmounting do something like clean up operations or something like that..

I have a global value is there.
I have performed some operation on that global value.
After go to the next level my global should be what? reset to something
Then at that time what we have to do?
Can we write that code here?
Ok now you go from home to about, then at that time within my home this is going to be triggered..
Here we have to write our code or not?
clean up operations and everything we have to write over here..


AT the time of react routing we are going to see these methods..
**Q** Can we unmount a component explicitly?
That is like conditional rendering
I have a component App is there
Now This is the rendering is nothing but what?
mounting...
I have the button is there..
Ok now I am going to put like 
this.state = {
	isShow : true
}
Ok..by default what is my isShow?
true..
So that can we put our conditional rendering?
How we can put it?
{this.state.isShow && <App /> }
{this.state.isShow ? <App /> : <OtherComp /> }

If i click on the button i have to make the below state variable as false



Next life cycle method is componentDidCatch()?
The next one is getDerivedStateFromError()
Can we see this one?
When we are using this one?
FOr exception handling...
Why at the time of exception handling we are going to do this one..
very simple thing.
I have a parent component.
I have 4 child components within parent..
Now what is my parent responsibility in general?
If any children having any problem as a parent I should have to know it or not?
Yes or no?
This is my parent i have 4 child.
If any children having any problem as a parent I should have to know it or not?
that means within my parent component we are going to override which method?
componentDidCatch() method 

Because of some reason there has a error occurred within C 
Then at that time my parent component componentDidCatch() method is triggered or not?
understand or not?
Any children has any problem as a parent i should have to know that one..
Ok for that purpose we are going to override that one..
componentDidCatch() method within parent with ?
with some error message also it is going to give..
what is the error message exactly
Ok now we can use the error..

there is one more method getDerivedStateFromError()
These 2 methods we are going to use for handling the exceptions
handling the exceptions is nothing but what find the problematic statements 
We have to give the some alternate solutions or not?
We are going to see this at the time of exception handling
For now just remember this 2..
componentDidCatch()
getDerivedStateFromError()

There is one more life cycle method is there known as getDerivedStateFromError()

Ok total how many life cycle methods are there? As of now we discussed?
//constructor()
//componentWillMount()
//render()
//componentDidMount()

Within these my componentWillMount() is deprecated.
Still it is working..
But they said like in future m going to remove this one..
So better to dont use this one..
So which one is recommended one?
My constructor only or not?for now..

What is next one?
shouldComponentUpdate()
componentWillUpdate()
render()
componentDidUpdate()

componentWillUpdate() is also deprecated.
In future this method is also going to be removed..

Ok the next one..children one
componentWillReceiveProps()
This is still working. But the same can be done using getDerivedStateFromProps()
The difference is getDerivedStateFromProps() is a static method.
Ok getDerivedStateFromError() is also a static method
Can you tell me what is the difference between my static method and instance method?
If it is a instance context we can use current object this
If it is a static context then at that time we are not able use to the instance members.
Now u said like this is the static one..this is the instance one..
Ok now i have a state variable is there.
this.state = {
	n :10
}

I want to update i from 10 to 20.
Now i can use this.setState({n:20}) in non static life cycle methods.
But we cant do that in static methods.It gives error
Why?
Because my getDerivedStateFromError(), getDerivedStateFromProps() both are like static.
Now tell me what these people told you know my requirement is what we have to update the state or not..
How many members we want to update within the state?
now one..
In future any number or not?
For example here my n is there as 10 and my location is "Mumbai"
2 values i want to update.
Here if i want to update I can put like nis 20. it is updated directly.
But if the method is static one still we want to update the state value  directly we are not able to use like this.setState()
So that they said like return me one object
I am going to treat like that object is going to update your state value..
now tell me this method should have to return me what?
we have to return whatever that is going to treat like setState() only.
understand or not?
so lets return n as 20 , location as ranchi
From this particular static method if u return one object is nothing but what i treated like a update the setState() method..
Same like that getDerivedStateFromError() is also static one..
Here also we are going to do what?
if you want to update any state value if it is a static context then what you have to do?
we have to return the object value..

static getDerivedStateFromProps(props, state) {
   
    if (props.n !== state.n) {
      return {
        n: 20,
        loc: "ranchi"
      };
    }
    return null;
}


here is the full code...

<h1>Lifecycle methods</h1>
<script src="http://uijavakit.com/downloads/react/react.min.js"></script>
<script src="http://uijavakit.com/downloads/react/react-dom.min.js"></script>
<script src="http://uijavakit.com/downloads/react/babel.js"></script>
<div id="root"></div>
<script type="text/babel">
   class Child extends React.Component{
         componentWillReceiveProps(){
               console.log('will receive props')
         }
         render(){
               console.log('child render');
               return <div>{this.props.n}</div>
         }
   }
   class App extends React.Component{
   		constructor(){
   			super();
            console.log('con');
            this.state={
            	'name':'sachin'
         	}
			setTimeout(function(){
              this.setState({
              'name':'dhoni'
           	  })
           	}.bind(this),3000);
           	setTimeout(() => {
                this.setState({
                    'n':'kohli'
                })
            }.bind(this), 3000);
       	}

        shouldComponentUpdate(){
            console.log('should update');
            return true;
        }

        componentDidMount(){
          	console.log('did mount')
        }

        componentDidUpdate(){
          	console.log('did update')
       	}

        componentWillUpdate(){
           console.log('will update');   
       	}

        componentDidCatch(error, info) {
        	debugger;   
  		}

   	    render(){
            console.log('render')
   	    	return <div><Child n={this.state.name}/></div>
   	    }

        componentWillMount(){
            console.log('will mount')
        }
   }

   ReactDOM.render(<App />,document.getElementById('root'))

</script>


first tme my this.state.name is Sachin
After 3 second set to Dhoni
After 3 seconds set to Kohli
Here componentWillUpdate() is there
Next render() method is there
Next componentDidUpdate() is there

My App is extends from React.Component..
Now tell me first time Sachin no problem.
render() method will call willUpdate()
willMount() and didMount() is not there.
After 3 seconds it turned to be Dhoni
My state is updated or not updated?
updated..after 3 seconds same thing is happened
But here what happened you know What is my value?Sachin
After 3 seconds my value is sachin only..requirement
can you tell me what happen?
first time is ok , render() method is going to be called
after 3 seconds ok my state is going to update like what?
sachin or not
What is my previous state?Sachin only or not?
Then at that time my componentWilUpdate() will trigger
And then render() method is going to be triggered
And then componentDidUpdate() is going to be triggered
Why I need that one?
Why because my previous state is what?Sachin..
My now state is Sachin
There is no change at all.
Then at that time why i need to call these 3 life cycle methods again?
the first one is componentWillUpdate(), render(), componentDidUpdate()
Before these 3 which method is going to be triggered?
shouldComponentUpdate()?
Can you tell me what is my default value here? //true or not?
Now first time my value is Sachin no problem
After 3 seconds my value is what ? Sachin only..
Then at that time how many methods going to be triggered?
shouldComponentUpdate(), componentWillUpdate(),render(),componentDidUpdate() for the same state value or not?
because of virtual dom no problem
Why i need to trigger these for sae value to be updated again?
I dont want to execute that one.
My state is not changed..
Then at that time how we can resolve this problem?
Dont extend your component from React.Component
Can we extend from React.PureComponent?
There is only one difference is there
Remaining all are same..


So in above case if second or third tie we are updating name to Sachin again that means there is no change to state.
So if we use PureComponent then only shouldComponentUpdate() is triggered.
It wont call the other 3..componentWillUpdate(),render(),componentDidUpdate() 
Remaining part is not triggered means React.PureComponent is going to handle some code or not?
What is that code?
We have to compare the previousstate to my newstate
If my previous state and new state both are different then that time the shouldComponentUpdate() will return true otherwise false
The above code is written within the React.PureComponent
But my React.Component case shouldComponentUpdate() always returns true..
Except this all are same...


*************************************************************************************************
10/02/19
*************************************************************************************************
first time load
constructor() 
componentWillMount() //deprecated
getDerivedStateFromProps()
render()
componentDidMount()

getDerivedStateFromProps()
//This is a static method..


Earlier in the initial classes we only knew during initial load constructor will be triggered and then render() method is triggered.
Now we know before rendering if we want to perform any operation then we have a method called as componentWillMount()
Ok now this method is going to be triggered befor render() method..
save the file..refresh the page and see in browser console..
Now this componentWillMount() method is deprecated method.
This one is replaced with one more method its name like getDerivedStateFromProps()
This method is working like different different cases
We will see all that..

Can we write that one? this is a static method..
getDerivedStateFromProps(){
	console.log("get derived state from props");
}

Now can we refresh the page
my constructor is going to triggered
And then my getDerivedStateFromProps() is going to triggered
Then my render() method is going to be triggered

That means what?
If my getDerivedStateFromProps() is not there , then at that time it takes componentWillMount()
See..we must be getting a warning if we have written only componentWillMount() and not getDerivedStateFromProps()
Lets check the browser console..
	react-dom.development.js:12503 Warning: componentWillMount has been renamed, and is not recommended for use. 
	See https://fb.me/react-unsafe-component-lifecycles for details.


If we write both getDerivedStateFromProps() and componentWillMount() it will give error..
	react-dom.development.js:524 Warning: Unsafe legacy lifecycles will not be called for components using new component APIs.
	App uses getDerivedStateFromProps() but also contains the following legacy lifecycles:
  		componentWillMount
  		componentWillUpdate
  		
	The above lifecycles should be removed. Learn more about this warning here:


Next thing is it is mandatory to return one object otherwise null from within getDerivedStateFromProps()
Otherwise we will get error..
	react-dom.development.js:524 Warning: App.getDerivedStateFromProps(): 
		A valid state object (or null) must be returned. You have returned undefined.
		

So we have to return something or not? from which method?
getDerivedStateFromProps() or not?
lets return null...
It is a static context
If we want to update any state variable how do we update?
using setState() or not?
If it is a static context we are not able to use like this.setState() inside getDerivedStateFromProps()
my "this" is not available within getDerivedStateFromProps()
then we have to do?
It is a static context..If we bind also we are not able to use "this"...
Within the static context we can only use static members
If we bind "this", now "this" is what? instance member
my "this" I am not able to use here..getDerivedStateFromProps()
Then from here I want to update my state..
Like it was sachin first time.
I want to make it something different.
how we can?
my getDerivedStateFromProps() always returns me one object
In this particular object what you return that one is going to treat like my state updation object or not?
How we can update the state? we can put like one object or not?

this.setState({

})

So we put one object or not inside this.setState
So this object is same as return object from getDerivedStateFromProps()
So that you have to return..
If you dont want anything then just leave it
Now if we add a return statement returning object or null then the warning or error related to this will be removed once you refresh the browser..

Now lets try to remove the other error as well..


But before that my getDerivedStateFromProps() takes how many arguments that i want to know
How we know that one?
How we can test it?
Simply we will put like a,b,c,d..
static getDerivedStateFromProps(a,b,c,d){
	console.log(a,b,c,d);
	return null
}

Now refresh the page and go to browser console..
{}__proto__: Object {n: "kohli"} undefined undefined

What is my a printed? one object
What is my b printed? one object
What is my c printed? undefined
What is my d printed? undefined

That means it takes 2 arguments
Can you tell me what is this second argument printed? object {n : "Kohli"}
This is state variable or not..
That means my second argument is like always a state variable
What about my first argument?
Its an object..

Can you tell me where you are using this object format to assign the data to a variable or something?
One is state another is props or not..
So the first argument might be props or not?
That means what?
This particular component should have to get something from the outside or not?
Ok can you tell me how you can pass the data to this component?
Where we are using this App?
In ReactDOM.render()?
    ReactDOM.render(<App />,document.getElementById('root'));

Can we pass something here?
    ReactDOM.render(<App loc="Bangalore" />,document.getElementById('root'));

Is there any problem with that?
Can we put like loc = "bangalore" or something?
Now this data goes to my App component or not? 
Like a props or not?
Can you save and refresh the page?
Now in console we should get props and state both printed from getDerivedStateFromProps()
{loc: "Bangalore"} {n: "dhoni"} undefined undefined
And this getDerivedStateFromProps() is triggered before our render() 

The same method we use for multiple purposes.
So far good?

First time Load
=================
constructor()
//componentWillMount()
getDerivedStateFromProps()
render()
componentDidMount()

1)my constructor() is triggered
2)my componentWillMount() is there
3)And then  getDerivedStateFromProps() is there

Either componentWillMount() or getDerivedStateFromProps() we are going to use..
If getDerivedStateFromProps() one is not there then componentWillMount() is triggered
If getDerivedStateFromProps() one is there then componentWillMount() is not triggered. It gives me an error for legacy method use
So dont write both simultaneously. 

Again getDerivedStateFromProps() has to return an object or null otherwise.
What is the object purpose?
That object is our state updation object.
setState() is the method.. Here we have to update ike my { n : "Dhoni"}
That means we are updating our state with that value..

So below both are updating state...
this.setState({
	n : "Dhoni"
})


static getDerivedStateFromProps(props,state){
	return {
		n : "Dhoni"
	}
}

getDerivedStateFromProps() takes 2 arguments props and state
This is first time load...


4)And then render() 
5)And then componentDidMount()

Ok Can we write the component code?

  class App extends React.Component{
        constructor(){
            super();
            this.state={
                n:'Sachin'
            }
        }
        render(){
            console.log('render');
            return <h1>{this.state.n}</h1>
        }
        componentWillMount(){
            console.log('will mount');
        }
        componentDidMount(){
            console.log('did mount');
        }
        static getDerivedStateFromProps(props,state){
    		console.log('get derived state from props')
        	return null;
        }

    }
    
    ReactDOM.render(<App loc="Bangalore" />,document.getElementById('root'));


So my requirement is like my value is Sachin.
I want to update it to Dhoni..Ok tell me..
If any state is updated which method is going to trigger?
Before rendering my "Dhoni" into the browser if we want to perform some operation then?
componentWillUpdate() is the method or not?
This method also deprecated

Now if we want to update this by default it is updated 
But if you dont want to update then? shouldComponentUpdate() is the method..
initially my value was Sachin. Next my value updated to Dhoni..
When new value comes as a state variable change shouldComponentUpdate() is going to ask like 
Do you want me to update this Dhoni within thr browser or not?
If say no..then this time  componentWillUpdate(), render(), componentDidUpdate() methods are not triggered
If say yes then all these methods are going to be triggered..
By default the return value from shouldComponentUpdate() is true which means all the remaining methods are executed.
But if we say no then we can override this method and return false from shouldComponentUpdate()
If we make it as false my remaining  componentWillUpdate(), render(), componentDidUpdate() these methods are not executed
Before updating your new state within the browser if you want to do any operation then at that time componentWillUpdate()
Ok..
After updating the new state within the browser if you want to do any operation then at that time componentDidUpdate()
In between these render() and componentDidUpdate()
Now first time my value is what here?
Sachin..
After render() method triggered my value is Dhoni or not..
Here I want my previous state..
After my render() is triggered I want my previous state
How i can?
We have one more life cycle method is there called getSnapshotBeforeUpdate()
Before updating Sachin to Dhoni what was my value? Sachin or not
So this we will get within getSnapshotBeforeUpdate().
My updation is done and rendered on Ui.
After tha if we want then at that time getSnapshotBeforeUpdate() we can use..

Now tell me how many methods are triggered?
If it is Sachin to Dhoni first it comes to shouldComponentUpdate()
If we put like return false then all the remaining methods are not triggered.
If we put like true then at that time what happens?
	componentWIllUpdate()
	render()
	getSnapshotBeforeUpdate() //gives previous state()
	componentDidUpdate()
	
is also triggered..
	
	
So the sequence is here....

If there is a state change
===========================
If getDerivedStateFromProps() is not available, but getSnapshotBeforeUpdate() is available
============================================================================================
shouldComponentUpdate()
//componentWillUpdate()
render()
getSnapshotBeforeUpdate()
componentDidUpdate
setstate


If getDerivedStateFromProps() is available and also componentWillUpdate() also available
============================================================================================
getDerivedStateFromProps()
shouldComponentUpdate()
render()
getSnapshotBeforeUpdate()
componentDidUpdate()
setState() callback..

﻿


Which means the legacy method gets triggered if and only if we have not used any newly introduced life cycle methods.
like getDerivedStateFromProps() , getSnapshotBeforeUpdate() etc

So componentWillUpdate() is deprecated.
Whatever we can do using componentWIllUpdate() can be done by using getDerivedStateFromProps()
So lets use that one..
Ok first write this shouldComponentUpdate()
Can we do one thing?
My value is Sachin right
After 3 seconds lets make it as Dhoni
lets see what happens..


We are going to refresh the page..
First time what it is going to trigger?
And then see what happens? Check browser console..
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
So first time load it is executing below in console.
1constructor
2get derived state from props
3render
4did mount

Note** 
	1) componentWillMount() is not triggered as getDerivedStateFromProps() new life cycle method is available as its replacement is is executed .
	2) getDerivedStateFromProps() is working like componentWillMount() on initial load
	

Lets see the state updation case..
1get derived state from props
2should udpate (true/fase)
if true
3render
4get snapshot before update
5did update

If my shouldComponent() returns false then after that none of the method is executed, so my order is
1get derived state from props
2should udpate


Also Note****
	If we have componentWillUpdate() then it is triggered after shouldComponentUpdate()
	If we have getDerivedStateFromProps() then it is triggered before shouldComponentUpdate()


Next we will discuss about componentWillReceiveProps()

I have a component is there 
This component get some data from outside is nothing but what? props
Initial load is fine..Its Sachin
But after 3 seconds it comes like Dhoni
But after 3 seconds it comes like Kohli
As a Children which data is coming from outside I want to know that one. which props are coming to me..
If you want to know can you override this one componentWillReceiveProps()?
Not first tme load..
Whenever not first time load..but you get the new props to me , as a children I want to know or get that update.
Then we will go with componentWillReceiveProps()
See how it is going to work..
Can you tell me where we are going to write this componentWillReceiveProps()?
In my children or not?
Who receives the props?
Children or not?

Can we write one more component Child component?
Now how we are going to tell like this Child component is acting like a children?
If you render this component within another component then at that time it is going to act like a Child component.

So that can we put this component within App render() method somewhere within render()
Now within this Child component I want to pass some data. How I can pass the data?
My n equals to..
Which data you want to pass?
Anything you can pass..

What is my first value Sachin
After 3 seconds its Dhoni

	class Child extends React.Component{
         componentWillReceiveProps(){
               console.log('will receive props')
         }
         render(){
               console.log('child render');
               return <div>{this.props.n}</div>
         }
   }

  class App extends React.Component{
        constructor(){
            super();
            this.state={
                n:'sachin'
            }
            setTimeout(() => {
                this.setState({
                    'n':'dhoni'
                })
            }, 3000);
            setTimeout(() => {
                this.setState({
                    'n':'kohli'
                })
            }, 3000);
     		console.log('constructor');
        }
        render(){
            console.log('render');
            return <div><Child n={this.state.n} /></div>
        }
}


First time it was Sachin, no problem
But later we are getting new props dhoni and then kohli
so 2 new props..
Now there is a life cycle method componentWillReceiveProps() which is going to get all these new props info.
So in Child we will get the data using {this.props.n}
Now come to browser and open browser console


first time load
===============
con
will mount/get derived state from props
render
child con
child render
did mount


Once state is updated in parent and passed to child
====================================================
get derived state
should update
//will update
render
will receive props
child render
get snapshot
did update

Now my state is updated to Dhoni
Then getDerivedStateFromProps() is called
shouldComponentUpdate() is true
My render() method is going to trigger
Within my render() method only my Child component is there..
That means we are passing Dhoni to my Child or not?
That means my Child got one new props or not? So componentWillReceiveProps() will be called from Child
Then Child render() method is called
Then parent get snapshot is triggered
Then did update is triggered.

Once again my Dhoni to Kohli
Then at that time as usual getDerivedStateFromProps() is going to be triggered.
then my shouldComponentUpdate() is going to be triggered
And then render() method is going to trigger
ANd then we will give props to child again.
Now componentWillReceiveProps() will be triggered
Then Child render() method is called
Now getSnapshotBeforeUpdate() is triggered.
And then componentDidUpdate() is going to be triggered

Now here once again componentWillReceiveProps() is deprecated.
getDerivedStateFromProps() is used instead.

So my props changes are also handled by my getDerivedStateFromProps() only..
Ok can we see this one..

Note** when we use componentWillReceiveProps() method inside Child class it is always called before render() of Child

SO lets add this getDerivedStateFromProps() inside Child also..

  class Child extends React.Component{
   constructor(){
   super();
   	console.log('child con')
   }
         componentWillReceiveProps(){
               console.log('will receive props')
         }
         static getDerivedStateFromProps(a,b){
            console.log('get derived state - child')
         	return null;
         }
         render(){
               console.log('child render');
               return <div>{this.props.n}</div>
         }
   }


Now if we keep getDerivedStateFromProps() and also componentWillReceiveProps() only getDerivedStateFromProps() will be triggered..
Lets check the execution order again as we have added getDerivedStateFromProps() inside Child component.

first time load
===============
con
//will mount
get derived state
render
child con
get derived state - child (this also triggered)
child render
did mount


Once state is updated in parent and passed to child
====================================================
get derived state
should update
//will update
render
//will receive props
get derived state - child
child render
get snapshot
did update


Next method is componentWillUnMount()
We already discussed right..
When we will go for componentWillUnMount()?
Mounting is nothing but put the data
Unmounting is nothing but removing the data

before removing the component from the browser if you want to do something 
Then do it within componentWillUnMount()
Best example is Menu items..Home, About, Contact and Services
If I click on the Home , Home component is mounted or not?
If I click on the About my Home is going to unmount and my About will be mounted or not?
That means wat?
AT the time of clicking on Home , my Home is going to be loaded
AT the time of clicking on About , then at that time within my Home Component which life cycle method is going to be triggered?
componentWillUnMount() will be triggered from Home
So before unmounting your component you want to perform some operation componentWillUnMount() is the method
Just clean up the object.
If you want to any operations you can do over here
That is the componentWillUnMount()
At the time of routing we are going to see that one...

The next one exception handling..
How many methods are there?
2 methods..
What are those?
One is componentDidCatch()
Another is getDerivedStateFromError(). This is also a static method only
These 2 methods we are using for exception handling

At the time of exception handling we are going to cover these methods..
But one line answer is I have a parent is there..
I have how many children are there.
As a parent I should be knowing any problem occurred within the children
That means what?
You have to override these 2 life cycle methods..
Where? Within my parent or not?

Always we are going to put these methods within the parent
That methods going to be triggered mean its child components having any issue.
So at the time of exception handling we are going to see this error boundary class...


Lets discuss next Pure Component..
You know this right?
What is the difference between a pure component and a normal component?
React.PureComponent vs React.Component?

If you observe in the React.Component there is a method called shouldComponentUpdate()
It is always returns true only
But if you come to my React.PureComponent my shouldComponentUpdate() method is going to return like what?

Suppose first time my state value is Sachin
After 3 seconds my state value is what Sachin only..for example think like that..
If my class is extended from React.Component.. And first time my value is Sachin
After 3 seconds my state is updated like what ?
Sachin only or not
If my state is updated in my react which method is going to be triggered?
getDerivedStateFromProps() and shouldComponentUpdate() or not
Always in my React.Component my shouldComponentUpdate() method returns true.
Ok because of these reasons remaining how many methods are going to trigger?
Ok my render(), getSnapshotBeforeUpdate() and componentDidUpdate()
These 3 will be triggered or not for the same state value updation.
But why we need to do this?
I want to stop that one..
How I can means In my React.PureComponent the same method shouldComponentUpdate() is going to write some extra code...
My previous state and new state is coming
It is going to check like if my previous state equals to new state then simply it is going to return like false
Otherwise it returns true
Remaining all are same..

*************************************************************************************************
11/02/19 - myfirstreactapp
*************************************************************************************************
Now you have to search for commands which is used to create your react application.
That command is called as create-react-app
create-react-app --version

If it is there no problem at all, if it is not there install that one..
we have to install it once globally
npm i -g create-react-app
//if create-react-app is not there it gives error create-react-app is not recognized as an internal or external command
//internet should be there while creating an app using create-react-app

For components also i dont want to create manually 
For that also another command is there. Lets install .
create-react-component --version
npm i -g create-react-component

create-react-app is going to give us a react app skeleton
Same like that we have client and server folders are there
Now within the client folder what you have to do?
You have to create the react application or not?

Now dont create the server client folder.
You can create the folders also with this command..
In your nodejs how we can write it?
You create the folder server.
GO to that folder then we type express or not?
We created this server and client folders manually

But using this create-react-app we are going to generate these folders.
No need to create manually

How we can ?
Go to some D drive or somewhere
Then type :- create-react-app myfirstreactapp
It creates a react app skeleton 
Now how the skeleton looks like see.


//react also works as single page application. 
//So a single file is loaded on the application startup  that is index.html.
//Why index.html? Because -  this is the file recognized by the server like index.js,index.jsp
//if we want to configure any other file as the startup file we need to configure the same explicitly in server. 
//But by default it will always search for the default index.html file and load index.html file on app start.
//What code we are expecting on index.html for any react app? 
//We are expecting the container. Whatever we put within index.html within <body></body> i.e. body tag that is only visible to the end user.
//container content is created by component
//So we have to put some content in the container i.e. content created by the component. And this content will be visible to the end user.
//1st step
//index.html
	 <body> write - <div id="root"></div>


//To render the component in the container we are using ReactDOM.render(component,container)
//Where we will write this code? obviously it is javascript code it has to be in javascript file for clean separation
//We will write this code in index.js

//2nd step
//index.js 
//import App component. Go with the same name that we have used during export.
	//import App from './App';
	//ReactDOM.render(<App />,document.getElementById("root"))


//Now as everything is clean separation, where my App component will be?
//It will be written in a separate file - App.js
//We have to export this so that it can be imported in other files(index.js)
//If it is a single export then use export default - 
	here only one function App() to be exported hence - export default App
	
//3rd step
//App.js - 
	//function App() { return () }
	//export default App;

//App.js - to write the component skeletal structure - here the root component we will write i.e. the App component
//This content is going to be rendered within index.html container..


//4th step
step 1:-
create-react-app myfirstreactapp
//creates react app skeleton
//it will create a folder myfirstreactapp and generate below folders or files
//public
	//index.html - this is the file recognized by the server by default , root file to execute
	
//src
	//app.js
	//app.jsx
	//app.css
	//app.test.js
	//index.js
	//index.css
	
//node_modules
//package.json
//.gitignore
//README.md


Step 2:-
In our requirement how many components are required?
	//Header
	//Menu
	//Home
	//About
	//Services
	//Contact
	//User
	//Photos
	//HOC
	//Footer

	If we want to create a component how many files are required?
	3 files are required.
	jsx - for view purpose
	css - for look and feel
	js - for any operation
	
	But we dont have create manually these files. But instead we can use createreact-component componentname
	Lets create now.
	



Step 3:- 
create-react-component Header
	//create a folder called Header
	//Inside Header folder it creates 4 files
	//Header
		//Header.jsx
		//Header.css
		//Header.js
		//index.js
	//If we use <Header> it is basically an user defined element but in react it is treated as a component
	//If it is a component it contains 4 files , then which file we are going to represent like a component?
	 	//js file only, so here Header.js file
	 	//So how Header.js file looks like? 
	 		
	 		//Header.js
	 		============
			import template from "./Header.jsx";
	 		class Header extends React.Component{
	 		 	constructor(){
    				super()
    				//create a state variable and make it accessbile from jsx file template()- nromal javascript function
    				//How is it possible?
    				//Any normal function accepts state or props as arguments
    				this.state = {
      					name : 'Sachin'
    					}
  				}
	 			render(){
	 				return (
	 					//content...which is prepared in the jsx file as part of clean separation
	 					//so import the jsx file
	 					//In this class "this" is available to constructor,to render method.
	 					  but this wont be available to template() as template() is a normal javascript function, 
	 					  
	 					//So we need to make "this" available to template() function at the time of calling.
	 					//How can we do that? How many ways we can call a method in js?
	 						//template()
	 						//template.call(this)
	 						//template.apply(this)
	 						
	 					//direct call is not possible as this wont be available to template(),it will refer to Window object.
	 					//Hence call the function template() using below syntax
	 					template.call(this, this.state.name);
	 				)
	 			}
	 		}
	 		
	 	//How can we put the content in the jsx file
	 	//Like a simple javascript method that should have to return something
	 	//so basically we are going to return what? some template right.. 
	 	//so lets create a method called as template function. 
	 	//This function should have to return the jsx content..
	 	//Now this content we have to use it inside js file - Header.js file.
	 	//So we need to export this template & import it in Header.js and call template() function there (inside Header.js - render return)
	 	
	 	//Header.jsx
	 	==============
	 	import "./Header.css";

    	//Any normal function accepts state or props as arguments. 
    	//hence here we are getting arg from the js file - Header.js - 
    	//from Header component when we called this file template() - we called template.call(this, this.state.name)
    	
	 	function template(arg) {
  			return (
    			<div className="header">
      				<h1>Welcome to Header</h1>
   				</div>
  			);
		};
		export default template
		
		//Now we have to style the Header component.How can we do that?
		//The content is build inside jsx file - Header.jsx.
		//Hence import the css file to the JSX file.
		//Add whatever css is needed in css file - Header.css
		
		//Header.css
		=============
		.header{color:red}
		
	 		
	 	//js - component , jsx - content, css - style (clean separation)	
	 	//Now when we are ready with the js,jsx and css files , what next? We need to use the js file. i.e. the component
	 	//Here in this case is Header.js that we need to use may be in some other files to render Header Component
	 	//So we have to export the Header component. That is the reason index.js file come into picture
	 	//index.js is only for export purpose.- clean separation
	 	//We can directly export from Header.js and import the same.
	 	//But for clean separation index.js is used as a helper.
	 	//index.js imports Header.js and export it back..
	 		import Header from "./Header";
			export default Header;
			
		//So in other files we can either import Header or index. both are correct only.
		//for ex - in App.js we can import in below 2 ways. Both are correct but second is preferred. 
			import Header from './Header/Header'
			import Header from './Header/index'


		//App.js
		==========
		We will load Header component in App.js
		import React from 'react';
		import Header from './Header/index'
		import './App.css';

		function App() {
 			 return (
    			<div className="App">
     				 <Header></Header>
    			</div>
  			);
		}
	 	export default App;

	 	
Step 4:- 
	Coming to package.json 
	dependancies - react,react-dom,react-scripts(alternative for babel) are mentioned - mandatory dependancies
	//downloaded to node_modueles
	//now suppose we want axios library to download locally what we need to do?
	npm i axios --save ( to download to node_modules and at the same time update package.json)
	
	Now to start the application lets verify again the root files
	public/index.html - to check if container exists
	src/index.js - to render component in container using ReactDOM.render(<App/>, document.getElementById("root"))
	App.js - App Component
				
	
	Now how to start the application. We have command below.
	npm start (from package.json location)
	//it will start application using 3000 port
	//http://localhost:3000
	
	Now remove that state from Header.js and also from templates() inside Header.jsx.
	Let proceed to our requirement

	
	

//5th step
	//Similarly create Footer Component
	create-react-component Footer
	
	
	//Add Footer component to App.js
	//App.js
	=========
		import Header from './Header/index'
		import Footer from './Footer/index'

		function App() {
 			 return (
    			<div className="App">
     				 <Header></Header>
     				 <Footer></Footer>
    			</div>
  			);
		}
		
	//Now change the default text - © rights belongs to me
	//Modify Footer.jsx for contents
	//Footer.jsx
	=============
		function template() {
  			return (
    			<div className="footer">
      			<h1>© rights belongs to me</h1>
    		</div>
  			);
		};
		
	//Now this is appearing after the Header.
	//But we want at the footer place.(bottom of browser page)
	//So lets change the css of footer
	//Footer.css
	=============
	.footer{
    position: fixed;
    bottom: 0;
    background: yellow;
    width: 100%;
    text-align: center;
    font-size: 20px;
    font-weight: bold;
    font-style: italic;
 	}

	As we are done with Footer changes refresh the browser and check how it looks.


//6th step
	Now lets create the Menu component The body Content ( between header and footer)
	create-react-component Menu
	
	Once done add it to App.js file
	//App.js
	=========
		import Header from './Header/index'
		import Footer from './Footer/index'
		import Menu from './Menu/index'

		function App() {
 			 return (
    			<div className="App">
     				 <Header></Header>
     				 <Menu></Menu>
     				 <Footer></Footer>
    			</div>
  			);
		}
		
	Now lets move to Menu.jsx for template design purpose - or content
		here we have to add 4 anchor tags
		//Home
		//About
		//Services
		//Contacts
		
	//Menu.jsx
	===========
	import "./Menu.css";
	import React from "react";

	function template() {
  		return (
   		 <div className="menu">
      		<div className="menu-links">
        		<a href="#/home">Home</a>
        		<a href="#/about"> About</a>
        		<a href="#/services">Services</a>
        		<a href="#/contact">Contact</a>
      		</div>
    	</div>
 	 );
	};

	export default template;

	Now change the stying to make the menus appear at the right side
	//Menu.css
	===========
	.menu-links{
    	text-align: right;
    	background: yellowgreen;
    	line-height: 40px; //vertically center
	}

	.menu-links > a{
    	margin-right: 15px;
    	font-weight: bold;
    	font-size: 18px;
    	font-style: italic;
    	letter-spacing: 3px;
    	color: white !important;
	}


	Now once the menus are ready, what next?
	We need to load the components to specific anchor tag click.
	On Home anchor click it will load the HomeComponent..also the url path should change..
	http://localhost:3000/#/home
	http://localhost:3000/#/about
	http://localhost:3000/#/services
	http://localhost:3000/#/contact
	
	//without hash also we can mention, with hash also fine
	
	

//7th Step
//Now lets create the above 4 components
create-react-component Home
create-react-component About
create-react-component Services
create-react-component Contact

Now we have 4 links and 4 components ready.
Now how we can map the exact component to the exact link?
On each anchor click it should load specific component
If I click on Home , Home component should load
If I click on About , About component should load
If I click on Services , Services component should load
If I click on Contact , Contact component should load
//for the linking from component to path(url)
So somewhere we have to interlink for the mapping. Where we need to do?
We have the anchor tags i.e. the paths/urls in Menu.jsx. 
Lets import our components also and use it in same file for linking.

//import all link components - home,about,services,contact
//We have to interlink now the components to links..
//After the menu links ideally our component should load..
//So far 3 libraries we are using.- react,react-dom,react-script
//But from these 3 library does not support this routing mechanism.
//So we ned to depend on another library called - react-router-dom for routing.
//npm i react-router-dom --save
//within this particular url http://localhost:3000/#/home - 
//if we handle this # with routing to a component we have called as HashRouter
//import HashRouter to Menu.jsx.
//If HashRouter is a component how we can use it? Like an element <HashRouter></HashRouter>
//All the content must be inside a single element inside HashRouter. So lets keep everything in a div.
//Now the actual linking we need to do. if path is home , home component should load.
//For this linking we have another component is there - called as Route.
//If Route is a component how can we use it? Like an element <Router path="" component=""/>
//If we are giving some data to the Route component how we can give it? By attributes only ..
	//<Route path="/home" component={Home} />
//How this Route component is going to take this data?? like a props or not.. {this.props.path} and {this.props.component}
//Route Component is expecting keys - "path and component" inside Router class. 
	Make sure we pass same keys(path,component) as the property name, otherwise the value of any other attribute name will be undefined in Route class


//Menu.jsx
	===========
	import "./Menu.css";
	import React from "react";
	import Home from '../Home/index';
	import About from '../About/index';
	import Contact from '../Contact/index';
	import Services from '../Services/index';
	import { HashRouter, Route } from 'react-router-dom';
	function template() {
  		return (
   		 <div className="menu">
   		 	<HashRouter>
        		<div>
      				<div className="menu-link">
        				<a href="#/home">Home</a>
        				<a href="#/about"> About</a>
        				<a href="#/services">Services</a>
        				<a href="#/contact">Contact</a>
      				</div>
      				<Route path="/" exact component={Home} />
          			<Route path="/home" component={Home} />
          			<Route path="/about" component={About} />
          			<Route path="/serivces" component={Services} />
          			<Route path="/contact" component={Contact} />
      			</div>
      		</HashRouter>
    	</div>
 	 );
	};

Now refresh the browser and check if components are loaded or not on anchor click.


**************************************************************************************************************************************
12/02/20
**************************************************************************************************************************************

//8th Step
//create a component Users and Photos
	create-react-component User
	create-react-component Photos
//add links to Menu.jsx for maintaining routing for User Component and Photos Component
//import first both the component

		import User from '../User/index';
		import Photos from '../Photos/index';
		//Inside <HashRouter><div > - add below.
	        <a href="#/user">User</a>
	        <a href="#/photos">Photos</a>
	        <Route path="/user" component={User} />
          	<Route path="/photo" component={Photos} />
//Now what will happen? If you click on the User tab it will load the User component.
//One request should hit server and get the data. display the data in User component
//We have to display the data in a table.
//As a part of clean separation keep it in a separate component and use it wherever you want.
//So create a folder called reusableComponents inside src folder and create TableComp inside it.
cd reusableComponents
create-react-component TableComp

//Before rendering the table we need the data. So before rendering one request should go the server and load the data.
//Before rendering which method is going to trigger in the component?
	//constructor(),getDerivedStatefromProps(pros,state), componentWillMount()
	//So lets add getDerivedStatefromProps() to the User Component - to make request to server
	//add a debugger to see if control comes to this method before rendering
	import React    from "react";
	import template from "./User.jsx";

	class User extends React.Component {
  		static getDerivedStateFromProps(props, state) {
    		debugger;
  		}
  		render() {
    		return template.call(this);
  		}
	}

	export default User;
	
//If now here in getDerivedStatefromprops() after some time we get the data from server.
	and we have to pass this data to to the render() method , how can we do that?
	Can we maintain data as a state variable and update the same using this.setState() on success of server request..
	We cant use setState() directly as this not available here
	Return an object instead which will be treated like state
	and then use this state variable inside render()..
//If you want to send request to server what are the things we have to pass?
	url, method , and data if needed
//Any url if we get the response within the browser then it is a get request.
//Like this how many request you want to send?
//multiple get request, multiple post request or not..
//Today you are using like axios and tomorrow i want to change it to jquery...Then?
//Then how many places you have to change?
//There will be multiple places or not..how we can overcome?
//As in future we will be making many a times the ajax call to server, 
	better to keep that code in a single file and use it wherever you want.
	create a folder MyServices and create a file Servercall.js(reusable file) inside it.
	//reusability of service you want better go for service
	//In ServerCall.js we will be having multiple methods for - get req, post req, put eq, delete req etc.
	//So how can we export all the functions? better to create a class and define all these as member functions
	//suppose I want 2 methods now - fnGetReq(),fnPostReq()
	//Now as it is(ServerCall.js file) a shareable file means anyone can use these methods.
	//Throughout our application who wants get request they will use fnGetReq()
	 	//Throughout our application who wants post request they will use fnPostReq()

	//Now one get request and another get request - what is the difference.
		//method is get only, url is going to change.
		//If you want to pass the data to get request, how you can pass the data - as query string parameters.
		//again query string parameter will be part of url only.
		//so url is the only difference.
		
		//Now here in fnGetReq() we have to send the request.
		//How we can send? By using axios library or not..
		//lets download that library now.
			npm i axios --save
		//import axios library inside ServerCall.js
		//now to make the get request using axios we will use - axios.get(url)
		//now axios.get(url) returns a promise. How to consume the promise? Using then() function right..
		//now this then() method - first method is going to return a success callback and second method is going to error callback..
		//is it mandatory or recommended to handle the promise here? The then() method- the returning promise inside this ServerCall.js file? 
			if not then what is the reason?
			//because this fnGetReq() method will be called multiple times and response will be different for each request.
			//for example from the Users component we are going to call fnGetReq() and also from Photos component we are going to call fnGetReq().
			//For Users response will be Users and for Photos response will be Photos.
			//But if we want to perform some operations on these response- 
				for ex fetch first 10 records from Users Response,
				Photos response suppose we want 100 records from Photos response.
			//So the operations are not same to all the Responses.
			//Hence it is better to send the response or promise object back to corresponding components.
			//Now User got user response and can perform operations on it. 
			//And same for Photos got photos response and can perform operations on it.
			
			import axios from 'axios';
			class ServerCall{
    			fnGetReq(url){
        			return axios.get(url)
    			}

    			fnPostReq(url,data) {
        			return axios.post(url,data)
    			}
			}
			export default ServerCall;
			
			//Now if we have to use these methods in other components - like in User or Photos, what we need to do?
			//We need to create object of that class..and at the same time if we need to use this particular class 
				in other components we need to export this class. i.e. export default ServerCall;
			//this method we will be using multiple times whenever we want to send request to server.
			//hence creating class instance using new() operator everytime is going to allocate the memory. which is not a good idea.
			//Hence make these method static  
			class ServerCall{
    			static fnGetReq(url){
        			return axios.get(url)
    			}

    			static fnPostReq(url,data) {
        			return axios.post(url,data)
    			}
			}
			and use it in other components(like User and Photos) by using class name
			ServerCall.fnGetReq(url)
			ServerCall.fnPostReq(url,data)
			
			//Now goto User.js - modify getDerivedStateFromProps()
			 import ServerCall from '../MyServices/ServerCall'
			 getDerivedStateFromProps(props, state) {
			    ServerCall.fnGetReq("https://jsonplaceholder.typicode.com/users")
 			 }
		
			//Now this method- ServerCall.fnGetReq("https://jsonplaceholder.typicode.com/users") will return what?
				A promise object right. Lets handle that. Use then() to handle the same and fetch the response in callback.
				  getDerivedStateFromProps(props, state) {
			    	ServerCall.fnGetReq("https://jsonplaceholder.typicode.com").then((res)=>{
      					return {
        					data:res.data
      					}
    				})
    				.catch(()=>{
      
    				})
 			 	}
		
			//Now one more things - instead of hardcoding the complete URL in every components, 
				lets remove the base part from the URL and save it somewhere. 
				And just pass the exact string to be appended to the base url
				For example - for Users pass ServerCall.fnGetReq("/Users")
				for Photos pass ServerCall.fnGetReq("/Photos")

			//Save the base url in ServerCall.js
			import axios from 'axios';
			const baseUrl = "https://jsonplaceholder.typicode.com";
			class ServerCall{
    			static fnGetReq(url){
        			return axios.get(baseUrl+url)
    			}

    			static fnPostReq(url,data) {
       			    return axios.post(baseUrl+url,data)
    			}
			}
			export default ServerCall;
			
			//Now lets create the TableComp
			//This is a generic component. So What are the parts are dynamic in TableComp?
				//Headers
				//Data - Rows holding data
				//Then the keys - to fetch from response we need the keys
			//We have to pass these to TableComp as attributes and inside TableComp we can receive it as props
			
				
			//As the above are dynamic values and will change based on the response from server
				lets save it as state variables. So lets add to initial state in User.js inside constructor
				   this.state = {
      			  		'data' : [],
      				    'headers': ['ID', 'NAME', 'USER NAME', 'EMAIL'],
      					'keys': ['id', 'name', 'username', 'email']    }
 				   }
 			
 			//Now lets instantiate TableComp inside User as it will be loaded there.
 			   {
        			this.state.data.length === 0 ? <Loader /> :  <TableComp  
        				h={this.state.headers}
        				d={this.state.data}
        				k={this.state.keys}
     				/> 
      			}
 			But here we need to check if data is updated with records from response.
 			Then only we will load the TableComp. 
 			If data is not updated with all the records that means operation is not yet completed.
 			And we have to wait. So let's add a load mask if data.length == 0.
 			

		  //Now as we are sending everything to TableComp - dynamic headers,data and keys by using the response received from server
		  //Lets create the TableComp by using these dynamic values
		  
		 
		  //TableComp is a child of User.
		  //Now whatever we are instantiating <TableComp> inside <User> and sending h,k,d , we will receive that inside TableComp as props.
		  
		  //We will create headers dynamically using this.props.h.map()
		  //We will create rows(tr) by iterating this.props.d.map()
		  		//this.props.d contains array of objects each object representing a row with key and value pairs.
		  		//each key representing a column
		  //Inside tr - we have to run inner loop on this.props.k.map() to create <td>.
		  //here we are expecting dynamic values like header, data and keys via props. We have to first mention here.
		  //We have taken h for header, d for data and k for keys
		  //same h,d,k we have to mention where we are going to use this TableComp 
		  	like <TableComp h={} d={} k={} />
		  //who wants this <TableComp> ? //User and Photos
		  //TableComp.jsx
		  =================
			function template() {
  				return (
    				<div className="table-comp">
         				<table border="1px">
                			<tr>
                  				{
                  					this.props.h.map((v)=>{
                        				return <th>{v}</th>
                  					})
                				}
                			</tr>
                			{
                  				this.props.d.map((o)=>{
                      				return <tr>
                           				{
                             				this.props.k.map((key)=>{
                                  				return <td>{o[key]}</td>
                             				})	
                           				}
                      				</tr>
                  				})
                			}
        			 	</table>
    				</div>
  				);
			};

			export default template;

				
				

//9th Step	
//create 1 more component Photos 
	create-react-component Photos
	//the same thing we need to do for Photos component as we have done for User
	  we are going to send a request to server and fetch the same.
	  Lets use the ServerCall service we have created and used in User component.
	  It is same exact implementation like User.
	  Both are using reusable components like - ServerCall, TableComp and Loader
	  Only initial state i.e. headers, keys will be different as per the response
	  also the url we have to pass to ServerCall is - /photos
	  
	  //Photos.js
	  import ServerCall from '../MyServices/ServerCall'
	  class Photos extends React.Component {
  		constructor() {
    		super();
    		this.state = {
      			'data': [],
      			'header': ['ID', 'TITLE', 'URL'],
      			'keys': ['id', 'title', 'url']
    		}
  		}
		componentDidMount() {
    		ServerCall.fnGetReq('/photos')
      		.then((res) => {
        		this.setState({
          			data: res.data
        		})
      		})
      		.catch(() => {

      		})
  		}
  
  		render() {
    		return template.call(this);
  		}
	 }
	export default Photos;

	Photos.jsx
	===========
	import "./Photos.css";
	import React from "react";
	import TableComp from "../reusableComponents/TableComp";

	function template() {
  		return (
    		<div className="photos">
      		<h1>Photos</h1>
      		<TableComp h={this.state.header}
        		d={this.state.data}
        		k={this.state.keys} />
    		</div>
  		);
	};
	export default template;





//Donot use getDerivedSateFromProps() if there is no props change...It wil only update the state if there is change in props
//because of props change if we are going to update the state then we will go for getDerivedStateFromProps()
//constructor() is also not advisable for ajax call..
//path parameter for the id -
//If we are sending any parameter in query param from <Route> like <Route path="/user/:id" component={User} /> inside Menu.jsx
  while loading the component, then inside User component we can catch this queryparam id as this.props.match.param.id
  //inside getDerivedStateFromProps() we will retrieve the same as props.match.param.id , as it is a static method
  //so as it is a props change we can update the state inside getDerivedStateFromProps()
  example below
  class User extends React.Component {
  	constructor(){
  	 	super();
    	this.state = {
      		id : ''
     	}
  	}
  	static getDerivedStateFromProps(props, state) {
    	return {
      		id: props.match.params.id
    	}
  	}

   componentDidMount() {
    ServerCall.fnGetReq('/users')
      .then((res) => {
        this.setState({
          data: res.data
        })
      })
      .catch(() => {

      })
  }
  render() {
    return template.call(this);
  }
}

export default User;

//this.props undefined constructor..


Similarly create HOC Component
create-react-component HOC




**************************************************************************************************************************************
13/02/20
**************************************************************************************************************************************
** If we want to update state because of props then only we will go for getDerivedStateFromProps()
   getDerivedStateFromProps() has 2 arguments - props and state
   If my state variable is going to change because of props , then we can go with getDerivedStateFromProps()
   
   	Tell me one scenario where I will be updating state in getDerivedStateFromProps()
   	First time load first constructor(), then componentWillMount() 
   	I dont want componentWillMount()
   	This is deprecated one..so lets comment it..
   	THe next method is what?
	Now i will use getDerivedStateFromProps()
	Before render() method it is going to be triggered.
	They said like it is not recommended to use getDerivedStateFromProps() for asynchronous calls.
	
** Dont do any ajax calls within constructor as well..It is recommended not to do

** Then when we will go for getDerivedStateFromProps()?
	I have a state variable is there
	That state variable is going to update because of this props.
	Then only we can go with the getDerivedStateFromProps()
	Now I have scenario is there
	I have a table is there I have some data is there..
	For example userid, password 2 columns table..
	On every row I have an edit button
	If I click on the edit button it has to navigate to some other place..Think like that
	
	Can you tell me how it is going to navigate?
	The url is going to change
	localhost:3000/edit or something..
	At the time of edit button my page is going to navigate to some edit page
	
	Within this page we have to pre-populate the data from the row we have clicked on edit...
	How we can pre-populate?
	user id is u1 and password is p1 and update button is there.. in the edit button click navigate page
	
	Now refresh the page
	localhost:3000
	
	Then what happens?
	If i refresh the page the data will be lost from localhost:3000/edit or not?
	If I refresh the page my data should be there..
	How i can handle this scenario?
	
	Each and every user have their unique identities
	If i click on the edit button can you do one thing?
	Can we put like a path parameter of this id?
	
	Ok now if i click on the edit button it is navigate to this page,..
	and edit with path parameter is what? 2
	2 is nothing but what id of this second row user or not?
	If i refresh my page then that time what I have to do?
	Can we take this id?
	Can we send the request to the server?
	Can we get the data?
	For this particular id can we pre-populate again?
	Can we do like this or not?
	
	If my path parameter is not there Ok for whom I have to fetch the data?
	That particular identity is not there or not?
	If i click on the edit button instead of putting like normal path we are going to maintain one more parameter
	This parameter keep on changing or not?
	If i click on edit button - first row of table indicating user 1 , my edit 1
	If i click on edit button - second row of table indicating user 2 , my edit 2
	
	If i refresh my page..this page/part is what now?
	one component or not?
	EditComponent

	If I am going to refresh the page then at that time my component is going to load..
	Within component how many methods are going to be triggered by default?
	First time?
	4 methods are going to be triggered.
	constructor()
	getDerivedStateFromProps()
	render()
	componentDidMount()
	
	In this methods one of the method should have to take the data and we have to send request to the server or not?
	yes or no?
	Ok now this data to my component is coming from outside or not?
	Anything coming from outside how we can represent the data?
	like props or not?
	yes or no?
	That means you have to take this 2 and you have to send request to the server for this id ca we get the data and can we pre-populate data or not?
	Now tell me how we can get this particular id that is 2?
	That is the first question..
	
	At first time load then that time i m getting something from outside..
	Then at that time how we can get the data?
	got it or not?
	How i can maintain the props here?
	Now within the constructor can we take like this?
	//this.props
	Lets check if my this.props is going to build within my constructor or not..
	If it is not build then how we can take that props?
	After we get this one after that what we have to do?
	We have to send the request to the server and then get this data or not?
	can we come to my getDerivedStateFromProps()?
	How it looks like?
	
	Within the constructor if we have this.props or not first lets check that out..
	put console.log() and check..
	
	Now we can see my values are there but initialised to undefined or not?
	Now at the time of constructor load my this.props are undefined...
	
	If you perform any operation on this one anything we take..it will throw error or not?
	Directly we are not able to take the props by using this.props within the constructor or not?
	my this.props are what? undefined or not?
	But our requirement is what? 
	On first time load only i want the id 2 or not?
	
	After constructor() which method is going to be triggered?
	getDerivedStateFromProps() or not?
	Now can you come here static getDerivedStateFromProps(){}
	By default it gives me how many arguments are there?
	props and state or not?
	directly we get the props or not?
	Now we have the props is there. What is my props? what is myvalue ? id=2
	Now with this id what we have to do?
	We have to send the request to the server or not?
	
	Now they said like this is the method not suitable for asynchronous methods or not?
	Ok then what we have to do?
	THis value we have to store somewhere or not?
	Ok where you want me to store?
	state or not?
	SO that can i put like this.state = { id: props.id } or something?
	yes or no?
	My state value is going to change based on props value or not?
	Then we can go with getDerivedStateFromProps()
	
	Now your state is updated with what? your value or not?
	Still my id is 2 is there
	My asynchronous call is not yet done..
	They said like it is not recommended one..
	
	So after this getDerivedStateFromProps() which method is triggered?
	render()?
	We have a table is there or not?
	This table is expecting which data?
	my users data or not?
	So that by default you are going to put like what?
	this.state.d is equal to empty or not?
	At the time of loading this render() method my d is what?
	empty or not?
	That means nothing is going to render..
	ANd the same time my dom loading is done or not?
	My dom is not waiting for your response for your data
	My dom is going to be visible to end user.
	Now after that can we go and bring the data 
	yes or no?
	
	See this is my page for example.
	There are 100 lines of code is there 
	And then I have the table is there
	And then 100 lines of code is there
	Ok my render() method contains 100 lines of code, table , 100 lines of code.
	For example if you wrote this one in first 100 lines of code it is going to be executed before render() method or not?
	Lets add a loader for this table?
	my data is going to load..
	whatever the dependancy is there for the ajax we will put like a loader..
	That means the first 100 and next 100 lines of code are not impacted by this middle table or ajax call..
	
	so my ajax call is not impacted by this 200 lines of code or not?
	Now simply can we go to the server and get the data or not?
	Now which method is there?
	componentDidMount()
	Now my request is going to server..
	and get the data..
	Now we are going to update our d with the data coming back from sevrer..
	But previous 200lines is not impacted..
	
	Now we would like to fetch user/2 or user/3 or something like this
	
	Now we have to handle 2 routing...change in the routing file..
	when it is /user it will load the UserComponent
	when it is /user/id it will load 
	
	<Route path="/users/:id" component={Users} />
	for dynamic id use :id
	
	Now when we save everything and run localhost:3000/#/users/10
	and press enter 
	within the constructor this.props is undefined
	Next method is  getDerivedStateFromProps()
	within this  if i type props.match it will give the routing details
		{path : "/uparams" , url : "/users/10" , isExact : true, params : { id :"10"} }
	props.match.params.id we are getting the id...
	
	Can we give this id to our server and get our data?
	So first save this id coming from props.match.params.id to a state variable id..
	and then lets send it to server..
	
	Now as we are going to make server call in componentDidMount() i.e. after render() call
	our state variable id should be available there..
	this.state.id
	
	
	Now my requirement is within the constructor only i want my id
	Then how it is possible?
	You said like my this.props is not working
	At the time of loading my this is available.
	my props is not yet build
	Then at that time my constructor has a parameter that is called as props
	This is going to give us our props..
	
	If you are using this props my constructor with parametrised then at that time you have to call super class parametrised constructor
	constructor(props){
		super(props);
	}
	
	
	Note :***
	SO we are not supposed make ajax calls in constructor and getDerivedStateFromProps()
	componentWillMount() is also deprecated so not recommended as well
	SO we have to do ajax calls inside componentDidMount()
	
Next is Loader component
lets add loader to Users and Photos first..
Meanwhile I want to put the loader before..
My this.state.data.length == 0 then put the loader.. otherwise load the component

//create Loader component inside reusableComponents
			create-react-component Loader
Download a loader.jpg inside project and keep inside public folder.

			//Loader.jsx
			==============   
			import React from "react";
			function template() {
  				return (
    				<>
      					<div className="mask"></div>
      					<div><img src="loader.gif" /></div>
    				</>
  				);
			};
			export default template;
	
 			//Loader.css
 			===========
 			.mask{
    			position: fixed;
    			left: 0;
    			top: 0;
    			width: 100%;
    			height: 100%;
    			background: black;
    			opacity: 0.5;
			}
			.mask+div{
    			position: absolute;
    			left: 0;
    			right: 0;
    			text-align: center;
    			top: 125px;
			}


 //Here we are checking this.state.data from User.js..Similarly do this for Photos.
 			//User.jsx
 			===========
 			import Loader from '../reuseableComponents/Loader';
			import TableComp from '../reuseableComponents/TableComp/index'
			function template() {
			  return (
    			<div className="users">
      			<h1>Users</h1>
      			{
        			this.state.data.length === 0 ? <Loader /> :  <TableComp  
        				h={this.state.headers}
        				d={this.state.data}
        				k={this.state.keys}
     				/> 
      			}
    
    			</div>
  			 );
			};
			export default template;

				
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@

Can you tell me what is higher order function?
When a function takes another function as argument that type functions are called as higher order functions..

Same like that higher orders components are there.
Higher order components means when a component takes another component as argument

Now we will go for higher order components..
First why we will go for HOC first we will see that..
Now my requirement is very simple
I have a button is there and the button has a text like..He clicked me 0 times..
So when I click on the button the count should be incremented.
Like on first time click -> He clicked me 1 times..
Like on second time click -> He clicked me 2 times..
Ok this is the button

I have a text is there.
Also I want to change this..
Initial on load it should show -> He hovered me 0 times..
If i put my cursor again -> He hovered me 1 times..
If i put my cursor again -> He hovered me 2 times..

Got it or not?
This is the requirement..
After that what is the problem if we write the code exactly in this format
There is a duplicate code is there.
How we can avoid this duplicate code by using higher order component we will see that one..
Now whatever you know just use that functionality
How many components are required..
Just i m going to create one HOC component
Ok top level
Within this HOC component we will create like one Click component for button and another Hover component for hover
So now I am going to add one more tab in the Menu having(Home,About,Contact,Services,Photos,Users) i.e. HOC
When I click on this tab HOC then at that time one component should have to load i.e HOC component
Under this HOC component Click is one component and HOC is one component.
2 components are required within HOC
So total 3 components are are required.

create-react-component Hoc

Then add to Menu.jsx rouing..


import "./Menu.css";
import React from "react";
import Home from '../Home/index';
import About from '../About/index';
import Contact from '../Contact/index';
import Services from '../Services/index';
import Users from '../Users/index';
import Photos from '../Photos/index';
import Hoc from '../Hoc/index';
import { HashRouter, Route } from 'react-router-dom'
function template() {
  return (
    <div className="menu">
      <HashRouter>
        <div>
          <div className="menu-links">
            <a href="#/home" >Home</a>
            <a href="#/about" >About</a>
            <a href='#/serivces' >Services</a>
            <a href="#/contact" >Contact</a>
            <a href='#/users/10' >Users</a>
            <a href="#/photos" >Photos</a>
            <a href="#/hoc" >HOC</a>

          </div>
          <Route path="/" exact component={Home} />
          <Route path="/home" component={Home} />
          <Route path="/about" component={About} />
          <Route path="/serivces" component={Services} />
          <Route path="/contact" component={Contact} />
          <Route path="/users/:id" component={Users} />
          <Route path="/photos" component={Photos} />
          <Route path="/hoc"  component={Hoc} />
        </div>
      </HashRouter>


    </div>
  );
};

export default template;

*****Note******
Route path should match with a href
 <Route path="/hoc" ...... /> should match to  <a href="#/hoc" >HOC</a>


Now lets create the other 2 components we will be using inside HOC..


create-react-component ClickComp
create-react-component HoverComp

And then import in Hoc.jsx as we will use here inside render()

Now in ClickComp.jsx lets add a button to it
function template(){
	return (
		<div className="click-comp">
			<button onClick={this.fnUpdateCount}>You clicked me 0 times</button>
		</div>
	);
}
export default template;

Now lets take a state variable count.
We are going to increment the button click count within button text .
In the above jsx.. right now it is hardcoded to 0.
			<button onClick={this.fnUpdateCount}>You clicked me 0 times</button>
We have to make this dynamic

So lets add a state variable count inside constructor and initialise it to 0.
And lets define the method we are using inside jsx button click..
That is fnUpdateCount() 
This is going to be on called on button click.
We will set the state variable here by increment the previous count value with 1..
Lets add this within the ClickComp class..within ClickComp.js

	class ClickComp extends React.Component{
		constructor(){
			super();
			this.state = {
				count : 0
			}
		}
		fnUpdateCount(){
			this.setState({
				count : this.state.count + 1
			})
		}
	}

lets modify the jsx code as well a little bit..
i.e. To make the button content dynamic on every button click
function template(){
	return (
		<div className="click-comp">
			<button onClick={this.fnUpdateCount.bind(this)}>You clicked me {this.state.count} times</button>
		</div>
	);
}


The same can we write for Hover component?
And then import in Hoc.jsx as we will use here inside render()

Now in HoverComp.jsx lets add a paragraph to it
function template() {
  return (
    <div className='hover-comp'>
      <h1>
        <p onMouseOver={this.fnUpdateCount.bind(this)}>
          You have hovered {this.state.count} times
        </p>
      </h1>
    </div>
  );
}

export default template;


Now lets take a state variable count.
We are going to increment the hover count within paragraph .
We have to make this dynamic

So lets add a state variable count inside constructor and initialise it to 0.
And lets define the method we are using inside jsx onMouseOver..
That is fnUpdateCount() 
This is going to be on called onMouseOver.
We will set the state variable here by increment the previous count value with 1..
Lets add this within the HoverComp class..within HoverComp.js

class HoverComp extends React.Component {
  constructor() {
    super();
    this.state = {
      count: 0,
    };
  }
  fnUpdateCount() {
    this.setState({
      count: this.state.count + 1,
    });
  }
  render() {
    return template.call(this);
  }
}

Now what is the problem with this code?
We have used same code within the click component and also within the hover component

If there is same functionality then why you have to copy like that?
Now tell me how many ways we can share that functionality?
One component to Another component?
One is like Service is there..
When you go for service?
If the functionality is not dependent on view changes or something then we can go for services.
Getting the data and giving the data to other person
But in this case what happens?
My component functionality is going to change based on the DOM updation or not?
Yes or no?
Now my requirement is if you want to share the functionality with related to your DOM updation then you can go with the HOC components
Just we can create one component with that functionality and you can reuse the functionality wherever you want through out your components

What is the definitions of HOC?
We have to write it once
We can use it where ever we need
You have to share the functionality across our components..
Then we will go for higher order components or not?
ok now higher order definitions is what tell me?

Component takes another component as argument 
Now tell me my higher order component is which type of component?
Functional component or not?
If it is a class component how can we pass another component as an argument?
In a class component how we can pass?
through object or not?

HOC are always functional components
it should take one argument
The argument should be a component or not?
Who wants to use this functionality they have to pass .

Who wants to use this functionality in our case?
click component
hover component


lets create myHoc.js
myHoc.js
=================
import React from 'react';

const myHoc = (oldComp) => {
	return oldComp
}
export default myHoc;


This one i want to use within click component
So far good?
nothing is there within this..

Go to HoverComp.js and import myHoc there...
	export default myHoc(HoverComp)
//here there is no change.. because we are giving something and we are getting back the same

next in ClickComp also make same change.. import myHoc 
	export default myHoc(ClickComp)

My definition is something different
My component which take another component as argument and returns me a another component back..
Now we are returning the same component
Now if i return the same component then what is the use of HOC?

I have to write some functionality That should have to return back.
So that can we write a component and return it back?
Lets write a class component within and return it back instead of returning same old component...

const myHoc = (OldComp) => {
	class MyNew extends React.Component{
		render(){
			return <OldComp count="10" />
		}
	}
	return MyNew
}



Now in return statement above we have written <OldComp count="10" />
It goes to? may be click component or may be hover component..
How they will receive it?
as props or not?

So lets make it as 0 in the beginning..
const myHoc = (OldComp) => {
	class MyNew extends React.Component{
		render(){
			return <OldComp count="0" />
		}
	}
	return MyNew
}

here in above this 0 is keeps on changing or not?
Can we write a state variable?
What is the problem with that?
ok how we can write it?

const myHoc = (OldComp) => {
	class MyNew extends React.Component{
		constructor(){
			super();
			this.state={
				count : 0
			}
			this.fnUpdateCount = this.fnUpdateCount.bind(this);
		}
		fnUpdateCount() {
    		this.setState({
      			count: this.state.count + 1,
    		});
  		}
		render(){
			return <OldComp count={this.state.count} fnUpdateCount={this.fnUpdateCount} />
		}
	}
	return MyNew
}


Also here above this OldComp could be ClickComp or HoverComp
and this fnUpdateCount() has to be called either from click or hover component
Then lets give this method to those guys..
how we can give?
with props only..
			return <OldComp count={this.state.count} fnUpdateCount={this.fnUpdateCount} />


Now lets remove the duplicate code from HoverComp.jsx and ClickComp.jsx
And lets pass HoverComp to myHoc to make it behave like higher order component

import React from 'react';
import template from './HoverComp.jsx';
import myHoc from '../myHoc';
class HoverComp extends React.Component {
  //constructor() {
  //   super();
  //   this.state = {
  //     count: 0,
  //   };
  // }
  // fnUpdateCount() {
  //   this.setState({
  //     count: this.state.count + 1,
  //   });
  // }
  render() {
    return template.call(this);
  }
}

export default myHoc(HoverComp);


In HoverComp.jsx we will use it like props..
import './HoverComp.css';
import React from 'react';

function template() {
  return (
    <div className='hover-comp'>
      <h1>
        <p onMouseOver={this.props.fnUpdateCount}>
          {/* You have hovered {this.state.count} times You have hovered{' '} */}
          You have hovered {this.props.count} times
        </p>
      </h1>
    </div>
  );
}

export default template;


Similarly the click component will look as follows..
Hoc.jsx
=======
import './HOC.css';
import React from 'react';
import HoverComp from '../HoverComp/index';
import ClickComp from '../ClickComp/index';

function template() {
  return (
    <div className='hoc'>
      <h1>HOC</h1>
      <HoverComp />
      <ClickComp />
    </div>
  );
}

export default template;


Hoc.js
======
import React    from "react";
import template from "./HOC.jsx";

class HOC extends React.Component {
  render() {
    return template.call(this);
  }
}

export default HOC;

This is all about HOC...

**************************************************************************************************************************************
14/02/20
**************************************************************************************************************************************
What all we have discussed till now?
How many ways we can create components?
//2 ways - functional and class

If we go with the functional components what is the syntax?
Better to go with es6
If it is a functional component what react is going to do?
Call it or not?

If it is a class component then? It has to extend from React.Component or React.PureComponent also
Can you tell me the difference between React.Component and React.PureComponent?
In my React.Component shouldComponentUpdate() life cycle method always returns true only
But In my React.PureComponent shouldComponentUpdate() life cycle method takes my current state and new state 
And it checks if my previous state and new state are equal then it returns false otherwise it returns true only
Other than that remaining all are same..
Now tell me if it is a class component then what my react is going to do?
Create an object and then ?
call constructor()
Tell me the overall flow
Then it is going to search for componentWillMount() or getDerivedStateFromProps()?
If it is not there then there is no issue..
But should override which method? render()

In between if you want to perform some operation?
Why you need constructor?
What type of code you write?
initialise state members, if we need to bind methods
These we can write within constructor

How many types of constructors are there?
2 types..
constructor with arguments and without arguments
With arguments contains what? props..
Can you tell me which props it is going to represent?
default props are what?
At the time of loading which props it is going to get?
one is original props is ok, one is history, one is location , one is match..

{history: {…}, location: {…}, match: {…}, staticContext: undefined}
history: {length: 3, action: "POP", location: {…}, createHref: ƒ, push: ƒ, …}
location: {pathname: "/home", search: "", hash: "", state: undefined}
match: {path: "/home", url: "/home", isExact: true, params: {…}}

If we call constructor without argument then at that time we have to call super() without any argument..
If we call constructor with argument then at that time we have to call super(props) with props
Then we can initialise state members, 
Then we can also bind methods

This is the recommended code if you want to write anything within the constructor

Then componentWillMount()
getDerivedStateFromProps()

getDerivedStateFromProps() takes how many arguments?
//props and state..

Here we ca override either of these 2 componentWillMount() or getDerivedStateFromProps()
But componentWillMount() is deprecated.
Better to go with getDerivedStateFromProps()
If there is any need to update state because of any props changes then better to go with getDerivedStateFromProps()

and then render() method
and then componentDidMount() method
These are at the time of first time load only...
constructor()
componentWillMount()
getDerivedStateFromProps()
render()
componentDidMount()


If my state is updated then?
getDerivedStateFromProps()
shouldComponentUpdate()
//componentWillUpdate()
render()
getSnapShotBeforeUpdate()
componentDidUpdate()

Here 2 things are there.
shouldComponentUpdate() can be true or false
if true all these methods after shouldComponentUpdate() is executed
Otherwise it will stop after shouldComponentUpdate()

Now this componentWillUpdate() is there and componentDidUpdate() is there.
Can we update our state here..
First time my state is what? Sachin -> initial state
After that my state is what? Dhoni -> using setState()

If my state is updated from Sachin to Dhoni then at that time my getDerivedStateFromProps() is first executed.
The next one is what?
shouldComponentUpdate() is executed.
If it is true then it is coming here next render()
Now my question is can i make to Dhoni to Kohli..
can i make Dhoni to Kohli here? after render() within componentDidUpdate()?
//no why?

Within this particular componentWillUpdate() "Sachin" to "Dhoni" is visible.
I want to update to Kohli i dont want Dhoni suppose...
SO can i make another setState() call inside componentDidUpdate()

If i update here to Kohli then each and every time this method is going to be triggered or not?
See...
Now Sachin to Dhoni..is done in other place..
Now if i update from Dhoni to Kohli is nothing but what? We are updating the state or not?
If we are updating the state then what happens?
Once again my state is going to be updated..that means it it is recursive or not..

componentDidUpdate(){
	this.setState({
		name : "Kohli"
	})
}

These methods will be executed when we use setState() to update the above state in componentDidUpdate()..
getDerivedStateFromProps()
shouldComponentUpdate()
//componentWillUpdate()
render()
getSnapShotBeforeUpdate() -> returns previous state
componentDidUpdate()

here just think shouldComponentUpdate() is returning false
So all the above are executed 5 methods..

When for second time it came to componentDidUpdate() , once again setState() will be called with the same name as Kohli..
And as its not a pure component then it is going to call the same sequence of methods again..
And once again same sequence of methods again...
And once again same sequence of methods again...

So the call is recursive here..
So it is recommended to not update the state here...

**Q** why it is not recommended to update state within componentDidUpdate(),componentWillUpdate() or in any other life cycle methods..

Lets check now the props changes....
componentWillReceiveProps() is deprecated.
lets use getDerivedStateFromProps() again for the props changes as well


componentDidCatch()
getDerivedStateFromErrors(err) 
These used are used for handling exception.
When these are triggered?
I have my parent and children component
Any problem within the children then at that time my parent should know about the issue
So where we should write?
Inside my parent or not?


next what?
componentWillUnMount() is the method
when it is going to trigger
My component is going to be mounted
these 4 life cycle methods ging to be triggered
When it is unmounted before unmounting this method is going to be triggered.

So if it is a class component it is going to check for all these things

**Q** Why we go for component? What is the answer?
Component is a reusable code. We can just reuse it where ever we want..
Ok the next one?
**Q** Which library we are using for component? //react-development.js

**Q** what is the difference between html and jsx?
JSX is a markup language. it is not compiled..
Before rendering it has to be compiled..

**Q** What is meaning of single page application?
Only one file is going to load,
Most of the times that is the index.html file.
Remaining all come and load within the html file or not?

If You want to load the content what you needed here?
Within the HTML which place is going to be visible here?
Body part or not?

You have to put some content within the body part.
Then what is needed?
container or not? one element is required for same which will be treated like container
For this which library is there?
react-dom.development.js

**Q** ReactDOM.render() method takes how many arguments?
//3 
//component
//container
//callback

**Q** What is the difference between ReactDOM.render() and component class render() method?
	//ReactDOM.render() method is used to put the contents within the container
	//React component render() method is used to prepare the content 

**Q** Can you tell me some of the members or properties that is coming from our React.Component to our class?
	//state
	//props
	//refs
	//setState()
	//all life cycle methods
	
**Q** What is the difference between my let, const, this, this.state and this.props?
      When we will go for that?
      
      If we want to create a local variable go for let
      I dont want to change any value then const is preferred
      "this"- At first time load only if we want to load some data then If i dont want to change later then we can go with "this"
      	      We can use anywhere inside our component but on initial load only..
      	      Changes are not reflected 
      "this.props" - Whenever any data is coming from outside
      "this.state" - If we want to maintain the data that is mapping with render() 
      				 In between if you made any changes or something then better to go with this.state or not?
      				 

**Q** If we do want to update the state then how we can do this?
	  this.setState() is the method
	  
**Q** How many arguments this.setState() has?
	 //2 arguments or not?
	 //first argument is like an object 
	 //second is like a callback method
	 
	 When this callback method is going to be triggered?
	 Once my state is updated
	 And then only my callback is executed
	 setState() is working like an asynchronous method
	 
**Q** How we can take the form data? How many ways?
	  By using refs
	  By using an event or not?
	  
	  If it is a ref how we can write?
	  we are going to write like <input ref="name" type="text" />
	  Then use like this.refs.name.value
	  
	  How we can use event?
	  <input type="text" onChange={this.fnChange.bind(this)} />
	  fnChange(event){ //last argument is event always
	  	console.log(event.target.value);
	  }
	  
**Q** How we can comunicate between 2 components?
	One is parent to children by using this.props
	Other is Child to Parent by using events with callback methods..
	//within the Child one method will trigger 
	From that we have to call the Parent method as a callback..
	

**Q** How I can create one element without JSX?
//In our react there is a method called createElement()
const element = React.createElement()
createElement() takes how many arguments?
first argument is element name
Attributes how we represent? as key value, key value, key value or not
So in javascript how we can represent key value pairs?
we can store any number of properties..
So second argument is an object
What is my content?
Third argument is my content
    return React.createElement('div', null, `Hello ${this.props.toWhat}`);
		is equivalent to 
	return <div>Hello {this.props.toWhat}</div>;



**Q** How many ways we can apply the style one?
	one is inline - style={{}}
	second is className - className=""
	third is module is there...we will discuss this one later


**Q** What is context? Why we go for context?
	Simply we want to share the data
	My parent has the data.
	I want to share the data all my children

**Q** Through out the application if you want to share the data to whom I have to apply the context?
	App or not?
	App is the parent one
	All the components are children only or not?
	
**Q** What is the syntax of context? How many steps are there?
	1. Create the context
	2. Give the data to context
	3. Take data from context
	
**Q** How we can create a context?
	let ctx = React.createContext()
	
	It is always better to go with global..
	So that context should be available through out all components
	
	Within my context Provider is one Class
	ctx.Provider -> This one has to provide the data?
	Which data we have to provide??
	Any data for example value="Sachin"
	<ctx.Provider value="Sachin">
	
	</ctx.Provider>
	
	**We have to always pass "value" attribute only from ctx.Provider
	As this class expecting this "value" as props..
	
	Now suppose I have a class B who is going to consume this data..
	How it can consume?
	<ctx.Consumer>
		(data) => {
			return <div>{data}</div>
		}
	</ctx.Consumer>
	
**Q** Can we create multiple contexts?
	//yes we can...

**Q** Which library we use for routing?
	//react-router-dom
	//Within the react-router-dom one class is there called as HashRouter
	

**Q** How we can use HashRouter?
	HashRouter opening and closing tag..
	Whatever we write the links that should be enclosed with a single element..
	So lets add a div under <HashRouter></HashRouter>
	We can also add <></> instead of div
	We can also use React.Fragment
	
	  <HashRouter>
        <div>
          <div className='menu-links'>
            <a href='#/home'>Home</a>
            <a href='#/about'> About</a>
            <a href='#/services'>Services</a>
            <a href='#/contact'>Contact</a>
          </div>
          <Route path='/' exact component={Home} />
          <Route path='/home' component={Home} />
          <Route path='/about' component={About} />
          <Route path='/services' component={Services} />
          <Route path='/contact' component={Contact} />
        </div>
      </HashRouter>

**Q** What is the difference between HashRouter and BrowserRouter?
**Q** What is React.Fragment?
**Q** What is <></>?

**Q** What is a higher order component? When we will go for this one?
		A component which takes another component as an argument and returns a new component known as a higher order component
		When we have a need like sharing the functionality across the components then we will go for HOC
		
**Q** What is the syntax?
	const myHoc = (OldComp) => {
  		class MyNew extends React.Component {
    		render() {
      			return (
        			<OldComp count={this.state.count} fnUpdateCount={this.fnUpdateCount} />
      			);
    		}
  		}
  		return MyNew;
	};

	export default myHoc;
	
	=======================
	class HoverComp extends React.Component {
 		render() {
    		return template.call(this);
  		}
	}

	export default myHoc(HoverComp);

	//inside HoverComp.jsx whatever comes from HOC we can use like props..
	
	
	import './HoverComp.css';
	import React from 'react';

	function template() {
  	return (
    	<div className='hover-comp'>
      	<h1>
        	<p onMouseOver={this.props.fnUpdateCount}>
          	{/* You have hovered {this.state.count} times You have hovered{' '} */}
          	You have hovered {this.props.count} times
        	</p>
      	</h1>
    	</div>
  	);
	}

	export default template;


**Q** What is virtual DOM
	//Basically this is based on our component render() method..
	suppose my render() method contains 1000 lines of code...
	first time i have a state variable name as Sachin..
	We have this state variable in render() method after 100 lines of code..
	
	Then next if we made any change then what happens?
	Sachin -> Dhoni
	
	They have written one algorithm called diffing algorithm
	which is going to check my original dom and virtual dom.
	both are going to compare.
	Which part is going to change that part only just it is going to push and rest part will be merged.
	
**Q** How we can make ajax calls in react?
	I have one login form is there
	userid,password and login button is there
	This is the client side part ok
	Now this is the view template ..jsx
	On the jsx you want to perform some operation.
	My jsx included with some component
	So that my js file or not?
	Within the js file where we include this jsx?
	within the render() method 
	so that we can write like what?
	
	class Login extends from React.Component(){
		render(){
			return template.call(this)
			//return jsx from other file
			//based on clean separation we kept in another file
		}
	}
	
	
	Now inside jsx--
	template() has to take the data
	handle the event
	take data from form
	validate the data
	prepare object
	send this data to server
	
	
	receive the data in server..
	
We know how to handle event
We know how to take data from the input form, by using refs and onchange
We know how to validate
prepare json

now what we have to do?
We have to send a request to server
What information is required now as a client side developer?
url and method type

That is no need to bother about that one
Because my server side guy is going to provide that one or not
So that i have the url is there i have the method is there i have the data is there
Can we send the request to the server?
through axios?
How many times you have to write ajax in your applications?
multiple time
That is nothing but what sharing the functionality or not?
Sharing the functionality by service 
So that can we create a service class here
So that my component communicates with service
my service communicates with server
my server communicates with database
my database  gives the data to server
my server  gives the data to service
my service  gives the data to component

This is the flow

Now within the component you can get the response
Here performing operation where?
within the view or not? yes or no?
For the ajax one you can use anything

Ok how many ways we discussed?
javascript one by using directly XMLHttpRequest()
jquery $.get(), $.post(), $.ajax()
fetch()
axios library

anyone we can use..
We get response using this one. We provide to the view
We dont handle the promises inside service
We return it back to the component and it is handled there..

Most of the times we use map() method to iterate over response


**Q** create-react-app, create-react-component



***************************************************************************************************************************************
15/02/20 
***************************************************************************************************************************************
****In our last class example can we use componentWillUnMount()
We have already discussed.

Where we will use this componentWillUnMount()?
In this particular example app myfirstapp i want to use componentWillUnMount() life cycle method
Where i can use it?

In this example there are tabs right.
If we click on Home Home is going to be mounted
If I click on About Home is going to be unmounted or not?
Ok so that within my Home i want to handle that one.
Ok how we can?
Can we go to my Home component?
The js file
Lets override this method - componentWillUnMount()

When we will go to About tab this is going to be triggered first..
before About constructor()

componentWillUnMount(){
	console.log("i am going to unmount")
}


****Next one is like exception handling
For that purpose how many life cycle methods are there?
componentDidCatch()
getDerivedStateFromErrors()

These are the 2 life cycle methods to handle the exception handling
Now getDerivedStateFromErrors() is a static method

My requirement is very simple thing
I have a component is there HeroComponent or whatever it is..
Ok I want to pass one hero name for this particular component.
If you pass one hero name like "SuperMan" you are going to pass one hero to this component
If you pass like "SuperMan" we can print "you are the hero...superman" in render()
If you pass like "BatMan" we can print "you are the hero...batman" in render()
If you pass like "Joker" for this particular HeroComponent then at that time we have to raise an exception.
Simply my message will be "You are not a Hero"

If you raise an exception then at that time what happens basically?
It is totally crash the application...it is going to break the flow..
Then at that time if we click About or Contact or something then those will not be working

Exception handling is we have to handle the exception and provide a proper message
And then we have to continue the flow.
Exception handling is what we have to handle the exception and at the same time we have to provide an alternate solution to run our application as is
How we can handle that one we will see.

Lets create the Hero component and pass the data..


How many components are required?
If i click on this particular one the one component should have to load or not?
Within that component my Hero component is required or not?
So that can we create that two components?
create-react-component ExceptionHandling
create-react-component Hero

what is next one? For this one we have to add route??
Lets go to Menu.jsx to add one more tab..

import ExceptionHandling from '../ExceptionHandling/index';

function template(){
return (
 <HashRouter>
        <div>
          <div className='menu-links'>
            <a href='#/home'>Home</a>
            <a href='#/about'> About</a>
            <a href='#/services'>Services</a>
            <a href='#/contact'>Contact</a>

            <a href='#/users'>User</a>
            <a href='#/photos'>Photos</a>
            <a href='#/hoc'>HOC</a>
            <a href='#/exception'>ExceptionHandling</a>
          </div>
          <Route path='/' exact component={Home} />
          <Route path='/home' component={Home} />
          <Route path='/about' component={About} />
          <Route path='/services' component={Services} />
          <Route path='/contact' component={Contact} />

          <Route path='/users' component={User} />
          <Route path='/photos' component={Photos} />
          <Route path='/hoc' component={HOC} />
          <Route path='/exception' component={ExceptionHandling} />
        </div>
      </HashRouter>
 );
}

export default template;

Now lets go to our ExceptionHandling component
Lets go to our ExceptionHandling.jsx

Lets add that one here..
import './ExceptionHandling.css';
import React from 'react';
import Hero from '../Hero/index';
function template() {
  return (
    <div className='exception-handling'>
      <h1>ExceptionHandling</h1>
      <Hero />
    </div>
  );
}

export default template;


Now for this particular Hero component I have to pass name or not?
Ok how we can pass?
Using attributes or not?

import './ExceptionHandling.css';
import React from 'react';
import Hero from '../Hero/index';
function template() {
  return (
    <div className='exception-handling'>
      <h1>ExceptionHandling</h1>
      <Hero name="superman"/>
      <Hero name="batman"/>
      <Hero name="joker"/>
    </div>
  );
}

Refresh the page and see how it looks

Now my requirement if i pass like a joker can we throw an exception? yes or no?

Lets raise an exception. How we can raise an exception?
By using throw..your own exceptions

Who get the data? My Hero Component or not?
How it gets the data?
like a props 

Can we check there? 
hero.jsx
========
import './Hero.css';
import React from 'react';

function template() {
  if (this.props.name === 'joker') {
    throw new Error('You are not a hero...');
  }
  return (
    <div className='hero'>
      <h1>You are the hero...{this.props.name}</h1>
    </div>
  );
}

export default template;



Now we will save everything..
Can we refresh our page?
Now any children has any problem as a parent i should know or not?
First of all you need to find what?
Where is your problematic statement
Because of which statement you get this error?

hero component or not?
How many Hero components you wrote?//3 or not
 	  <Hero name="superman"/>
      <Hero name="batman"/>
      <Hero name="joker"/>

These all are children to one parent or not?
Who is the parent here?
ExceptionHandling or not?

In your applications can you tell me there are so many pages are there
Each and every page has some problematic statements or not?
Can we do one thing?
Can we write one separate class to handle all your exceptions?
You said like these 3 Heros depends on what ? Exception Component
Now you have to override your 2 methods where?
Now who is the parent?ExceptionHandling
Can we override the two error methods where?
componentDidCatch()
getDerivedStateFromErrors()
Anyone we can use it..

Another page is there
There also 3 children is there
There also some exception is going to raise in children

Ok these 3 are suppose belongs to higher order component
If any problem is occurred then who is responsible?
HOC or not?

Once again what you have to do?
You have to override getDerivedStateFromErrors() or not?

Like this in an application there will be so many problematic statements will be there
Then how many times we have to override this one?

Can we do one thing?
Can we create one class ?
A separate class to handle your exceptions 
Can we put that class instead of this Exception directly?
Can we put your custom class now?

understand now?

Now for this Hero who is the parent now? 
Your ExceptionHandling class or not?

here my exception is our component..leave it
I have 3 Heros are there.
Directly they are children of ExceptionHandling in the past
Now I have created my own Exception Handling class.. suppose MyException
Now who is the parent?MyException or not?
Can we override these 2 methods here?
Yes or no?

HOC contains 3 ..
Can we put my own Exception Handling..i.e. MyException here also?
Yes or no?

Now who is the parent here? MyException
So that these methods already overridden.Can we put this one?
Then at that time how many times you wrote that code? Only one time or not?
SO that can i create my own exception boundaries class?
In this class what I have to override? its simple or not ?
These 2 error life cycle methods or not?
can we write this class?

If you dont want to write this your own exception class, one thing is there..
You can directly handle the exceptions in your parent class..
In your application there has so many problematic statements will be there in different different file.
If you have to handle this one my parent has to handle
Ok how many times I have to handle that 2 methods?
multiple times we have to write it or not?
Instead of that one just you can write one Exception boundary class 
Can we put all the children under Exception Boundary class?
Then at that time these all children will be children of MyException or not?
Now can we write this class...MyException
Same its a component only right...

SO the skeletal code should look like this..Lets override only the new error method
class MyException extends React.Component{
	constructor(){
		super();
	}
	static getDerivedStateFromErrors(){
	
	}
	render(){
	 //
	
	}
}


Now how I can place this in ExceptionHandling class render() method so that MyException should behave like parent to all my Hero components?

<MyException>
	<Hero/>
	<Hero/>
	<Hero/>
</MyException>


Now my question is within this MyException class is nothing but a component how many children are there?
In the above <Hero/><Hero/><Hero/> these are like contents...

Suppose just think we have a component..In its content it has 10 components are there..
I want to display those components.
Can you tell me how I can get this children components data within my Parent component?

Understand the question?

I have a component is there
Within the component there are multiple children components are there.
Ok these all are children ok ..fine
But now if the exception is there then at that time you have to show what?
One error message
If the exception is not there then?
Then we have to show our data as is..whatever the content is there that we have to show..
So 2 scenarios are there..

Now think my exception first time there or not there?
No there?Then first time what you have to show?
The total content you have to show or not?
Ok.. now my question is I have one component is there
Within the component there has so much content is there..
How I can get that content within this component?
This content is coming from outside or not?
That is called as? props
Hero are like children
How many children are there?
ANy number of children or not?
If you want to get the total content then at that time we have one predefined prop is there 
That is called as a children

Now if exception is not there Then we have to display what? this.props.children
If exception is there then at that time we will show the exception or whatever it is..

First time tell me exception is there or not there
not there right
Can we handle one state variable for that?

Within my constructor this.state = { hasError : false }
When this method is going to trigger?
Inside the Child component any exception occurs then at that time this method is going to be triggered or not?
This method triggered means exception occurred
If exception occurred then my hasError changes to true or not?

So that here what we have to do?
lets update the state..
this.setState({ 
	hasError: true
})

How we can update that one?
Now within the render() method can we handle that one ?
If hasError is true then at that time you have to give one message else if the hasError is false then you have display our children


@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
Next requirement is like this..
I have a textbox and a button
If i click on button i want to make the textbox like a focus

For that we have to write button onclick
Also we have to get the reference of input
either use document.getElementById("textboxid")

Now slight change is this is in another component
Now I have one App component
My App component has the textbox component
After my textbox component i have one <input type="button" value="submit" /> is there

Ok how my TextBox component looks like?
It may be a class component or a functional component
Think it is a functional component
How we can write it?

const TB = () =>{
	return <input type="text" />
}

Now how it going to be visible?
Simply we have to write like <TB />

If I click on the button one method is going to be triggered within my App component
And now from this method we have to focus the textbox or not?

Ok start..how we can do this?
My textbox is available in one component
My button is available in another component App
If i perform operation here I want make the textbox focus which is in another component

Start..how we can?
So here in App actual <input type="text" /> is required
If my textbox is available you can make it as focus right
But my textbox is available in another file
yes or no

my textbox is available in another component
Then how we can?
Means simply in our react there is a method called as a createRef() is there..
What i am doing is within my App component i created one reference
Can i give this reference to this TextBox component
And this TextBox component gives this reference to my <input type="text" /> 

I have one reference is there in App..
I just created that reference thats it
If i put the reference for TextBox that is for textbox

In out react how we can create our own reference?
this.myreference = React.createRef();

Ok now i have the reference is there
Now this reference can we tell this guy TextBox can you use this for this particular one textbox field?

Yes or no?
If we have to use this reference how we can?
my ref=myreference or not?
Now this reference is belongs to my textbox or not?

Now can we make it as focus?
Now we have the reference in App component
We have to forward this reference to my TextBox component
That is nothing but forward reference

To whom i have to forward?
TextBox component
That is which type of component?
functional
If it is functional component we have a method called React.forwardRef() is the method
By using that method we can get the forwarded reference here

Now this is like a plain component
Now you have to make like what?
You have to make this component to accept the references coming from outside or not?
how i can means simply upto here the method right..
We have the method called React.forwardReference()
Can we put our component within that method?
(props, r) => {
  return <input ref={r} />;
}

Can we put the same thing..
import React from 'react';
const TB = React.forwardRef((props, r) => {
  return <input ref={r} />;
});


Any function you are passing to another function that is acting like higher order function
In a functional component always the first argument is props..
Ok why because if it is a functional component how we can take data from outside component?
Like a props so that my first argument like props
My second argument onwards references

Now this "r" 2nd argument is the forwarded reference
To whom I have to forward tell me here
for my TB or not?

If I put like i=1, within the TB how i will get this data?
like props or not?
Why because my i is like own key
If i put like j=2 these 2 comes like what? props or not?
What about this r?
      <TB r={this.myRef} i="1" i="2" />

That is predefined right
So for the referece we put like predefined attribute ref instead of any other..
      <TB ref={this.myRef} i="1" i="2" />

Within the functional component --> check above code where we defined TB
These 2 values i and j comes to props 
And this myRef comes to r

So the reference is coming from App component to TB and from TB to textbox 
Once we have the reference we can do anything on it..
I want to put Sachin there.. How we can?
this.myRef.current.value="Sachin"

This is how it works...



*****If it is a class component then???
If it is a class component there is no React.forwardRef() required.
We can directly use like props only...
We will see this both in program...



1. If the component having <input type="text" /> is a class component
========================================================================
create-react-component TBForForwardRef

TBForForwardRef.jsx
=====================
import React from 'react';

function template() {
  return (
    <div className='tbfor-forward-ref'>
      <input type='text' ref={this.props.r} />
    </div>
  );
}

export default template;

About.jsx
============
import './About.css';
import React from 'react';
import TBForForwardRef from '../TBForForwardRef/index';
function template() {
  return (
    <div className='about'>
      <h1>About</h1>
      <TBForForwardRef r={this.myRef} />
      <input type='button' value='focus' onClick={(eve) => this.fnFocus(eve)} />
    </div>
  );
}

export default template;

About.js
==========
import React from 'react';
import template from './About.jsx';

class About extends React.Component {
  constructor() {
    super();
    this.myRef = React.createRef();
    this.fnFocus = this.fnFocus.bind(this);
  }
  render() {
    return template.call(this);
  }

  fnFocus() {
    alert('ss');
    this.myRef.current.value = 'Sachin';
    this.myRef.current.focus();
  }
}

export default About;





2. If the component having <input type="text" /> is a functional component
========================================================================

TBForForwardRefFunctional.js
==============================
import React from 'react';
const TB = React.forwardRef((props, r) => {
  return <input ref={r} />;
});

export default TB;

About.jsx
============
import './About.css';
import React from 'react';
import TB from '../TBForForwardRefFunctional';

function template() {
  return (
    <div className='about'>
      <h1>About</h1>
      <TB ref={this.myRef} />
      <input type='button' value='focus' onClick={(eve) => this.fnFocus(eve)} />
    </div>
  );
}

export default template;

Note ::
	

About.js
=========
import React from 'react';
import template from './About.jsx';

class About extends React.Component {
  constructor() {
    super();
    this.myRef = React.createRef();
    this.fnFocus = this.fnFocus.bind(this);
  }
  render() {
    return template.call(this);
  }

  fnFocus() {
    alert('ss');
    this.myRef.current.value = 'Sachin';
    this.myRef.current.focus();
  }
}

export default About;



3. If both are functional components
========================================================================

      const Child1 = () => {
        const fnClick = () => {
          console.log(myref.current.value, 'from child');
          myref.current.value = 'Sachin';
        };
        var myref = React.createRef();
        return (
          <div>
            <Child2 ref={myref} />
            <input
              type='button'
              value='focus'
              onClick={(eve) => fnClick(eve)}
            />
          </div>
        );
      };

      const Child2 = React.forwardRef((props, r) => {
        return <input ref={r} />;
      });

@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@ WEBPACK @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
58:32
We can create react application in 2 ways.
	1) By using create-react-app
	2) By using webpack (bundling purpose)
	
If I want to use my own server

index.html - it is running on file protocol, but i want to run it in http protocol or not.
That means what you need a server or not?
Ok you are using what now? facebook gmail...
All these are on some server and we are using these from server
Now onwards i want to use my own server. I ant to create my own server..

For example there are 100 files are there in an application. And our development is completed.
What is the next step after completion of my development?
We have to move this code to production. 
Now see we have written these 100 components..No one puts this directly in production right.
If we put the source code in production then what happen?
Everyone can see it right..What we have to do?
We have to build it..we have to minimize the code or not..
ok for that purpose we are using create-react-app. 
Then at that time we have the command is there. By using that command we can build it.

If we want to write your own skeleton or something, then we have the webpack..is one library is there.
By Using that one - how many components are there we are going to bundle these components within a single or 2 files 
					and we are going to deploy that one.
So for bundling purpose we are using webpack.

So far all the commands were coming from create-react-app. 
Now onwards in the webpack each and everything we are going to write manually.

In case of create-react-app we are getting react,react-dom,react-scripts by default. all these things are available inside our package.json file
But now in case of webpack we need our react library,react-dom library..Now here we have to create our package.json and everything.
That means scratch level i want to develop application on my own.
Next, how i can get my package.json by default? npm init is the command.
By using npm init command we can get the package.json. 
Once we get the package.json what is the next thing?
My package.json contains what? 
all the dependncies or not?
For our react, if we want to to run what all dependancies we require normally?
	//react,react-dom,babel (react-script  - facebook)
	//babel is required for compilation
	//react,react-dom is to create the components and to run the application on browser or not.
	
So now.. do you know the difference between dependancies and dev dependancies?
I have 3 components are there and my development is completed. So what is the next step?
We have to build these 3 components and we have to move to production or not.
Now these 3 components if we want to build then first we have to check if these 3 components have errors or not.
That means before moving this code to production we have to compile it or not. Any errors are there then it doesn't compile.
Now once my compilation is done then that time it is going to build our code. 
That means my compilation and my build everything is going to be done before moving to production.
Now just think ..our babel we are using within the production or before production?
Before production is nothing but what? before production means development only or not..?
That type of dependancies are called dev dependancies. 
Now my code is compiled , code is compressed..and it is minified and everything..
my build is there..my build is going to production. Now tell me whatever we write the code that is minified only.
but my features are what..dev only. 
If react is not there is my build is going to work in production? No..
So at the time production also my react library is required, react-dom library is required..react-router-dom is required.
Any dependancies for running our application - the above are required always or not irrespective of production or development.
There are called "dependancies" - are for development and production run both. 
"dev dependancies" we are using only for development(before production)

my babel is a dev dependancy..moving the code into production means code is compiled and minified.
So the next one?
my webpack is there. What is the purpose of webpack?for bundling..
once my bundling is completed then that time only i need to move my code to production or not.That means what?
my webpack is dev dependancy or dependancy? It is dev dependancy

At the time of development we are running our application where ? on localhost or not? That is what?? one server..
Once my code is moved to production then it is going to run on localhost or some other server?
Some other server.. that means my webpack server is required or not for production? not required.
because my webpack server we are going to use like what?for development only..
Like this at the time of creating our application some of the dependancies are dev dependancies and some are production dependancies.
These all should have to register where? in package.json or not. 
That means first we have to create package.json.
And then we have to download these dependancies or not. 
Some are dev dependancies and some are production dependancies.
So that can we create our own application?Yes..let create almost same ui application but by using webpack.
Now we have to create our own application (website) containing home, about, contact and service by using webpack.

mkdir myfirstwebpackapp
cd myfirstwebpackapp
npm init

package name: (myfirstwebpackapp) customapp
version: (1.0.0) 
description: webpack first project
entry point: (index.js) 
test command: 
git repository: 
keywords: 
author: 
license: (ISC) 
About to write to /Users/soumyasurajita/Desktop/Hyd-courses/React/myfirstwebpackapp/package.json:

{
  "name": "customapp",
  "version": "1.0.0",
  "description": "webpack first project",
  "main": "index.js",
  "scripts": {
    "test": "echo \"Error: no test specified\" && exit 1"
  },
  "author": "",
  "license": "ISC"
}


Is this OK? (yes) yes


Now it will create only package.json and entry point is index.js(it will default take if not providing explicitly)
Now we have to add dependancies or not. dev dependancies and prod dependancies or not.
my react and react-dom is required. first can we add that one? how we can add?

So these are the 2 prod dependancies we need.
1)react
2)react-dom

npm i react react-dom --save
Now it will install react and react-dom to node_modules and also add as dependancies in package.json
--save is used to add to package.json
Can we just go to the package.json and verify if it is added as dependancies or not..yes it is added.
So these are the basic things..
Next thing is what? my babel is required or not?If we want to run the babel there has multiple libraries are there. 

By using webpack to compile.. to bundle..etc we need below.
1)babel-core
2)babel-loader //load babel- babel loader
3)babel-preset //
4)babel-preset-react //for react
	
	npm install babel-core babel-loader babel-preset babel-preset-react --save-dev
	Now all these are dev dependancies. so use --save-dev while downloading.
	Now check in package.json if all these added to dev-dependancies or not.
	

See how the package.json looks now..
package.json
=============
{
  "name": "customapp",
  "version": "1.0.0",
  "description": "webpack first project",
  "main": "index.js",
  "scripts": {
    "test": "echo \"Error: no test specified\" && exit 1"
  },
  "author": "",
  "license": "ISC",
  "dependencies": {
    "react": "^16.12.0",
    "react-dom": "^16.12.0"
  },
  "devDependencies": {
    "babel-core": "^6.26.3",
    "babel-loader": "^8.0.6",
    "babel-preset": "^1.1.1",
    "babel-preset-react": "^6.24.1"
  }
}

I have downloaded the minimal libraries for a react app to work. What is the next step?
npm start - to run application
npm build - to build application
that means we were using the command line arguments or not. for that we are using webpack-cli
ok now at the time of running npm start, my application is going to run where? in your localhost server or not..
that one is webpack develeopment server.

Now you are writing your html file or whatever it is. It is a single page application.
ok you have to tell to the server right this is my page you have to run. i.e. the SPA.
my page is what index.html or another page.. for that we are using html-webpack-plugin

So these are webpack related stuff. 
1)webpack  - for bundling purpose.
2)webpack-cli - to run your commands through command line - npm start, npm build etc
3)webpack-dev-server - once you start your application, that is running in one server. that server is this..
4)html-webpack-plugin - to know what is the bootstrap html file for the application
all these are production dependancies or dev dependancies? all are dev only

npm i webpack webpack-cli webpack-dev-server html-webpack-plugin --save-dev

  
npm build (for dev,qa,stage..)
in our application now what is missing? jsx is there..js is ok..css is missing or not?

2 more dependancies- style-loader, css-loader. these are dev dependancies. why dev dependancies?
once my css is bundled my css can be understand by browser.there is no dependancy nothing is required.
my browser can understand only 3 things - html,css and js.
once it is bundled it is nothing but what that is converted into css, that is understood by browser.
nothing is required by me after bundling once it goes to production.
now lets install these..for css these are the 2 dependancies needed.
1)style-loader
2)css-loader


npm i style-loader css-loader --save-dev

Now the dependancies and dev dependancies are updated in package.json.
These are the minimum dependancies we need to run a basic react application.
package.json
=============
 "dependencies": {
    "react": "^16.12.0",
    "react-dom": "^16.12.0"
  },
  "devDependencies": {
    "babel-core": "^6.26.3",
    "babel-loader": "^8.0.6",
    "babel-preset": "^1.1.1",
    "babel-preset-react": "^6.24.1",
    "css-loader": "^3.4.2",
    "html-webpack-plugin": "^3.2.0",
    "style-loader": "^1.1.3",
    "webpack": "^4.41.6",
    "webpack-cli": "^3.3.11",
    "webpack-dev-server": "^3.10.3"
  }

Now we have all the dependancies but we have to use the dependancies or not.
now for that we have to create babel side one file for configuration.
the next one is what? webpack side one configuration or not...
1)webpack.config.js //we have to mention this file at the time of building..
2).babelrc //babelrc is babel relative configuration

.babelrc
=========
{
        "presets": [
            "env",
            "react"
        ]
}


come to the configuration. from html side who is the root file? index.html.
so that here what we are doing is - all our code we always have to write inside src folder.
by default it will refer from that one only. lets create a src folder inside myfirstwebpackapp.
Now create a file index.html inside src. 
Also create a file index.js inside src.
This index.html file is the root file you have to tell. How we can tell?

For that purpose one plugin is there as we already discussed i.e.html-webpack-plugin 
Can we use this one?This all configuration we have to write inside webpack.config.js.
How we can get the html-webpack-plugin  inside webpack.cofig.js?

//webpack.config.js
var hwp = require('html-webpack-plugin');
Now we have to tell the index.html template file is the root file. Use command below to set it.

Now hwp is a class that takes an object as an argument which has a property called template.
Against template we need to store the exact file name for root file.
var htmlEntryPlugin = new hwp({
    template : 'src/index.html'
})

//for different different environments we can create different different webpack config files.
prod - one file index.html
dev - another index.html file
etc..

module.exports is what we are exporting something.
through out the application we are going to represent like what? one module..
so key is module ..
module contains what? // js files are , css files are there , jsx files are thr
Now we want to refer all these files. 
If we want to refer all these files.. how can we refer?
All the files ending with .js , how can we get it?
By using regular expressions we can get it or not..

so that here we have the key called as test and in value all js files how can we get it?
key : /\.js$/  (0 to any)
Do we want the node_modules? no..now exclude node_modules
now we need a loader caled babel-loader. lets add that as well.

i want the css files as well.
add as shown below...

	
//webpack.config.js
====================
var hwp=require('html-webpack-plugin');

var htmlEntryPlugin=new hwp({
    template:'src/index.html'
})

module.exports={
    module:{
        rules:[
        {
            test:/\.js$/,
            exclude:/node_modules/,
            loader:['babel-loader']
        },
        {
            test:/\.css$/,
            loader:['style-loader','css-loader']
        }
    ]
   },
    plugins:[htmlEntryPlugin]
}


Now once all the configuration are done lets start with the actual coding.
Coming to the index.html it should have the container or not?
So lets add a div <body><div id="root"></div></body>

Ok at the time of loading this particular container we need a specific component or not?
from the js side which is the root file? index.js or not?
so that can we come to the index.js?
Here What we want? component code right.. can we create the component?How can we create the component?
//import react,react-dom
//as part of clean separation move the exact component code to App and import the same here
//index.js should have only ReactDOM.render() in this file
//import the styles.css

index.js
========
import React from "react";
import ReactDOM from "react-dom";
import App from "./App";
import "./styles.css";

ReactDOM.render(<App />, document.getElementById("root"))


Create App.js file and create the component code here..basic component. importing React is most.. and mandatory
App.js
======
import React from 'react';
const App = () => {
    return <div>Hello World</div>
}
export default App;



Now as everything is done we need to start the server or not..
for that we have webpack-cli or not..
somewhere wehave to put the start command or not..
where we can put it?? for that we have scripts in package.json
within the scripts we have to write the command. for start or build or whatever it is..
So add a key as start or anything of ur choice and then command to actual start the server..
package.json
=============
{
...
  "scripts": {
    "test": "echo \"Error: no test specified\" && exit 1",
    "start": "webpack-dev-server --development --open"
  },
...
}


Now lets start the server by using command npm start..
we are getting error -  babel-loader@8 requires Babel 7.x (the package '@babel/core'). If you'd like to use Babel 6.x ('babel-core'), you should install 'babel-loader@7'
lets fix this by changing the version of babel-loader from 8 to 7.
npm i babel-loader@7 --save-dev

now check again npm start
compile successfully done.


Now what next? we will create same application?
header is required, footer is required,and menu is required.
but we were using routing which component in the past? HashRouter or not..
in the url "#" was there..
without hash also we can maintain the routing. now without hash(#) we want.
and one more thing..home,about,contact,service how we designed this components?
we have created 4 links(using anchor tags) inside a div.. and each link or anchor href is pointing to a path to match with the routes.
By default my application expecting behaviour is what? navigating or not on click of links..
But i dont anchor tags..i need list items to look like menu.
So now instead of anchor we will take li.

how many components are required? same like previous application.
Header
Footer
Menu

So now lets create these 3 components by adding manually to application
create 3 files - Header.js,Footer.js,Menu.js inside src

import these into App.js the root file.. and instantiate in return().

App.js
======
import React from 'react';
import Header from './Header';
import Footer from './Footer';
import Menu from './Menu';

const App = () => {
    return <React.Fragment>
        <Header />
        <Menu />
        <Footer />
    </React.Fragment>
}
export default App;



Header.js
==========
import React from 'react';
const Header=()=>{
    return <div className="header">My react webapplciation</div>
}

export default Header;


Footer.js
=========
import React from 'react';
const Footer=()=>{
    return <div className="footer">&copy; rights belongs to me</div>
}

export default Footer;


Menu.js
========
import React from 'react';

const Menu = () => {
    return <div className="menu">
        <ul>
            <li>Home</li>
            <li>About</li>
            <li>Contact</li>
        </ul>
    </div>
}
        
export default Menu;

index.js
=========
import App from "./App";
import ReactDOM from "react-dom";
import React from "react";
import App from "styles.css";

ReactDOM.render(<App />, document.getElementById('root'))


Lets add some css for exact look and feel.
We can import this using - import "style.css"
styles.css
===========
.header{
    font-size: 60px;
    font-weight: bold;
    font-style: italic;
    text-align: center;
    background:yellow;
}
body{
    margin: 0px;
}
.footer{
    position: fixed;
    bottom: 0px;
    text-align: center;
    width: 100%;
    background: yellow;
    font-size: 20px;
    font-weight: bold;
    font-style: italic;
}
ul{
    list-style-type: none;
    margin: 0;
    text-align: right;
    line-height: 40px;
    background: yellowgreen
}
ul>li{
    display: inline;
    margin-right: 15px;
    font-size: 18px;
    font-weight: bold;
    font-style: italic;
    letter-spacing: 3px;
    color:white !important;
}


Now refresh the browser and see how it looks.
Menus are coming - Home, About and Contact..but there is no link on that..We need to add that.
Also we have to create 3 components - Home,About and Contact manually 3 files we create..
lets create these components.
create 3 files - Home.js,About.js,Contact.js inside src

Home.js
=======
import React from "react"

const Home = () => {
	return <h1>Home Page</h1>
}
export default Home;


About.js
=========
import React from "react";

const About = () => {
    return <h1>About Page</h1>
}
export default About;


Contact.js
===========
import React from "react";

const Contact = () => {
    return <h1>Contact Page</h1>
}
export default Contact;



Now we have to link these components to the menu items(the li's) inside Menu.js
So lets import all these components.

import Home from "./Home";
import About from "./About";
import Contact from "./Contact";


Here we have to use react-router-dom library for routing or not.. as used earlier.
yes..then lets import that as well.

lets install that. it is required even after build in production env. 
So lets not use --save-dev. 
We will use only --save
npm i react-router-dom --save


Once it is downloaded lets import it inside Menu.js
1. In the past we were using HashRouter or not. Now lets use BrowserRouter.
	BroswerRouter module is to handle without hash routing..

2. Next if we want to map which component we are using?//Route
   this is common for both
lets get these library in import..
import { BrowserRouter, Route } from 'react-router-dom'

Lets add these Routes after <ul></ul> in Menu.js
				<Route path="/home" component={Home} />
                <Route path="/" exact component={Home} />
                <Route path="/about" component={About} />
                <Route path="/contact" component={Contact} />

Now for this particular url which component you have to load.. we have to map it or not..

i.e. from the li to specific route tag
but the li's are not links. Can we make it as links first.
earlier we had used anchor tags and used href for same.
But with li how can we add links?for that react-router-dom library have one more component is there that is Link.
lets import that as well.
import { BrowserRouter, Route , Link} from 'react-router-dom'

//if any normal text is there and we want to make it as link , we can wrap text with <Link>text</Link> component.
//Now lets keep all these code in <BrowserRouter></BrowserRouter> same like <HashRouter></HashRouter>
//<BrowserRouter> this also expects one parent div which should hold all the contents as child..

Now the li's are appearing as links.. but we still need to map with routes link..whatever we had given for routes.
SO for that the Link tag comes with an attribute "to" which holds the url pattern

so the Menu.js will look like : 

Menu.js
========
import React from 'react';
import {BrowserRouter,Route,Link} from "react-router-dom"
import Home from "./Home";
import About from "./About";
import Contact from "./Contact";

const Menu = () => {
    return <div className="menu">
        <BrowserRouter>
        <div>
                <ul>
                    <li><Link to="/home">Home</Link></li>
                    <li><Link to="/about">About</Link></li>
                    <li><Link to="/contact">Contact</Link></li>
                </ul>
                <Route path="/home" component={Home} />
                <Route path="/" exact component={Home} />
                <Route path="/about" component={About} />
                <Route path="/contact" component={Contact} />
        </div>
        </BrowserRouter>
    </div>
}
        
export default Menu;


Now refresh the page..my development is completed.
Now in browser we should see three section - header,menu and footer
menu should have 3 links - Home, About and Contact - all right aligned
On click of Home - should render Home Component
On click of About - should render About Component
On click of Contact - should render Contact Component

Till this it is working...

lets move to our next requirement.
now we have to build our code or not.

create-react-app
================
If we create our application by using create-react-app how we can run this application? By using npm start or not.
If we have to build this code then we have a command called - npm run-script build
A build folder will be created in the application. 
We have created multiple components for this application..
But Within this build folder not all the components are visible only one or 2 files going to be created.
chunk i there, chunk-license is there, chunk-map is there
build contains css, js
now go to the createreactapp project - myfirstreactapp and check if build folder is created or not..
now you can see build folder.
Inside  the build folder - under css and js we see few files. 
Here the .map files contains the source code.
We dont need the source files for production. So lets delete these.
Now this is the build or not.. the build folder..

Moving my code from local to my server is nothing but building/deployment or not



***************************************************************************************************************************************
17/02/20 
***************************************************************************************************************************************
4:10
Now the next requirement is within the Home Page- we need a carousal.
For that we have to send a request to the server. And I have to prepare a list.
in the past you prepared like what - one table you have prepared. reusable table.
Now i want to prepare a reusable list.
Now I have a button is there with Home component. In home page i need the carousal.
In the next menu About - i need a button - getUsers - i should get that users from server.
Once we get that users from the server can we prepare the list? like bullet list..
that list should be the reusable list. 
In the past we were using what? TableComp or not?
We created TableComp only one time and we were using the TableComp for users as well as for photos.

Same like that we will now create a reusable list - whether it is for displaying users or displaying photos.
At the same time we have to create a carousal that should also be reusable.
That means we have to create one carousal component separately and one list component separately and we can use these components wherever we want.
Which type you want to pass it just pass it..
Now if I click on this "About" link - just i want to send request to the server to get the users. 
Lets first complete that list.
Ok now i dont want axios one..i want jquery one..at the same time i want javascript also.
One request by using jquery. 
Another request by using core javascript. 
How we can start?

First of all we will install jquery or not?How we can install?
	npm i jquery --save
It is dev dependancy or prod dependancy? prod right..so lets use --save 
Once you build successfully - your request is going like what? using jquery or not?
If jquery is not there then at that time it is going to give error. 
So we have to consider it as prod dependancy.

Ok can you come to my About.js?
Here i want a simple button..
Once I click on the button one request should go to the server, get the data and prepare one list component.
Give this data to the list component...in Users
And similarly we have one tab Photos.. there we have to get the photos and use the same List component.

If we have to send a request minimum what all things are required?
//one url and method type is required or not..
//first we will write the service..one class or not.
Why because i want to write like that ajax code ..that ajax code we want to use in future also.
so that can you write only one time and reuse that.
For that we are using what ? service or not..
see your view -> view to component(jsx) -> jsx to service -> service to server -> server to database -> database to webpack

lets create a service.. ServerCall.js
This is going to be a normal javascript core class. ES6 class
More than that nothing else..
//class ServerCall{}
//write a method inside class ServerCall to send a request by using jquery - function fnSendGetReqJquery(url){}
//write a method one more method inside class ServerCall to send a request by using js - function fnSendGetReqJS(url){}
//based on our real time requirement we can do it..
//If it is a get request what all things are required - url and method type or not?
//If it is a get request always will be get then why we have to mention the method type..lets skip that and only pass url..
//now jquery is required or not..lets import that jquery first.
	//import $ from 'jquery';
//How we can use jquery library to make a get request??
//$.get(url) or not? What this will return? A promise or not?
//Do you want me to handle here in the Service class or return the promise to specific js file and handle the response there?
//so lets return this promise..

//lets write the javascript get request as well..this function also takes url as argument or not? yes..
//This js function also returns me a promise only. either success response or failure response. either resolve or reject
//my get method written by jquery.. They are going to handle our ajax code or not.
//In jquery ajax call it is returning a promise..we do not have to code explicitly.

//but in case of javascript normal call we have to write everything or not? Manually we have to return a promise object..
//We have to write XMLHttpRequest..This one only my browser can understand in javascript and send request to the server..
//So now we have to write our own code inside fnSendGetReqJS(url){}...

ServerCall.js
===============
import $ from 'jquery';
class ServerCall{
  	fnSendGetReqJquery(url){
        return $.get(url);
    }
    fnSendGetReqJS(url) {
    
    	//code place1..
    	//if we write the code here what happens?
    	//if it is asynchronous then what? Before getting the response we are going to return the promise or not..
    	//So this is not a proper place to add XMLHttpReq code. 
    	
    	return new Promise();
    	//code place2..
    	//if we write the code here what happens?
    	//after return statement if we put any statement then that time those statements are not executed.
    	//So this is also not a correct place to add XMLHttpReq code.
	}
}


ServerCall.js
===============
import $ from 'jquery';
class ServerCall{
	fnSendGetReqJquery(url){
        return $.get(url);
    }
    fnSendGetReqJS(url) {
    	return new Promise(function(){
    		//code place3..
			//as before return and after return are the not correct places..
			//then where we can write? we have to write functionality or not?
			//for adding functionality we have to write a function or not..
			//so that promise is providing a function and asking us to use that function.
			//at the creating object only they are expecting a function - callback function...
			//lets pass a callback function
			//at the time of creating promise first what it is going to do?
			//first it is going to execute its argument..wat is the argument? function
			//once my function is completed then only it is going to return my promise or not..
			//now this is the function and we have to write our code..
			what code we have to write? XMLHttpRequest only or not..
			lets write that..
		
			var httpObj = new XMLHttpRequest();
            httpObj.open('get',url,true);
            httpObj.send();
            httpObj.onload = function(){

            }
            httpObj.onerror = function () {

            }
    	
    	});

	}
}

Now what we have to do? We have to give the result back or not?
how we can give the result back? first can we get the result ? 
Then we can think about how we can give it back..
//within onload() we will get the response using httpObj.responseText
//my js always takes string as input and as well as string as output.
//so thatcan we do one thing? Can we convert this one? So that what we will use?
//lets use JSON.parse(httpObj.responseText)
//now can we give this response back as a success callback?
//for that use resolve(JSON.parse(httpObj.responseText))

//ServerCall.js
================
import $ from 'jquery';
class ServerCall{
    fnSendGetReqJquery(url){
        return $.get(url);
    }

    fnSendGetReqJS(url) {
        return new Promise(function(){
            var httpObj = new XMLHttpRequest();
            httpObj.open('get',url,true);
            httpObj.send();
            httpObj.onload = function(){
                var res = httpObj.responseText;
                res = JSON.parse(res);
                resolve(res);
            }
            httpObj.onerror = function () {
                reject([]);
            }
        });
    }
}

Here also in webpack project we can use create-react-component to create components for a clean separation..
Let call that function that we have created in ServerCall.js to make get request.
From which file we have to do? About.js or not..And we will receive the data and we have to store in a variable or not..
Now as About.js is a functional component that time we are not able to maintain the state or not..before hooks.
that time what we need to do?
Can we convert this About.js to a class component?
1. Change About.js and make it a class component...
2. Add a state variable called 'data' and initialise to empty array [] inside constructor
3. Change the state variable 'data' when we click on button and call the function fnGetUsers()
   fnGetUsers() now calls a method fnSendGetReqJquery() from ServerCall class to send a get request to server.
   Hence import ServerCall in this file.. 
   export the ServerCall class so that we can import it..
   make all method inside ServerCall are static as we will be using this methods multiple times.. 
   	and instantiating ServerCall class every-time is not a good idea. We can just use the classname i.e. ServerCall.fnSendGetReqJquery()
   once the response is back to About component fnGetUsers() method it will update the state..
4. Maintain the base url in ServerCall.js file.. just after import outside class declaration.
	const baseURL = "https://jsonplaceholder.typicode.com"
	inside both fnSendGetReqJquery() and fnSendGetReqJS() - inside the body change the url to baseurl + url
5. From About.js - fnGetUsers() where we are making the service call..please pass the relative url..i.e. '/users' which will get appended to baseurl
6. Now tell me one thing..this fnSendGetReqJquery() returns what? promise or not..to fnGetUsers() where we are calling this method -fnSendGetReqJquery()
   How we can consume it then? Using then() function or not..and this promise returns me success or failure. so lets add this code..
   So handle success callback and error callback both..
7. Now as we have the response data what we have to do? We have to update the state or not..update 'data' with response
   put a debugger in res callback to check what is the response you are getting based on that you can update the state variable 'data' with that
      

//ServerCall.js
================
import $ from 'jquery';
const baseURL = "https://jsonplaceholder.typicode.com";

export default class ServerCall{
    static fnSendGetReqJquery(url){
        //return $.get(url);
        return $.get(baseURL + url);
    }

    static fnSendGetReqJS(url) {
        return new Promise(function(){
            var httpObj = new XMLHttpRequest();
            //httpObj.open('get',url,true);
            httpObj.open('get', baseURL + url,true);
            httpObj.send();
            httpObj.onload = function(){
                var res = httpObj.responseText;
                res = JSON.parse(res);
                resolve(res);
            }
            httpObj.onerror = function () {
                resolve([]);
            }
        });
    }
}


About.js
=========
import React from 'react';
import ServerCall from './ServerCall';

class About extends React.Component{
	constructor(){
		super();
		this.state = {
			'data' : []
		}
	}
	
	fnGetUsers(){
	        ServerCall.fnSendGetReqJquery('/users').then((res)=>{
	        //debugger;
            this.setState({
                data:res
            })
        }, (err) => {
            this.setState({
                data: err
            })
        })

	}
	render(){
		return <div>
            <input type="button" value='get users' onClick={this.fnGetUsers.bind(this)} />
		 </div>
	}
}


8. Now i have the data. I want to prepare a reusable list.. with id, name and email..
   How we can write?
   
   	one list to another list what is the difference?
   	My data is different right..
   	Here headers are not there.. only data varies
   	If it is a data, for example this is the data. 
   	id = 1 and name="soumya"
   	id = 2and name="stahl"

	Now with this particular data how many elements are there that many list we have to create or not?
	Yes or no?
	Each and every list contains what?
	List items or not?
	So this data how many elements are there that many uls we have to create
	under this ul how many list items are there?
	i dont know that one again
	In this one i want 5 list items
	In the next i want 3 list items
	I dont know how many list items we have to create.
	
	In the past example if you see based on data what you have created?
	table rows..
	Each row contains how many td how you know that one?
	Based on your keys or not?
	Why you need your keys?
	If your key is not there I am not able to take this data right..
	If you want to take this particular object data ok.. each and every time my object is coming to me
	Within this object there has 10 properties are there..
	I want only 5 properties..
	Can you give 5 properties to me?
	If you give the 5 keys then at that time I am going to prepare how many list items?
	5 list items or not?
	
	Ok so this ul is repeated based on the data..
	Within that data how many items are there that many ul are going to be created
	This list items are created based on your keys or not?
	How many keys you are going to pass that many list items is created thats it..
	
	That means your component is expecting which data from outside?
	my data + keys or not?
	
	In the past for tables you were passing data + header + keys
	Now I want the data to prepare the ul
	I want the keys to prepare the li
	
	Any component we create if it is a functional or class component does not matter, my react library is required..
	So we are expecting data and keys from outside.
	So a class component how it is going to receive these whatever coming from outside?
	using this.props or not?
	
	Now lets destruct that one - const {data,keys} = this.props
	Now we have to use to prepare ul and li
	
	create-react-component ListComp
	
ListComp.js
============
	
import React from 'react';

class ListComp extends React.Component{

    render(){
       const {data,keys}= this.props
        return <React.Fragment>
               {
                   data.map((obj,i)=>{
                       return <ul key={"ul"+i}>
                           {
                               keys.map((k,index)=>{
                                    return <li key={"li"+index}>{obj[k]}</li>
                               })
                           } 
                       </ul>
                   })
               }
        </React.Fragment>
    }
}

export default ListComp;

	
The above ListComp we are going to use inside About.js where we fetched the data.
Lets display it. Check the render() method..
Lets use conditional rendering to show ListComp based on the data.length
If data is there then only show it
Also ListComp is expecting two props from outside..
Lets pass both data and key i.e. <ListComp data={data} keys={keys} />

Note we have added keys to this.state inside constructor
How we will get to know these keys?
This is a get request.. We can check the response in browser or some rest client what response is cming
Based on the response the keys which we want to show..

About.js
=========
import React from 'react';
import ServerCall from './ServerCall';
import ListComp from './ListComp';

class About extends React.Component{
	constructor(){
		super();
		this.state = {
 			'data':[],
            'keys':['id','name','email']
		}
	}
	
	fnGetUsers(){
	        ServerCall.fnSendGetReqJquery('/users').then((res)=>{
	        //debugger;
            this.setState({
                data:res
            })
        }, (err) => {
            this.setState({
                data: err
            })
        })

	}
	render(){
		const {data, keys} = this.state
		return <div>
        		<h1>users</h1>
        		<input type='button' value='get users' onClick={this.fnGetUsers.bind(this)} />
        		{	data.length != 0 && <ListComp data={data} keys={keys} /> }
        </div>
	}
}



9. Now we can the ListComp for photos also
   Sorry photos not there. that is contact..
   At the time of onload() only i want 
   Then?
   We can use componentDidMount()
   
Contact.js
===========
import React from 'react';
import ServerCall from './ServerCall';
import ListComp from './ListComp';
class Contact extends React.Component{
    constructor(){
        super();
        this.state={
            'data':[],
            'keys':['id','title','url']
        }
    }
    componentDidMount(){
        ServerCall.fnSendGetReqJquery('photos')
        .then((res)=>{
            this.setState({
                'data':res
            })
        })
        .catch((res)=>{
            this.setState({
                'data':[]
            })
        })
    }
    render(){
        const {data,keys}=this.state;
        return (<div>
           <h1>Photos</h1>
           {
               data.length != 0 && <ListComp data={data} keys={keys} />
           }
        </div>)
    }
}

export default Contact;


10. Next is come to the Home component
Here I need the Carousel
I have 3 images are there
Ok I ant to display like first image..after 3 seconds 2nd image and after 3 seconds 3rd image..
How we can write?
Lets use setInterval()..
Why because I want to perform one operation on each and every 3 seconds continuously
When we go for setTimeout()? only one time use right..
So in our case we will use setInterval() and not setTimeout()

You can take one div or something
Give the background color for this particular div..
Give one background image for this particular diiv
Like this how many divs are required? 3 divs

Now if you want to put this content within the carousel can you tell me how my data object is going to look like?
Ok first time my Sachin is coming ..I want the text "Sachin", runs as 20000
Once again it is going to repeat for Dhoni..I want the text "Dhoni", runs as 30000
Once again it is going to repeat for Kohli..I want the text "Kohli", runs as 40000

'data':[
                {
                    'path':s,
                    'text1':'Sachin',
                    'text2':20000
                },
                {
                    'path':d,
                    'text1':'Dhoni',
                    'text2':10000,
                },
                {
                    'path':k,
                    'text1':'Kohli',
                    'text2':13000,
                }
            ]

So for Sachin which data is required?his image path, his name, his runs or not?
SO we can take like path, text1,text2 etc..
So we are going to create one object for Sachin..
Like that one object for Dhoni
One object for Kohli

here how many objects are there that many carousal components we have to create
That item is going to change for each and every three second

Ok i am going to think about it later
Lets first create only one div and prepare its contents..
Later we will see for rest objects,..

So i have one div is there 
Within div one image is there
ANd we have 2 text is there

Similarly we have to prepare for 3 images..
After 3 seconds my first image should be disabled
And my second image has to load.
After 3 seconds again second image has to be disabled and 3rd one should load..
Again after 3 seconds again it loads the very first image...
So it has to load images on each and every 3 seconds recursively

Lets crate Carousal component
Carousal.js
============
import React from 'react';
import s from './sachin.jpg';
import d from './dhoni.jpg';
import k from './kohli.jpg';

class Carosual extends React.Component{
 	constructor(){
        super();
        this.state={
            'slide':0,
            
            'data':[
                {
                    'path':s,
                    'text1':'Sachin',
                    'text2':20000
                },
                {
                    'path':d,
                    'text1':'Dhoni',
                    'text2':10000,
                },
                {
                    'path':k,
                    'text1':'Kohli',
                    'text2':13000,
                }
            ]
        }
        
    render(){
        return <React.Fragment>
             {
                 this.state.data.map((obj,i)=>{
                       return <div  className="carosual-div" style={{background:`url(${obj.path})`}} >
                                <h1>{obj.text1}</h1>
                                <h3>{obj.text2}</h3>
                       </div>
                 })
             }

        </React.Fragment>
    }
}

export default Carosual;

Now import this within Home Component
Home.js
=========
import React from 'react';
import Carosual from './Carosual';
const Home =()=>{
    return  <div>
        <Carosual />
    </div>
}

export default Home;


Now if we refresh at least three image should display...
Save everything and refresh the browser.


For image you need to add file-loader 
Lets install that add it to webpack config file

npm i file-loader --save-dev

webpack.config.js
==================
var hwp = require('html-webpack-plugin');

var htmlEntryPlugin = new hwp({
    template: 'src/index.html'
})

module.exports = {
    module: {
        rules: [
            {
                test: /\.js$/,
                exclude: /node_modules/,
                loader: ['babel-loader']
            },
            {
                test: /\.css$/,
                loader: ['style-loader', 'css-loader']
            },
            {
                test: /\.jpeg$/,
                loader: ['file-loader']
            }
        ]
    },
    plugins: [htmlEntryPlugin]
}


lets maintain a state variable as 0 initial time.
Next i have to map to images
if 0 load first image
if 1 load second
if 2 load third

so lets add this state variable within the constructor 
And also add a setInterval() to change its value..

Carousal.js
============
import React from 'react';
import s from './sachin.jpg';
import d from './dhoni.jpg';
import k from './kohli.jpg';

class Carosual extends React.Component{
 	constructor(){
        super();
        this.state={
            'slide':0,
            
            'data':[
                {
                    'path':s,
                    'text1':'Sachin',
                    'text2':20000
                },
                {
                    'path':d,
                    'text1':'Dhoni',
                    'text2':10000,
                },
                {
                    'path':k,
                    'text1':'Kohli',
                    'text2':13000,
                }
            ]
        }
        
        setInterval(() => {
            this.setState({
                slide:this.state.slide+1
            })
            if(this.state.slide == 3){
                this.setState({
                    slide:0
                })
            }
        }, 3000);

    }
        
    render(){
        return <React.Fragment>
             {
                 this.state.data.map((obj,i)=>{
                    return <div  className={this.state.slide == i ? 'disp-block carosual-div':'disp-none carosual-div'} style={{background:`url(${obj.path})`}} >
                                <h1>{obj.text1}</h1>
                                <h3>{obj.text2}</h3>
                       </div>
                 })
             }

        </React.Fragment>
    }
}

export default Carosual;
	

//<div  className={this.state.slide == i ? 'disp-block carosual-div':'disp-none carosual-div'} style={{background:`url(${obj.path})`}} >
//This conditional rendering means if this.state.slide is index for instance if it is 0 then first image is going to display..
//Rest 2 we are hiding here.. using disp-none
//Because in the render() we are preparing 3 divs using data.map()
//So we have to hide 2 divs and show only one div..
//Now refresh page...carousal should work..


***************************************************************************************************************************************
18/02/20 
***************************************************************************************************************************************

The next requirement is search operation
We have an input textbox
And some data is there is down below

1. Sachin
2. Virat
3. Dhoni
4. Jadeja


If I put like Kapil then Kapil should be visible
If I put like Raina then Raina should be visible

How we can build?
This component should be reusable..
Which data we pass it should be visible

Lets add one more tab like search for this requirement
Lets add it menu.js

Menu.js
========
import React from 'react';
import Home from './Home';
import About from './About';
import Contact from './Contact';
import Search from './Search';
import { BrowserRouter, Route, Link, Switch } from 'react-router-dom'
class Menu extends React.Component {
    constructor(){
        super();
    }
    render(){
      return <div className="menu">
        <BrowserRouter>
            <div>
                <ul>
                    <li><Link to="/home">Home</Link></li>
                    <li><Link to="/about">About</Link></li>
                    <li><Link to="/contact">Contact</Link></li>
                    <li><Link to="/search">Search</Link></li>
                </ul>
                <Switch>
                    <Route path="/home" exact component={Home} />
                    <Route path="/" exact component={Home} />
                    <Route path="/about" component={About} />
                    <Route path="/contact" component={Contact} />
                    <Route path="/search" component={Search} />
                </Switch>
            </div>
        </BrowserRouter>

    </div>
    }
}
export default Menu;


Lets create the component Search component
we have the data..we have to prepare the list..

Search.js
==========
import React from 'react';
class Search extends React.Component{
    constructor(){
        super();
        this.state={
            'orginalData':['sachin','dhoni','dravid','sourav','uv','kohli','bhmra','kartic'],
            'data':['sachin','dhoni','dravid','sourav','uv','kohli','bhmra','kartic']
        }
    }
    render(){
        return <div>
            <input />
            <ol>
                {
                    this.state.data.map((v,i)=>{
                         return <li key={'search'+i}>{v}</li>
                    })
                }
            </ol>
        </div>
    }
}
export default Search;


** data - this data we want to show in list format..

Do you know debouncing and throttling in javascript?

You want to perform a search operation..
Your data is present where?//database

I am going to enter like "L"
Then one request should go to the server and search "L" text from the database or not?
For example if I put "Lenevo Laptops" , can you tell me how many requests are going?
How many letters are there that many requests should go..
Is this recommended one?

Ok for example there are 10 letters are there.
How many requests are going to the server?
10 requests are going..
Not only you there are so many people going to hit this server or not?
Because of the "Lenevo Laptops" 14 characters are there, you are gong to send request to server 14 times
Like first request "L"
Second Request "Le"
Third Request "Len"
Fourth Request "Lene"
.....
.....
Fourteenth Request "Lenevo Laptops"

So this is not recommended one
So how we can handle this one?
First tell me you are rendering some text here..
Then only we are going to send the request to server or not?

At the time of putting some text here then at that time some method should execute or not? in general..
Now I am going to write like fnSearchPoducts()
This method is going to trigger when?
At the time entering some text or not?
How you are going to call this method at the time of entering some text?
We will onChange event or not?
we will write like 
	<input type="text" onChange={this.fnSearchPoducts} /> 

Now for each and every keyup this method is going to be trigger or not?
This method() responsibility is what?
Should have to send one request to the server and get the data or not?
This is the flow or not?
So directly making the server call from onChange event is recommended or not recommended?
//not recommended


Suppose first one key i entered
After that one more key i entered
From the first key enter to second key enter some lag is there or not?
Some gap is there or not?
Within how much time you are going to enter multiple of key ups?
fraction of milliseconds...

Now I dont want to take if the lag is like 1ms or something
I dont want to send the request to the server
Now I am going to think like if my key up to key up gap is like 300ms then only I am going to send the request to server
Now think I am going to type "Lenevo Laptop"
I type L and then e and then n and then e...
And every time gap is 1ms..

But when after Lenevo When I have to type Laptop there is a lag or not...
Think like that is 300ms

So if my keyup to keyup distance is 300ms that is the time difference then only can we send the request to the server?

Now in this case instead of going for each and everyone my request is going like what? For Lenevo only or not?
Like this i want to write the code..


Search.js
==========
import React from 'react';
class Search extends React.Component{
    constructor(){
        super();
        this.state={
            'orginalData':['sachin','dhoni','dravid','sourav','uv','kohli','bhmra','kartic'],
            'data':['sachin','dhoni','dravid','sourav','uv','kohli','bhmra','kartic']
        }
        this.fnGetProducts = this.fnGetProducts.bind(this)
    }
     fnGetProducts(event){
     	console.log("search",event.target.value);
     }
    render(){
        return <div>
            <input onKeyUp={this.fnGetProducts}/>
            <ol>
                {
                    this.state.data.map((v,i)=>{
                         return <li key={'search'+i}>{v}</li>
                    })
                }
            </ol>
        </div>
    }
}
export default Search;


Now in the above case for each and every type the method is getting triggered..
and one request is going..think like that you already wrote logic to make server call from inside of this method
But  i dont like this one..

I am going to enter like lenevo laptop
If I am entering like lenevo l to e interval is suppose 2ms
but i dnt want to send request to server if the difference in time or lag from one key up to another key up is 2ms.
We can mention that like what ag we want..
I have to handle this using debouncing,..

We will see how we can do this...
Now you have to call this method fnGetProducts()? Or some other better method you want to write?
Some better method...
Dont put directly this method..fnGetProducts()
But ultimately we have to call this method ie. fnGetProducts() or not?
But dont put directly on keyup event

So lets write a better function...
Now this better should be called from where?
on key up or not?
Lets call from keyup..
Now instead of <input onKeyUp={this.fnGetProducts} /> write below..
Here this.betterFn is what? It must be a function..keyup is expecting a function
//<input onKeyUp={this.betterFn}  />











***************************************************************************************************************************************
19/02/20 
***************************************************************************************************************************************









 



***************************************************************************************************************************************
20/02/20 
***************************************************************************************************************************************
19:11
//react hooks
//How many types of components are there so far?
//1.class 2.functional 
//before 16.8 version, whatever my class can do that is not done by my functional component..
//So that before 16.8, what is not done means.. my class component extra things what it contains..

//we have the render() method is there within we have the return statement. 
	class fn extends React.Component{
		render(){
			return <div>Hello</div>
		}
	}
//The same thing is there within the functional component or not.. 
	const fn = () => {
		return <div> Hello </div>
	}


//extra thing what a class component contains??
//My class is extending from React.Component..
//but in case of functional components my "this" is not there. "this" is not created.
//At the time of loading this class component my object "this" is created..
//because of "this", my "this" object contains what? We can use multiple things or not?
//state we can use, props we can use..from the react component whatever features are there all fatures we can use it or not..
//life cycle methods and everything..


//before 16.8 , for functional component "this" was not here, 
	so i was not able to use state..i was not able to use props.. or form text.. nothing i was able to use..
	my life cycle methods also..
//so before 16.8 we call the functional components as stateless components..
//simply why because we did not use state or something here..
//my class components at the same time we call it as stateful components.
//From 16.8 onwards they introduced like - for this particular functional components they adding some extra features..
//that extra features is nothing but whatever my class can do now onwards the same things done by my functional components also.
//how we can do that? means we can maintain the state.. we can write the lifecycle methods.. everything we can handle.
//just take one example - within the stateful component - class component. And we are going to convert that one into our functional component
//So lets take one example for our class component first..
//I click on the button then at that time I want to update my state variable..take within the class component like below..
//My requirement is like i have a count variable and i want to update it on button click..
//In class component how we can do that? 

//steps
//import all the scripts - babel,react,react-dom inside the html file..
//add a container div - <div id="root"></div>
//basically take a variable count as a state variable inside constructor and set initial value to zero.
//And on button onClick add a method and inside the method body write setState() to update the count variable..
//And render the count variable inside render() - return  as {this.state.count}

useState.html
==============
<script src ="react.development.js"></script>
<script src="react-dom.development.js"></script>
<script src="babel.js"></script>
<div id="root"></div>


<script type="text/babel">
    class App extends React.Component {
        constructor() {
            super();
            this.state = {
                count: 0
            }
        }
        fnUpdateCount(){
            this.setState({ count : this.state.count + 1})
        }
        render(){
            return <div>
                <input type="button" value="count" onClick={this.fnUpdateCount.bind(this)} />
                <h1>{this.state.count}</h1>
                </div>
        }
    }
    ReactDOM.render(<App/> , document.getElementById("root"))
</script>

================================================================================================================================================================
Now the same requirement now i have to do in functional component..
How we can do that??
//import these scripts mandatory..
//create the container div..
//Now create the functional component by using arrow function.
  In case of class component - render() method returns the content.. 
  similarly here in functional component also we need to return the content.
  We will do that using return directly..no render() method
  So here also whatever we return that will be only visible to the end user or not?
  
//render the functional component is container..using ReactDOM.render(<AppF /> , document.getElementById("root"))
useState.html
==============
<script src ="react.development.js"></script>
<script src="react-dom.development.js"></script>
<script src="babel.js"></script>
<div id="root"></div>

const AppF  = () => {
	return <div> </div>
}

//Next is what ?We have to create a button and add the onclick method to same..
//And at same time display default count value as zero or not??
//In my class component how we set the default value for count? Using a state variable or not? inside constructor we have done that..
//Now here in case of functional component we dont have constructor..so leave that..
//but how can we initialise a state variable??Here we have to create a state variable count and initialise it with zero.
//but in functional component my "this.state" is not available. my "this" only is not available..that time how we are going to get the state?
	//class component - if my "this" is available then at that time my state is coming from where?//React.Component or not?
 //functional component - here we have to create a state variable and initialise it with zero.
 //for that purpose my react people they are providing one library called react hook..one method called "useState()".
 //useState() always takes only one value.
 //from where we can import this useState hook? //from "react" only..
 //all hooks are methods only. how can we use that one?
 //lets import that..
 	import {useState} from 'react';
 //useState is from my react library..this is the hook to create our state variables..
 //all hooks are methods only..so that can we use this one? How can we use this??
 //useState().. simply u can consider useState() is equal to my this.state = { } in class component constructor.
 //within this "this.state = {} " how many variables you can create? multiple or not?
 //but my useState() is like what? Only one variable we can create here at a time..
 //Now in this particular scenario which variable I want to create? my "count" or not..
 //my useState() is a method which returns an array destruction..array of elements it is going to give.
 //so that how we can take array of elements? using destruction or not..
 //within my array destruction which variable we want? "count" or not?
 //like const [count] = React.useState(0)
 //here one state variable is created with default value zero.
 //so that if you want to give the initial default data to my "count" , by using useState() is the method..how can we pass? using argument or not.. 
 //ok .. we created a state variable whose name is "count" and which is initialised with zero or not by using useState() method or not..
 //now these 2 are identical
 	const [count] = React.useState(0)
  	this.state = { count : 0 } //inside constructor
  
//now within the <h1> what you want to render in functional component? my state variable or not..i.e. count.
//inside class component how we displayed the state variable inside <h1> using "this.state.count" or not..
   i.e. <h1>{this.state.count}</h1>
//But now in functional component we cant use the same. We dont have "this". We will use directly "count"
   i.e. <h1>{count}</h1>
//count is like local variable for this function. You can treat like that..
   Note : hooks can only be called from body of the functional component..
//What is the next one? We have to handle one click event or not..so that how we can write it?
//same as class component only.. only difference is remove "this" from OnClick function as this is not there in functional component.
             <input type="button" value="count" onClick={fnUpdateCount} />

//what is the function name?fnUpdateCount.. can we create the method? how we can create?
   const fnUpdateCount = () =>{ alert(1); }
//At the time of onclick on this button the above method is going to trigger or not?Now my event handler also done..
//within this method what we have done in case of class component?we are updating the state..for that which method we were using??setState() or not..
//setState() was coming from React.Component or not..
//But here this functional component and it is not extending from React.Component. 
//And hence no state , setState() method is available to the functional component.
//Hence we need a setState() method or not..but this.setState() is not available. So what we can do? We need some alternate methods or not..
//we said useState() returns an array destruction..right. What is my variable name? "count" or not?
//To update that count specify one method (your wish any name) - in array destruction as second argument. 
//for ex. give name updateCount
  i.e. const [count, updateCount] = React.useState(0)
  
  Here in above "count" is like a state variable name and
  "updateCount" is like a function that is suposed to updated the state variable "count".
  So here updateCount is like a setState() method equivalent in react class components.
  if updateCount is a method how we can use?? calling updateCount() or not..
  
  In case of class component how we update state? this.setState({count :count+1 })
  we have to mention explicitly the key as "count" as state can hold multiple variables data.. and we have to mention which variable we want to update
  And the value should be the updated value we want to set or not..
  
  But in case of functional component - function updateCount() is only for count..
  we only have only one variable..so no need to mention like key value.
  We can update directly or not? like e.g. updateCount(count+1)
  
  
  Now on click on button it will call fnUpdateCount() . 
  And inside it - it calls the equivalent method of setState() for "count" variable i.e. updateCount()
  And we update the "count" by passing an updated value(previous state value + 1) for count as argument to updateCount()
  
  So now on every button click the count will be incremented by 1.
  
========================================================================================================================================================

//Coming to the next - For example in case of class components how many state variables we were able to create? 
					   any number of state variables or not..
					   So now my requirement is I want to create one more state variable in functional components.
					   How we can create? Once again we have to write the same statement again.. 
					
//Now we are going to create one more variable. 
//Just we are going to write React.useState("soumya") i.e. React.useState() with the default value "Soumya"
//Then next is what.. "soumya" is the default value but for which name? so the state variable name is required or not.
//so my state variable name is suppose "name", to update this "name" what is needed? One method is required or not.
//Can we use a method like "updateName" for updating the state variable "name"..
//e.g. 
	const [name, updateName] = React.useState("soumya")
//like this we can have multiple state variables..
//And these methods like updateName(), updateCount() are the methods responsible to update our state or not..
 
========================================================================================================================================================

//Now suppose my requirement is I have one more button..which should increment the count to 5.
//So in render() - return - 2 buttons - one incrementing count value by 1 on click, and the other incrementing count value to 5.

//example till now - class component
index.html
===========
<script src ="react.development.js"></script>
<script src="react-dom.development.js"></script>
<script src="babel.js"></script>
<div id="root"></div>


<script type="text/babel">
    class App extends React.Component {
        constructor() {
            super();
            this.state = {
                count: 0
            }
        }
        fnUpdateCount(){
            this.setState({ count : this.state.count + 1})
        }
        render(){
            return <div>
                <input type="button" value="count" onClick={this.fnUpdateCount.bind(this)} />
                <h1>{this.state.count}</h1>
                </div>
        }
    }
    ReactDOM.render(<App/> , document.getElementById("root"))
</script>

//Now here on click of button fnUpdateCount() is triggered or not..In this method you have to provide the updated data to the count.
//Now coming to the class component if I click on the new button added I want to add 5 to count. 0 to 5, 5 to 10..
//I dont want to use setState() suppose..
//Can we use for loop to loop 5 times on setState()?
//lets try that out..We have an onclick method. each time it increments count by 1 by using setState()
//But we have another button which should increment by 5 on click of that button.. and we are not allowed to use setState()
//So lets use a for loop to loop 5 times and inside for loop lets use the setState({count : this.state.count +1 })
//So by end of for loop ideally the state variable count should have been updated with 5.
e.g.

index.html
==========
<script src ="react.development.js"></script>
<script src="react-dom.development.js"></script>
<script src="babel.js"></script>
<div id="root"></div>


<script type="text/babel">
    class App extends React.Component {
        constructor() {
            super();
            this.state = {
                count: 0
            }
        }
        fnUpdateCount(){
                this.setState({ count: this.state.count + 1 })
        }
        
        //added to increment count 5 times
        fnUpdateCount5() {
            for (var i = 0; i < 5; i++) {
                this.setState({ count: this.state.count + 1 })
            }
        }
        render(){
            return <div>
                <input type="button" value="incre" onClick={this.fnUpdateCount.bind(this)} />
                 <!--the below button click should increment count to 5 -->
                <input type="button" value="incre5" onClick={this.fnUpdateCount5.bind(this)} />
                <h1>{this.state.count}</h1>
                </div>
        }
    }
    ReactDOM.render(<App/> , document.getElementById("root"))
</script>
 
//But when i click on incre5 it is always incrementing by 1.
//You said like my setState() method is like asynchronous.. How much time it will take to complete this for loop completion?
//in less than milliseconds or not.
//first time it is coming inside for loop while var i = 0 - my setState() method is going to be executed..which value it should take?
  my this.state.count is zero or not..i.e. the initial value..This method goes outside with current value is what ? zero or not..
  How much time it will take to update?? it takes some time..
  ok meanwhile what happens, within or before the updation only the for loop control comes to second var i = 1 and executes setState() again
  once gain my setState() method is triggered and that time my this.state.count is not updated and again will be sent as zero to the setState..
  For the entire for loop it acts the same..
  So 5 times setState() will be called from for loop but all will take zero(0) as value for "this.state.count".
  So 5 times setState() will be called with prev state count as zero(0) + 1
  
  In my react my setState() method gives the same value within the less timing total(less than milliseconds).
  then at that time my updation is done only one time..
  ok so that within the same time is nothing but what less than milliseconds intervals only..
  my update is what ? my "count" is update with same value with what? 1 only or not.
  how many updations are there?5 updations are there.
  if the same value we are trying to update with count within milliseconds time , then at that time its treats like only one operation only
  Then at that time what is my updation value?1 only or not.. So this is the problem.So how we can resolve?
  
  ok..can u tell me setState() syntaxes so far whatever you know..
  1. this.setState({})
  2. this.setState({}, ()=>{})
  3. this.setState(()=>{})
  
Now can we take this.setState(()=>{}); i.e. this.setState() with callback.
This is the callback is nothing but who is going to call? who is going to call this callback?
some other person is going to cal or not..my setState() is going to call or not.. first what happens see...
lets take the same example again with setState() callback function.. 
example below..just modify the fnUpdateCount5() method..

fnUpdateCount5() {
            for (var i = 0; i < 5; i++) {
                this.setState((state)=>{  return {count: state.count + 1 } })
            }
        }
  
We are using this.setState( (state)=>{ //callback function - here we have update our count} ) - callback function in this.setState
And inside this callback function we have to updated our count.. first time my count is what?? zero or not?
First time my loop is coming here..first time my setState() method is going to check if it is a callback function , 
		this function is called by whom? setState() method or not? 
		In the past..we were passing some data. Now this method should called by whom?My setState() or not?
		When this method should call - you know? 
		//note****when no one operate on this particular count, then at that time only this method is going to call. 
		ok first time my count is what? zero..zero one operated? no that time this method is going to call..
		and my method gives the data in argument i.e. state.. to the callback function.
		What is my data? count or not? What is the value? zero which is now updated with what? one or not.. 0+1 = 1
		How much time it will take.. for example 10 milli seconds it is going to take..
		but within 1 millisecond it is coming back to for loop again or not..incrementing loop count to 1.
		When it comes inside for loop and reaches setState() it has to wait for 10milliseconds or not..
			because check above note****when no one is operating on this particular count or state variable, 
			then at that time only this method is going to call.
		that means somebody is operating on this setState() callback function or not..
		somebody operating on the count means what.. it is ging to block that one..
		
		once my operation is completed then only once again it is going to call what??
		this callback method of setState() with updated data..what is my updated data? count is 1 or not?
		1+1 =2 ...within my fraction of seconds only the loop is running but..my count is updated by some other person and it is not completed.
		so that once again it wait for some 9 milliseconds time..
		once my 9milliseconds are completed then at that time it is going to update the count with what ? 2 or not?
		now no one is going to updated..if no one is going to updated then at that time once again my setState() method is going to be call the callback function.
		once again the same thing is happened. each and every time it is going to give the updated count..previous state..
		So we have to use this type of syntax..
		
		
		lets write the code..
		write the for loop inside button onclick method - fnUpdateCount5()
		inside for loop use this.setSate() with callback function..
		fnUpdateCount5(){	
			for (let i = 0; i < 5; i++) {
                this.setState(()=>{ //..code...})
            }
		}
		within the state how many variables are there? any number of variables or not..
		we can update any number of variables or not?yes or no?
		If you want to update any number of variables then at that time how we can?
		we will be using what? one object or not?
		ok so that how we can write it? we can use return {} in the callback function or not.
		we will return the data count i.e. in object format to the callback function. 
		and again the callback function returns the object{} back to my setState() or not i.e. its parent method or not.
		Now my setState() method is going to update the state or not..
		 
		 
****** below fixing issue with setState() callback functional component ******
	
	
	class App extends React.Component {
      	constructor() {
        	super();
        	this.state = {
          		count: 1,
        	};
        	this.fnUpdateCount = this.fnUpdateCount.bind(this);

  		}
  	  	fnUpdateCount() {
        	for (var i = 0; i < 5; i++) {
          		this.setState({
              			count: state.count + 1,
          		});
        	}
      	}
 		render() {
        	return (
          		<div>
            		{this.state.count}
            		<button onClick={this.fnIncre1} value='incre'> incre </button>
          		</div>
        	);
      	}
    }
	//output will be 1
	
	
	
	class App extends React.Component {
      	constructor() {
        	super();
        	this.state = {
          		count: 1,
        	};
        	this.fnUpdateCount = this.fnUpdateCount.bind(this);

  		}
  	  	fnUpdateCount() {
        	for (var i = 0; i < 5; i++) {
          		this.setState((state) => {
            		return {
              			count: state.count + 1,
            		};
          		});
        	}
      	}
 		render() {
        	return (
          		<div>
            		{this.state.count}
            		<button onClick={this.fnIncre1} value='incre'> incre </button>
          		</div>
        	);
      	}
    }
	//output will be 5


 ****** below fixing issue with useState() hook callback functional component ******

  const AppF = () => {
      const [cnt, updateCnt] = React.useState(0);

      const fnUpdate = () => {
        for (let i = 0; i < 5; i++) {
          updateCnt(cnt + 1);
        }
      };
      return (
        <div>
          {cnt}
          <button onClick={fnUpdate}>SUBMIT</button>
        </div>
      );
  };
  //output will be 1
  
  
    const AppF = () => {
      const [cnt, updateCnt] = React.useState(0);

      const fnUpdate = () => {
        for (let i = 0; i < 5; i++) {
          updateCnt((count) => {
            debugger;
            return count + 1;
          });
        }
      };
      return (
        <div>
          {cnt}
          <button onClick={fnUpdate}>SUBMIT</button>
        </div>
      );
    };
  //output will be 5
    
***************************************************************************************************************************************
21/02/20 
***************************************************************************************************************************************
6:30
Now i have a requirement like this..I have a registration form...ok..it has user id, and password. and a login button..
If i click on the login button..what we have to do generally? we have to take the data and prepare json format or not..
And then send the data to the server or not.. yes or no?

my server side person suppose asked me to send data in this json format :- {uid: "sam", upwd : "sam" }

The same thing how we can do in case of class component? we can get the data on onchange..or not..
the same thing we will see how to do using hooks.

So now if you want to send the data what all things are required?url and method..these 2 are given by server side people.
At the time of sending request if you want to pass some data then data format is also needed or not.
so the data format is decided by whom? server side people or not.
As a client side developer what you have to do? prepare this data data format. 
we have to send the request to the server as part of the request we have to send this data or not.

Ok lets create class component to achieve this requirement first...

class Login extends React.Component{
	render(){
		return <div>
			<input type="text" name="uid" />
			<input type="text" name="upwd" />
			<input type="button" name="login" />
		</div>
	}
}
 

So tell me how many ways we can take the data?
1. by using refs.. <input type="text" ref="name" /> and use it like "this.refs.name" or not..
   In my form if we are creating the refs by using react then at that time that types of components are called what?
   uncontrolled components or not..If it is like this then how can we take the data..using this.refs or not..
   
   
   In my functional component is my "this" is there? No right,so we cant use refs..
   So we will only go with controlled components or not..lets use onChange.. 
   
   we do not have to pass event to onChange function explicitly..it will be available to the function by default.
   If no argument is passed that means only event object is the argument.
   If the function is called with multiple arguments then event will be the last argument always. 
   
   Lets get the uid and upwd using event object. event.target.id for key and event.target.value for value of textbox.
   If we want to create one object to send to the server , we also need keys or not..
   Suppose my server side guy is asking json like ..  {u: "sam", p : "sam" }, where keys are "u" and "p"
   So lets add id to both the text boxes..as "u " and "p" respectively. 
   And inside the function fnChange(event{} we can use event.target.id to get the key for the object and event.target.value for value.
   So the above is one way of fetching key..and value..
    

    class App extends React.Component {
      constructor() {
        super();
        this.state = {
          data: {
            nameValue: '',
            ageValue: '',
          },
        };
        this.showValue = this.showValue.bind(this);
      }

      showValue() {
        this.setState({
          data: {
            ...this.state.data,
            nameValue: this.refs.nameValue,
            ageValue: this.refs.ageValue,
          },
        });
        alert(
          'name ' +
            this.state.data.nameValue +
            ' age: ' +
            this.state.data.ageValue
        );
      }
      render() {
        const { nameValue, ageValue } = this.state.data;
        return (
          <form>
            <label>
              Name:
              <input type='text' ref='nameValue' id='nameValue' />
            </label>
            <label>
              Age:
              <input type='text' ref='ageValue' id='ageValue' />
            </label>
            <input type='submit' value='Submit' onClick={this.showValue} />
          </form>
        );
      }
    }


   
2. But i dont want the above one. How is the other way?
   fnChange.bind(this,"u") - can we pass like this?
   my bind() method returns me what? Another function or not? 
   
   //......add missing...
   
 class App extends React.Component {
      constructor() {
        super();
        this.state = {
          data: {
            nameValue: '',
            ageValue: '',
          },
        };
        this.fnChange = this.fnChange.bind(this);
        this.showValue = this.showValue.bind(this);
      }
      fnChange(event) { //event is last argument, we can pass parameter before this if we need..
        let value = event.target.value;
        let key = event.target.id;
        this.setState({
          data: { ...this.state.data, [key]: value },
        });
      }
      showValue() {
        alert(
          'name ' +
            this.state.data.nameValue +
            ' age: ' +
            this.state.data.ageValue
        );
      }
      render() {
        const { nameValue, ageValue } = this.state.data;
        return (
          <form>
            <label>
              Name:
              <input
                type='text'
                value={nameValue}
                id='nameValue'
                onChange={this.fnChange}
              />
            </label>
            <label>
              Age:
              <input type='text' id='ageValue' onChange={this.fnChange} />
            </label>
            <input type='submit' value='Submit' onClick={this.showValue} />
          </form>
        );
      }
    }


   
3. another way...onChange={//code}
   The above part - //code is expecting what? A function only or not?
   Can we write an anonymous arrow function instead.. 
   And dont call this arrow function from button click as button click expecting function name only within expression
   And from within arrow function we can call the method we defined
   //can we write a function here?yes or no..
   
   
     class App extends React.Component {
      constructor() {
        super();
        this.state = {
          data: {
            nameValue: '',
            ageValue: '',
          },
        };
        this.fnChange = this.fnChange.bind(this);
        this.showValue = this.showValue.bind(this);
      }
      fnChange(event) {
        let value = event.target.value;
        let key = event.target.id;
        this.setState({
          data: { ...this.state.data, [key]: value },
        });
      }
      showValue() {
        alert(
          'name ' +
            this.state.data.nameValue +
            ' age: ' +
            this.state.data.ageValue
        );
      }
      render() {
        const { nameValue, ageValue } = this.state.data;
        return (
          <form>
            <label>
              Name:
              <input
                type='text'
                id='nameValue'
                onChange={() => {
                  this.fnChange(event);
                }}
              />
            </label>
            <label>
              Age:
              <input
                type='text'
                id='ageValue'
                onChange={() => {
                  this.fnChange(event);
                }}
              />
            </label>
            <input type='submit' value='Submit' onClick={this.showValue} />
          </form>
        );
      }
    }
 
   
4. another way...onChange={//code}
   The above part - //code is expecting what? A function only or not?
   //can we write a function here?yes or no..
   
   
      class App extends React.Component {
      constructor() {
        super();
        this.state = {
          data: {
            nameValue: '',
            ageValue: '',
          },
        };
        this.fnChange = this.fnChange.bind(this);
        this.showValue = this.showValue.bind(this);
      }
      fnChange(event) {
        let value = event.target.value;
        let key = event.target.id;
        this.setState({
          data: { ...this.state.data, [key]: value },
        });
      }
      showValue() {
        alert(
          'name ' +
            this.state.data.nameValue +
            ' age: ' +
            this.state.data.ageValue
        );
      }
      render() {
        const { nameValue, ageValue } = this.state.data;
        return (
          <form>
            <label>
              Name:
              <input
                type='text'
                id='nameValue'
                onChange={this.fnChange.bind()}
              />
            </label>
            <label>
              Age:
              <input
                type='text'
                id='ageValue'
                onChange={this.fnChange.bind()}
              />
            </label>
            <input type='submit' value='Submit' onClick={this.showValue} />
          </form>
        );
      }
    }



As we discussed above 4 ways we can use to get the input fields data from a form..
We have one way we discussed which is using refs(i.e. uncontrolled components)

But in case of hooks all are functional components..
So that how we will get input field data here?
We can not use this.refs as "this" is not available here..

So we can go with onchange event..
Lets write the code..

**Also remember in any javascript function event is always the last argument..
That means if we dont pass any argument while calling the function then by default event is the only argument available to this 

So we can take a local state variable data and initialise it with {}
It has an updater method also returned from React.useState({}) to update state variable data.

const Login = ()=>{
     const [data,updateData]=React.useState({});
     const fnChange=(eve)=>{
         let _targetEle=eve.target;
         let key=_targetEle.id;
         let value=_targetEle.value;
         updateData({...data,[key]:value});
     }
     const fnLogin=()=>{
         console.log(data);
     }
     return <div>
         <p>Uid: <input id="u" onChange={fnChange} /></p>
         <p>pwd: <input id="p" onChange={fnChange} /></p>
         <p><input type='button' value="login" onClick={fnLogin} /></p>
     </div>
 }

		//We cannot update like updateData({data,[key]:value}) or updateData({[key]:value})
		 //Here one important thing we need to remember most important difference..
		 
		 //class setState() basically is meant to update multiple variables..
		 //if we have this.state= { name: "soumya", location : "Bglore"}
		 //And later i just want to update name i can do by using below..
		 	this.setState({name : "Stahl"})
		 //Here if we print the state variable i.e. {this.state} it will print {name : "Stahl", location : "Bglore"}
		 //Which means previous key values it keeps as is if there is no change.
		 //Basically it merges the new changes to existing in the state variable...
		 
		 
		 //But in case of useState() if we have mentioned useState({name: "soumya", location : "Bglore"})
		 //This will return an array with state variable name pointing to first argument, and setState() method pointing second argument
		 // const [user,updateUser] = useState({name: "soumya", location : "Bglore"})
		 //Now we have updateUser which is equivalent to this.setState()
		 //lets update state here..again here also i want to update name only..
		 
		 updateUser({ name : "Stalin" })
		 //But in this case it is not going to merge the remaining key value pairs from the state variable object
		 Rather it will override it..
		 So if i print {user} it will return { name : "Stalin" } instead of {name : "Stahl", location : "Bglore"}
		 //So to overcome this problem we have to manually merge..using (...)
		 updateUser({...user, name : "Stalin" })


Example3
========
I have a label, textbox and a button
Whatever i put in textbox and click submit it has to be displayed using a list..
We will use functional components and hooks..
lets create ..what all things required? one textbox and a button..
lets take onChange - fnChange() on textbox and onClick -fnSubmit() on button
And also define both functions..

Now lets create a state variable to keep all the list of player name..
    const [players,updatePlayers]=React.useState([]);
It is an array we are holding only player names...
Every time we enter a player in textbox and submit this players array should be modified..

First of all can we get the data from textbox?
Here we dont have any ref or anything..How we will get?
Can we get using onchange? we passed event..
Lets fetch it using e.target.value
Where we have to put this value? In players array or not?
Lets do - 
         <p>Name: <input id="u" onChange={(e)=>updatePlayers(e.target.value)} />

But do you want me to do like this?
What is the problem?
First problem is we are expecting array data..
But we are passing string data..
So that can we keep in array format?
Lets do - 
         <p>Name: <input id="u" onChange={(e)=>updatePlayers([e.target.value])} />

What is the problem here?
Now initial load my players list is empty we initialised to [] array
First time i enter Sachin. So as per the above onChange() it will enter ["sachin"]
Second time i enter Dhoni. So as per the above onChange() it will enter ["dhoni"]
SO it is overriding..

And also another problem we are not supposed to update the list here..
Because on button submit only list ll be generated and displays the players list..
This button click only it wil take previous players data in array and add the player currently visible in textbox..

so what is the solution?
Can we take another state variable for name??
    const [name,updateName]=React.useState('');
And in onChange just update the name variable?
         <p>Name: <input id="u" onChange={(e)=>updateName(e.target.value)} />

As my name is updated we have the latest value everytime 
Lets click o button submit to add whatever value available inside textbox..
In array also destruction is there. Lets use spread operator..
        updatePlayers([...players,name]);

Ok now once I have my final player list available can we use a map() to update the list??
inside of render()?
 <p>
            <ol>
               {
                   players.map((v)=>{
                        return <li>{v}</li>
                   })
               }
            </ol>
</p>

Refresh page and see..
        

 const List = ()=>{
    const [players,updatePlayers]=React.useState([]);
    const [name,updateName]=React.useState('');
    const fnSubmit=()=>{
        updatePlayers([...players,name]);
    }
    const fnChange = (e) =>{
    	updateName(e.target.value)	
    }
     return <div>
         <p>Name: <input id="u" onChange={fnChange} />
         <input type='button' value="submit" onClick={fnSubmit} /></p>
        <p>
            <ol>
               {
                   players.map((v)=>{
                        return <li>{v}</li>
                   })
               }
            </ol>
        </p>
     </div>
 }


****Instead of onChange a separate function we can take anonymous arrow function there only..


 const List = ()=>{
    const [players,updatePlayers]=React.useState([]);
    const [name,updateName]=React.useState('');
    const fnSubmit=()=>{
        updatePlayers([...players,name]);
    }
     return <div>
         <p>Name: <input id="u" onChange={(e)=>updateName(e.target.value)} />
         <input type='button' value="submit" onClick={fnSubmit} /></p>
        <p>
            <ol>
               {
                   players.map((v)=>{
                        return <li>{v}</li>
                   })
               }
            </ol>
        </p>
     </div>
 }





Now so far we covered like what?
this.state for that we used useState()

Next in our class components we have life cycle methods are there..
And within my function component I dont have any life cycle methods
So the equivalent life cycle methods I want within my functional component also.
So for this purpose we have one more hook is tere. that is called as useEffect()
It is going to handle some of your life cycle methods.

Ok now my requirement is very simple thing..
Here I have a button is there..
If i click on button the title of the page should update...
Like "You clicked me 1 time"..
it should increment every button click..
First time it will show "You clicked me 0 time"

So first time at the time of loading this functional component I want to show "You clicked me 0 time"
If i click on this particular button then at that time you have to write like what?
"You clicked me 1 time"
"You clicked me 2 time"
...
Like this i want..

Using class component how we can??
We can take a state variable cnt and increment it on button click
And then the same cnt variable we can use for title


class TitleUpdateC extends React.Component{
	constructor(){
		super();
		this.state={
			cnt :0;
		}
	}
	render(){
		return <div>
			 <input type='button' value="click" />
			</div>
		
	}
}


Can we take componentDidMount() ? 
If my DOM is loaded first time we can use this right?
ANy operation we want to do on initial load then better to go with componentDidMount() as my DOM is available that time its better to use
So within this just write for initial load "He clicked me 0 times"
	        document.title="He clicked me " + this.state.cnt + "  time(s)"


Now when we click on the button we have to update the count...
So lets add an onclick method to it..
 <input type='button' value="click" onClick={this.fnUpdateCnt.bind(this)}  />
 
 And next add this method within class and from the method just increment cnt..
        this.setState({ cnt:this.state.cnt+1})

class TitleUpdateC extends React.Component{
	constructor(){
		super();
		this.state={
			cnt :0;
		}
	}
	fnUpdateCnt(){
        this.setState({
            cnt:this.state.cnt+1,
            
        })
    }
	componentDidMount(){
	        document.title="He clicked me " + this.state.cnt + "  time(s)"

	}
	render(){
		return <div>
			 <input type='button' value="click" onClick={this.fnUpdateCnt.bind(this)}  />
			</div>
		
	}
}



Now the count is updated  that is the state variable cnt.. on button click..
But my title has to update or not?
we have document.title inside of componentDidMount() only..so it will never get updated on button click state change
So we have to update it from either setState() or any other life cycle which is called from here.

Now on setState() which methods are called?
//getDerivedStateFromProps()
//shouldComponentUpdate()
//render()
//getSnapShotBeforeUpdate()
//componentDidUpdate()

Now which place is better place to update your styling?
componentDidUpdate() or not?

So lets write the code for this..
Within render() i have not set title value.

Suppose i have added one more textbox 
Based on the textbox value I am updating the name variable..


class TitleUpdateC extends React.Component{
	constructor(){
		super();
		this.state={
			cnt :0;
		}
	}
	fnUpdateCnt(){
        this.setState({
            cnt:this.state.cnt+1,
            
        })
    }
    fnChange(event){
    	this.setState({
    		'name' : event.target.value
    	})
    }
    componentDidUpdate(){
        console.log('my title updated');
        document.title="He clicked me " + this.state.cnt + "  time(s)"
    }
	componentDidMount(){
	        document.title="He clicked me " + this.state.cnt + "  time(s)"

	}
	render(){
		return <div>
			 <input type="text" onChange={this.fnChange.bind(this)} />
			 <input type='button' value="click" onClick={this.fnUpdateCnt.bind(this)}  />
			</div>
		
	}
}

lets save everything and refresh browser...
Here there is a problem..
Everytime I enter a character inside the textbox my fnChange() is called to set state variable name
At the same time it calls componentDidUpdate() life cycle method where we are updating document title
Even if my state variable cnt is not updated, its still the previous value but still it executes the line and updates title with same value.
Why we need to call this everytime? THis is not our need right..

We have to call componentDidUpdate() whenever cnt is updated. That is when the button is clicked or not?
How can we fix this?
So if we want to know the changes for cnt variable is there or not what inputs are required?
my prevstate and currstate or not?

If my  prevstate and currstate  both are different then at that time we have to update it. Then dont do that one.
So this method componentDidUpdate() requires what?
my prevstate and currstate or not?
Already my current state is available that is this.state
my previous state is required or not?
So that my componentDidUpdate() always gives me my previous props and previous states..

So lets use this prevState with currState to update the title if both are not same..within componentDidUpdate()

 class TitleUpdateC extends React.Component {
    constructor() {
      super();
      this.state = {
        cnt: 0,
        name: '',
      };
    }
    componentWillUnmount() {
      alert('am going to unmount');
    }
    fnUpdateCnt() {
      this.setState({
        cnt: this.state.cnt + 1,
      });
    }
    componentDidMount() {
      document.title = 'He clicked me ' + this.state.cnt + '  time(s)';
    }

    componentDidUpdate(preProps, preState) {
      if (this.state.cnt != preState.cnt) {
        console.log('my title updated');
        document.title = 'He clicked me ' + this.state.cnt + '  time(s)';
      }
    }
    fnChange(eve) {
      this.setState({
        name: eve.target.value,
      });
    }
    render() {
      return (
        <div>
          <h1>Class Compnent</h1>
          <input onChange={this.fnChange.bind(this)} />
          <input
            type='button'
            value='click'
            onClick={this.fnUpdateCnt.bind(this)}
          />
        </div>
      );
    }
  }

Now save everything and refresh the page..
Now you see if we enter any value in textbox it will not update the title at all .
Condition will fail as there is no change to state
my previous state and current state both are same..

So here in this example we are using 2 life cycle methods.
componentDidMount() and componentDidUpdate()

Now in case of functional component we have a hook called useEffect() which can handle this..
It takes a callback function as an argument.
React.useEffect(()=>{})

In case of class component componentDidMount() is triggered after render()
In case of functional component my render() method not available. But equivalent return statement is there or not?
so class component render() is equal to my functional component return or not?

At the time of executing your class which one is going to be executed?
My constructor() is going to be executed..
At the time of functional component what ever we wrote outside that is only executed or not? function body

In my functional component my useEffect() method is going to be triggered which is same as  componentDidMount() of class component.
So that here what code we have to write?
here my initial load to update your title to "You have clicked me 0 times " or not?

So lets take a state variable for this cnt..
    const [cnt, updateCnt] = React.useState(0);

And update within useEffect() to make it works like componentDidMount()
 	React.useEffect(() => {
      console.log('title udpate');
      document.title = 'He clicked me ' + cnt + '  time(s)';
    });



Here similar to our previous example we have a taken a textbox and also added onChange()
We have also maintained a state variable name and updating it from onChange()
But we have to restrict the use of useEffect only for cnt state variable.. as we fixed in class component using prevState and currState
useEffect() is called when DOM is loaded
So below is equivalent to componentDidMount()
	React.useEffect(() => {
      console.log('title udpate');
      document.title = 'He clicked me ' + cnt + '  time(s)';
    });

=====
 const TitleUpdateF = () => {
    const [cnt, updateCnt] = React.useState(0);
    const [name, updateName] = React.useState('');
   	React.useEffect(() => {
      console.log('title udpate');
      document.title = 'He clicked me ' + cnt + '  time(s)';
    });

    return (
      <div>
        <h1>Hook Compnent</h1>
        <input onChange={(e) => updateName(e.target.value)} />
        <input type='button' value='click' onClick={() => updateCnt(cnt + 1)} />
      </div>
    );
  };

But the above has some issues..
useEffect() also called on my each and every state change...
So The above will called for both state variable change like name and cnt
What we have to handle?
My tite should change when my cnt variable is going to change.
name is going to change. I dont want that one..
So far we know useEffect() takes one argument..
Now it is going to take one more argument also..That is one array
Now this array is going to handle like first time this useEffect() is getting triggered thats fine leave it..
Second time onwards for which state variable i want to listen i have to mention that within array...
That is on state updation after initial load.. 

***So below is equivalent to componentDidUpdate()
	React.useEffect(() => {
      console.log('title udpate');
      document.title = 'He clicked me ' + cnt + '  time(s)';
    }, [cnt]);

=======
 const TitleUpdateF = () => {
    const [cnt, updateCnt] = React.useState(0);
    const [name, updateName] = React.useState('');
    React.useEffect(() => {
      console.log('title udpate');
      document.title = 'He clicked me ' + cnt + '  time(s)';
    }, [cnt]);
    return (
      <div>
        <h1>Hook Compnent</h1>
        <input onChange={(e) => updateName(e.target.value)} />
        <input type='button' value='click' onClick={() => updateCnt(cnt + 1)} />
      </div>
    );
  };


And this useEffect also works for componentWillUnMount() life cycle replacement
When we use componentWillUnMount()?
I have a component is there..
I have a flag called as true or false is there
First time my flag is true lets mount TitleUpdateF component?
And again on click of button set isShow to false to unmount it again..
If TitleUpdateF is unmounted then it should call useEffect()...replacement of componentWillUnMount()

Next time I click on button. I want to make the flag like false..
We have to unmount the component or not?
Before unmounting If we want to do anything then where we have to write?
Within the componentWillUnMount() or not?
***So below is equivalent to componentDidUpdate()
	React.useEffect(() => {
      console.log('title udpate');
      document.title = 'He clicked me ' + cnt + '  time(s)';
      return () => {
        alert('am going to un mount');
      };
    }, [cnt]);

Can we handle that one also?
Just I want one button show or something or toggle..
Initial maintain a state variable as isShow as true..
and then on button toggle click make isShow as false..
Then at that time my component should be unmounted..
Then at that time which method should trigger?
 componentWillUnMount()
 

How can we handle this in class component?
class App extends React.Component {
    constructor() {
      super();
      this.state = {
        isShow: true,
      };
    }
    fnUpdate() {
      this.setState({
        isShow: !this.state.isShow,
      });
    }
    render() {
      return (
        <div>
          <input
            type='button'
            value='toggle'
            onClick={this.fnUpdate.bind(this)}
          />
          {this.state.isShow && <TitleUpdateF />}
        </div>
      );
    }
  }



==: Notepoints :==
==================
When my useEffect() hook will be called? On what life cycle methods?
//componentDidMount()
//componentDidUpdate()
//componentWillUnmount()

useEffect() hook is a method and used for functional components only.
useEffect() hook takes one callback function as an argument.

useEffect(()=>{}) //only componentDidMount() is called..it does not track any state changes
useEffect(()=>{}, [statevar1,statevar2,...]) //componentDidMount() and componentDidUpdate() both are called..
useEffect(()=>{ return ()=>{ //this is for unmount} }) //componentWillUnMount() 

useEffect() hook takes one callback function as an argument..
that callback function is also a method..it can return anything...or not..
this calback method is going to return one function..
If we have written that method (return from callback from useEffect) then that is treated like - //componentWillUnmount

At the time of unmounting this method is going to be triggered..

***************************************************************************************************************************************
24/02/20 
***************************************************************************************************************************************

There is one more hook is there - it is called useContext()
Why we go for context? 
I have one parent component is there.. within the parent component there are so many children components are there.
I have the data within my parent. I want to give this data to my all children or not?
A(data)->B->C->D->E

Only one level is there better to go with what?? props or not?
like this multiple levels are there..For ex in above flow... B also wants some data..C also wants some data..and so on..
That time better to go with what? context or not?

If the context is not there..one more concept is there i.e. state management in redux..yes or no ?
Now i have the data here in A.. and I want pass the data to child any level.
How we can do that? We already discussed sometimes back..One context is required or not?
So how we can write it? Just we are going to put like ctx = React.createContext().
This ctx can be used by ? can be used by all your components or not? So that it should be what?
It should not be a specific to a particular component or not? It should be a global one.
That is the first thing.. 
Why because for this particular context only we are going to give the data and for this particular context only we are going to take the data or not..
so this ctx variable should be available to all the components within this particular application or not..
yes or no? Make it as global first..ok what is next one?
Who has data? My A or not?
This A is going to give the data and any one of this particular component(B,C,D,E) is going to consume it or not?
Already what we did we will discuss and then we will jump to useContext..

Suppose A has data..And A is a class component or whatever it is..
This component contains what? B component? Where can we write it?
Inside my render() or not? return <B /> 
My data is available where? In A or not?
so that lets maintain the data with a state variable or something inside constructor.. constructor() {this.state = {name : "Sachin" } }
Now this "Sachin" the name I want to give it to B component? Tell me how can we do that?
We have to provide it or not? 
So within this particular ctx (i.e. global - ctx = React.createContext()) we have a component called as Provider is there..
So that can we get that one? Ok How can we get that? my ctx.provider..<ctx.Provider><ctx.Provider>
This <ctx.Provider> component will take some data or not? So for that one attribute is there called as value..
We have to use value only. Now in value attribute we have to pass the data.. and the data may be any type..
if huge data is there or only string is there..u can pass anything object or string..

now from component A it is done.. now who wants the data? My B..
If B is a class component how it looks like?

const ctx=React.createContext();

class A extends React.Component{
	constructor(){
		this.state = {
			name : "Sachin"
		}
	}
	render(){
		return {
		<ctx.Provider value={this.state.name} >
			<B />
		</ctx.Provider>
		}
	}
}	



Ok now who wants the data? My B component right..
If it is a class component how my B looks like?
Not only B any component...any other components..
Ok we have to write the render() method..inside render() we have to consume the data or not..
So for consuming we have another component called Consumer..
We will use it by using my ctx.Consumer component of react..

example :- 
class B extends React.Component{
	render(){
		<ctx.Consumer>
			//write some code or not..
		</ctx.Consumer>
	}
}

This Consumer we are using is nothing but one callback method is going to be triggered by default by passing this data or not..
So how we can write it? Writing a callback inside <ctx.Consumer></ctx.Consumer> By passing one argument d i.e. the data or not?
Then how to use d inside callback? using expression or not..to return a div or any element wrapping the data d
//<ctx.Consumer>
	 (d)=>{ return <div> {d} </div> }
 </ctx.Consumer>


Now think I have one more context also there..in component A.
const ctx2 = React.createContext("defaultval");
In this particular one we can also pass some default data.. i.e. to createContext() method

But the previous context looks like - 
const ctx = React.createContext();
and we did not pass anything.If we did not pass anything or any value during the initialisation 
i.e. in createContext() then at that time it will consider the data from the "Provider component value attribute"
i.e. <ctx.Provider value="overrideVal">



//So we have 2 scenarios as mentioned below..
const ctx1 = React.createContext("defaultval");
<ctx.Provider value="override">
	<B/>
<ctx.Provider>
//Here value is "override" as we are passing using "value" attribute has high priority and will override the default value.



const ctx2 = React.createContext("defaultval");
<ctx.Provider>
	<B/>
<ctx.Provider>
//Here value is "defaultval" as we are not passing any "value" attribute to ctx.Provider. So default will be considered..


Case Scenario
~~~~~~~~~~~~~~~
There are 5 components A,B,C,D,E
We have 2 context variables inside component A. 
A(data1, data2)->B->C->D->E
And we want those context data from component A to be available in all the children components..i.e all the way down to B,C,D,E

How can we do that? As both the context variable is needed by all the components it is always advisable to go for the nested Provider..
So that B,C,D,E loaded once..


e.g. the correct way is :- 
const ctx1= React.createContext("sachin");
const ctx2 = React.createContext("sachin");
render(){ 
	return 
		...
		<ctx1.Provider>
			<ctx2.Provider value="Dhoni">
				<B/>
			</ctx2.Provider>
		</ctx1.Provider>
}

	
e.g. the incorrect way is :- because B has to load twice..
const ctx1= React.createContext("sachin");
const ctx2 = React.createContext("sachin");

render(){ 
	return 
		...
		<div>
			<ctx1.Provider>
				<B/>
			</ctx1.Provider>
			<ctx2.Provider value="Dhoni">
				<B/>
			</ctx2.Provider>
		</div>
}




Now coming to B component we have to consume the data or not.
We will use ctx1.Consumer() and ctx2.Consumer() respectively.
Now coming to this ctx1.Consumer() first what it returns? A callback function or not?
This callback function gives me data or not? yes..as argument..perfect.
So now "sachin" the default value is available to its child components.
But I also want ctx2 data i.e. Dhoni to be passed to its children..

Now sachin is available from ctx1..but I also want Dhoni from ctx2.
So can we write ctx.Provider from inside ctx1.Provider callback function?

i.e. 
class B extends react.Component{
....
  render(){ 
	return 
		<div>
			<ctx1.Consumer>
				{ 
					(d)=>{
					 //...code 
					 //returns some content
					} 
			   }
			</ctx1.Consumer>
		</div>
	}
}

ok now tell me this callback function of ctx1.provider callback function returns what?
Some content or not? My content should be what? Another consumer or not so that can we write one more nested Consumer

i.e. 
class B extends react.Component{
....
  render(){ 
	return 
		<div>
			<ctx1.Consumer>
				{ 
					(d1)=>{
					 	<ctx2.Consumer>
					 		{
					 			(d2)=>{
					 			  //d1 and d2 both available here
					 			}
					 		
					 		}
					 	</ctx2.Consumer>
					} 
			   }
			</ctx1.Consumer>
		</div>
   }
}


Now here also the ctx2.Consumer returns another callback function or not..
Callback function has ctx2 data or not..
So if we check the above structure it looks like closure or not..
function within the function..my inner function can always use my outer function values or not..
So my d1 and d2 values both are available inside the ctx2.Provider callback function or not...
This is the way we are going to write multiple Consumers..


But it seems like very difficult or not..like callback hell..
For that purpose one simple hook is there called as - useContext() hook.
But here the problem is that - if it is a class component we can not use the hook "useState()" or any other.
So for that we will always use functional components for hooks.

For the class components they always have to use ctx.Consumer() and get the data using the callback function returned by the consumer..
useContext() is going to return the provided data..and takes one argument i.e. the context name.

lets write the above example using useContext() hook for functional components..

 const B = () => {
 	const d1 = useContext("ctx1");
 	const d2 = useContext("ctx2");
	
	return <div>
		//we can use d1 and d2 here...
		//not required ctx1.Consumer() or ctx2.Consumer() for functional components..
		//directly get the data using useConext(contextname) hook
		
		{d1}
		{d2}
	</div>
 }

**	For provider we have to use React.createContext() and <ctx.Provider></ctx.Provider> as we did for class components..
**	But while consuming we can use useContext() hook in functional component to overcome from callback hell issue..
**	Here There is no ctx.Consumer() or any callback function...
**	We have to use React.useContext("cotextname")
**	And it returns the variable which holds the value..We can directly use it within the expression..
*** There is no dependancy for React.createContext(). It works for both functional and class components..
**  So for both functional and class components providing the data is same... (Important)

const ctx=React.createContext();
const C =()=>{
    const data=React.useContext(ctx);
    return <h1>
         Am C:{data} from App
    </h1>
}
const B =()=>{
    return <div>
    	<C />
    </div>
}
 const A =()=>{
     return <div>
        <B />
     </div>
 }
 const App=()=>{
     const name="sachin";

     return <div>
          <ctx.Provider value={name}>
            <A />
          </ctx.Provider >
         </div>
 }



I want to forward one reference to another component..
Can you tell me how we can do that?
For example this is the case..
I have 2 components..A and B.
My A and B relationship is like my B is the children component. 
B component has a textbox.. and We need the reference of this B textbox inside component A.
A->B(textbox)

That means my A component contains B component. And my B component contains a textbox. 
And this textbox reference I want in my parent context.

We have to create the reference in component A. 
And we have to give this reference to component B and ask component B to give that reference to its containing textbox.
Which means now the reference we created in Component A is now pointing to the textbox present in Component B or not..

So lets go step by step..
Step 1: Create a reference in Component A. 
	//How we can create a reference ?
	//We have React.createRef() or not..
	//This reference we have to pass to component B or not..
	//if my component B is like a class component, how we can pass it? like props or not..
	//if my component B is like a functional component, how we can pass it? 
		Can we receive it as argument? 
		But there will be multiple attributes will be there which might have passed from component A .
		e.g. 
		class A extends React.Component{
			render(){
				return <B var1="test1" var2="test2" ... varn="testn" ref="referencevalue" />
			}
		}

	//But in above code you can see my var1,var2,...,varn are user defined and normal elements. It will go like props..
	//But "ref" is a predefined one. So this one (ref="referencevalue") will go like a reference..
	//Now in B we will be receiving all the variables or props passed from component A and also the reference also it has to receive.
	//If it is a class component then there is no option. You have to use props only..
	
	//So if it is a functional component how we can pass it? 
		class A extends React.Component{
			render(){
				return <B var1="test1" var2="test2" ... varn="testn" ref="referencevalue" />
			}
		}
		
	//And we receive in B component like the last argument..first argument is pointing to props..
		const B = React.forwardRef((props, r) => {
  			return <input ref={r} />;
		});

	//For receiving the reference there is a method called forwardRef(). How can we use this one?
	//React.forwardRef()
	//React.forwardRef() takes the function as an argument.
	//So the whole functional component function we need to pass as an argument to whom? React.forwardRef() or not?
	  const B = () => {//component B Code } //move to below 
	 i.e. React.forwardRef(() => { //component B Code })
	//Now this functional component is called from react.forwardRef() and is treated like a callback function or not..
	
	//At the time of calling it is going to give how many arguments? 2 arguments or not..
	i.e. React.forwardRef((p,r) => { //component B Code })
	//one is props i.e. var1,var2,...varn and the other is the references list or not..
	//Now can write my input ref={r} or not..
	React.forwardRef((p,r) => { return <input ref={r} /> })

==================
==: Notepoints :==
==================
**	createRef() is used to create reference in one component but that is meant to point to some child class reference..
**	If we are going to send a reference to another component using createRef(), we have to check if we are sending to class or functional component
**	We can pass like any attribute name from Parent(exactattributename={this.myref}) ********use of "anyname"**********
	And in the child if it is a class component it will receive like this.props.exactattributename 
**	We can pass like any attribute name from Parent(ref={this.myref}) ********use of "ref"**********
	And in the child if it is a functional component it will receive using React.forWardRef() and passing whole component to it..
	Now the component inside of forwardRef() receives 2 values
	One is props, second is ref we sent from parent
**	So only difference is we use createRef() in case we want to create a reference from class component
	We use useRef() in case we want to create a reference from functional component

Code example for both
========================

<script src="react.development.js"></script>
<script src="react-dom.development.js"></script>
<script src="babel.js"></script>
<body>
  <div id="root"></div>
  <script type="text/babel">
    class B extends React.Component {
      render() {
        return (
          <div>
            <input type='text' ref={this.props.abc} />
          </div>
        );
      }
    }

    const C = React.forwardRef((props, r) => {
      return <input ref={r} />;
    });
    class App extends React.Component {
      constructor() {
        super();
        this.myRefc = React.createRef();
        this.myReff = React.createRef();

        this.fnUpdate = this.fnUpdate.bind(this);
      }
      fnUpdate() {
        console.log(this.myRefc.current.value, ' this.myRefc ');
        console.log(this.myReff.current.value, ' this.myReff ');
      }
      render() {
        return (
          <div>
            <B abc={this.myRefc} />
            <C ref={this.myReff} />
            <button onClick={this.fnUpdate}>Submit </button>
          </div>
        );
      }
    }

    ReactDOM.render(<App />, document.getElementById('root'));
  </script>
</body>

Now I dont want create the reference using React.createRef().
ok..We have another hook is there.that is called useRef() is the hook..
By default can you tell me how my element reference looks like? 
for ex.. document.getElementByID("id") will return one element object or not.
so we are just going to put like one empty object to useRef.
Once we get the reference it has to fill with the exact reference or not..

@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@

Can you tell me the difference between React.Component and React.PureComponent?
which method is overriding? //shouldComponentUpdate() or not..
see the difference..
I have the class component A is there.. ok
And we have a state variable..name as sachin initialized inside constructor.
But we have a setInterval inside the same constructor and in every 5 milliseconds we are setting name again to same value "Sachin"
And we have the render() method..Can you tell me what will happen in this case? refer code below for better understanding..

class A extends React.Component{

	constructor(){
		super();
		this.state = {
			name : "Sachin"
		}
		setInterval(()=>{
			this.setState({
				name : "Sachin"
			})
		},5000)
	}
	
	render(){
		return <div> { this.state.name} </div>
	}
}

What will happen here?
//first time my state variable name is created and initialised to "Sachin".
//now this setInterval() is going to be started..
//after 5 seconds what happened?
//My state is updated with "Sachin" only or not..then what happened?
//Any updation is happend..can you tell me the life cycle methods?
	getDerivedStateFromProps()
	shouldComponentUpdate()
	componentWillUpdate() //deprecated
	render()
	getSnapshotBeforeUpdate()
	componentDidUpdate()
//These are the life cycle methods going to be triggered or not.
//first time my value is Sachin. Second time also my value is what? Sachin..ok
//If my class is extends from React.Component,these all life cycle methods are going to triggered all the time or not..that too for the same data
//But I dont want that one..then? extend from React.PureComponent

class A extends React.PureComponent{
	constructor(){
		super();
		this.state = {
			name : "Sachin"
		}
		setInterval(()=>{
			this.setState({
				name : "Sachin"
			})
		},5000)
	}
	
	render(){
		return <div> { this.state.name} </div>
	}
}

//Now my requirement is the same PureComponent I have to use within my functional Component...
//Now how it looks lets see...If we want to use hook we can use directly..
//otherwise can we pass the data to another component? ok lets see..
//Suppose we have a parent component A i.e. class component.. and we are rendering a child B from A..
//And in child B we are printing the state variable "name" coming from component A.
//We will receive it as argument or not..now class A is same as above..
//so every 5millisecond it is updating state variable "name" even if it holds same data or not.
//So internally B is also getting loaded that many times or not?
//Also same life cycle methods will be triggered for B incase B is a class component or not..

//Can we make this functional component work like a pure component..
//Can we give this component to our React.Memo()? It takes a callback function as an argument.
//We will pass our functional component to React.Memo() hook to treat it like a PureComponent..
//React.Memo() works like a pure component for functional components..

 
class A extends React.PureComponent{

	constructor(){
		super();
		this.state = {
			name : "Sachin"
		}
		setInterval(()=>{
			this.setState({
				name : "Sachin"
			})
		},5000)
	}
	
	render(){
		return <div> <B name={this.state.name} /> </div>
	}
}

//incorrect way
const B = (prop) => {
	return {
		<h1>{prop.name}</h1>
	}
}


//correct way..
const B = React.Memo((prop) => {
	return {
		<h1>{prop.name}</h1>
	}
})


==================
There is one more hook is there - it is called as "useReducer()"
This useReducer() hook is simply working like redux in our application ok..
If we are using hooks..if that time if we want to share the data through out our functional components then that time we will use like useReducer() hook..

//install mongodb
//create schoolApp - (create a server folder and a client folder)
//within the server folder can you create the skeleton using express()
//Within client - we can either use webpack or create-react-app to create the application.
//Within the client I have a registration form..we have to use only functional components.
//register.html - userid,password,email,phoneno,register button..and one update button..
//now whatever the registered user that registered user should have to come in a table i.e. reusable component again..
Again this table will be having multiple registered users. And for each user there will be a edit ad delete button.
In the table we have to add these buttons for all the users..so every row should contain these..
//All these component we have to put inside the root component that is the app component..
 
//I want to create a TextBox Component again..
For this particular TextBox component if we want to pass a prop like type="text" then it will be treated like normal textbox.
If I pass prop like type="password" then my textbox is like password field.
If I pass prop like type="radio" then it will be radio button..
If I pass prop like type="checkbox" then it will be checkbox ..

//Same like that i dont want to hardcode labels like userid,password,email,phoneno,register button inside my register.html
//can we pass the labels also for this particular text?

//we will create using.. hooks+mongodb+nodejs
//lets design this one.

************************************************************************************************************************************
25/02/20
************************************************************************************************************************************
React.useState() 
React.useEffect() 
React.useContext() 
React.useRef() 
React.useReducer() 
React.Memo() 

What is useContext()? Why we go for useContext()? 
So basically we are going to use useContext() instead of context                                         .Consumer() 
context.Provider will remain same.. 
Lets write the code.. 

We will write only functional components. 
App, A, B, C

We have the main bootstrapping component i.e. App
App loads component A. 
A loads B. 
B loads C. 
.. 

useContext.html
-----------------
//all 3 scripts
<div id="root"></div>
<script type = "text/babel">
  const A = () => {
    return <div> <B /> </div>
  }

  const B = () => {
    return <div><C /></div>
  }
  
  const C = () => {
    return <div>I am C</div>
  }

  const App = () => {
    return <div> <A /></div>
  }
  
</script>



Now my App component has the data.. 

Let's write some data in App component.. 
If you want to change the data that time we have to use the state variable.
If it is a normal variable then at that time we can put like a var or const.. 
For now let's add a normal variable using const..
What is the next one.. We have to pass this data or not to C. 

How we can create the context?
We have to create the context at global level or not.. 
So here inside the script directly we will write the below code.. 
const ctx = React.createContext()

Here to the createContext() method we can pass default value if we wish.. 
When this value will be visible?? 
When we are not providing any value to the React.provider "value" Attribute or not.. 
If "value" Attribute is provided from React.Provider along with default value from ctx.createContext() ,
   then it will consider the data provided in the "value" attribute over that default value provided in 
   ctx.createContext() 


So let's now modify the App component. 
App component has the data..
We have to pass the data to Component C. 
We will write ctx.Provider in App component 
  and will pass our variable name to the above Provider
  as value attribute. . 


Now in my component C i need the data name.. 
How we can get it? How many ways are there?? 
One way is ctx.Consumer..
And the other way is React.useContext() 

Now leets use the React.useContext() as we are using functional components
  And working on the hook methods.. 
So now let's modify the component C.. 
Create a variable to store the data from App component using React.useContext(ctx). 
To the useContext() method pass the global context variable name. 
In this case it is ctx.. 
const data = React.useContext(ctx)

Now we have the data in component C from component App.. 
We can use data using expression.. Like {data}

useContext.html
-----------------
//all 3 scripts
<div id="root"></div>
<script type = "text/babel">
  const name = "Sachin";
  //for default value.. To the context variable.. 
  //const ctx = React.createContext("soumya..");
  const ctx = React.createContext();

  const A = () => {
    return <div> <B /> </div>
  }

  const B = () => {
    return <div><C /></div>
  }
  
  const C = () => {
    const data = React.useContext(ctx) 
    return <div>I am C : {data}</div>
  }

  const App = () => {
    return <ctx.Provider value={name}> <A /></ctx.Provider>
  }
  
ReactDOM.render(<App />, document.getElementById("root")) 
</script>


If Child component C is a class component, then there is no alternate option..
We should have to use ctx.Consumer or not..
So this  React.useContext(ctx) is for functional component only..


What is useRef()? 
I have a textbox is there..I have a button.. and on click of button I want the data.. by using useRef..

useRef.html
-----------------
//all 3 scripts
<div id="root"></div>
<script type = "text/babel">
  const C = () => {
  	return <input ref={myRef} />
  }
  
  const App = () => {
    const myRef = React.useRef({});
    const fnClick = () => {
    
    }
    return <div>
    	<C ref={myRef} />
    	<input type="button" value="click" onClick={fnClick} />
    </div>
  }
ReactDOM.render(<App />, document.getElementById("root")) 
</script>

================================

Next hook is useReducer()
What is useReducer()?
do you know reduce() method? ok why we go for reduce() method?
ok where is my reduce() method tell me first?
Ok i have an array arr = [1,2,3] and I want to find the sum.. that should return 6..
So we need to find the sum using reduce() function..
So can you tell me how the reduce() method looks like?
What is the syntax??
i.e. arr.reduce() is the method..which takes one function as an argument known as callback..for now take one argument..

we can directly write the callback method inside of arr.reduce() 
	arr.reduce(()=>{})
					or
we can also write the callback method outside and use it within arr.reduce() 
	const reducer = () => {}
	arr.reduce(reducer)

If I define reducer like below  what will happen?
	const reducer = 10;
	arr.reduce(reducer)
	//I will get error like reducer is not a function...
	//that means we will only have to pass the function to arr.reduce()
	
	So lets pass like this..
	const reducer = () => {}
	arr.reduce(reducer)

Can you tell me this reducer() method is going to be called how many times?
It will be called - how many elements are there in array..that many times it will be called
while calling this reducer() callback method from arr.reduce() how many argument it is going to pass?
	//2 arguments - initialstate, nextvalue
	//my initial state is what? my first array indexed value is treated like initialstate
	//and my second indexed value from array is treated like nextvalue..
	//so initialstate is 1 and nextvalue is 2 for the first iteration..
	//if we are doing sum then we have to add initialstate + nextvalue and assign it to initialstate
	  and return initialstate.
	//And on second iteration my initialstate will be 3 and nextvalue will be 3 or not.. so total will be 6 initialised to initialstate



****
My reducer() method takes one argument whose argument type is a function. That is a callback method.
At the time of calling this method we have to pass how many argument? 2 arguments or not?
//initialstate and another is the operation that we are going to perform -- add or something..


My requirement is my previousSum(i.e. 10) is there..
I want to add these things i.e. arr=[1,2,3] to my previousSum..
Then how we can? In the reduce() method one syntax we just covered..
Another syntax is what? my callback method, my existing data or not..
	let arr = [1,2,3]
	const reducer = (initialState,nextVal) => { initialState = initialState+nextVal; return initialState; }
	arr.reduce(reducer,10)

	Now in above example how many times it will be iterated? same...
	how many elements are there in array..that many times it will be called..
	Here in first iteration what is my initialState? it is 10 i.e. the 2nd argument to reduce() method if passed
	my nextVal for first iteration is 1st indexed value of array i.e. 1 so it returns 10+1 = 11 as initialState..
	So for my 2nd iteration my initialState is now 11 and my nextVal is 2. it returns 11+2 = 13 as initialState..
	So for my 3rd iteration my initialState is now 13 and my nextVal is 3. it returns 13+3 = 16 as initialState..
	
	iteration is over ad it returns back the latest value of initialState..
	
	const reducer = (initialState, next) => { return initialState + next }
	[1,2,3,4].reduce(reducer)
	10
	[1,2,3,4].reduce(reducer,20)
	30


Very similar syntax will use for React.useReducer()
React.useReducer() this takes how many argument?? 2 arguments or not..
1st is the reducer function and 2nd is the initialstate or not..
So far we were using useState() or not..
Now My requirement is very simple thing - instead of useState() I want to use useReducer() method..
Then we will see what is the benefits or what is the use over useState().


I have 1 button..If i click on the button i want to increment the state
In the past we were doing what? 
If i click on this one you created one state variable by using useState() 
const [cnt,updateCnt] = useState(0)
And we are updating cnt on each and every button click using updateCnt()


Now my requirement is i dont want to use useState()
instead of that i want to use useReducer()
That means I a going to replace useState() with useReducer()
Extra things some are there
I am going to discuss that one..

Now What is the syntax of my useReducer() method?
my useReducer() is simply works like what? My reduce() method only or not..
which takes how many arguments?
1st argument is what?your callback function..second one is what? your initial state or not..
initialState is nothing but current value. at the time of loading what is the state value..my count is zero or not..
simply we can say like..one initial state i.e. const cnt = 0 we can take..
Now this initiate state cnt can we pass here cnt..

As we know from above that useReducer() 1st argument is a callback method. 
This also takes 2 arguments...1st argument is state and 2nd argument is action 
  like javascript reduce() function which has a callback which takes initialstate and value as argument.
  
which action you want me to perform?
For this particular state we want to add one or not?
Once we are adding then next what we have to do? We have to return that one or not..
first we will create a simple cnt variable assigned with zero
const cnt = 0;
const [cnt,updateCnt] = useState(0)
//The above i want to replace with useReducer()

Now my useReducer() syntactically how it looks? It takes 2 arguments or not..
My 1st argument is what? callback method? somebody should have to call it or not?
The 2nd argument is what? your initialState..
If we put like simple state variables how many state variables we can write? Any number of..
For example more are there..then how can we put it?
Can we put like an object?because I want like name and count values..

const initialState = {
	cnt : 0,
	name : "Sachin"
}

The same above if we want to write using useState how many times we have to write?
2times or not...
For example 10 state variables are there. which one is recommended one?
My useReducer() is recommended one or not..

Now this initialState obj we have to give to my useReducer()
	let [curretState, dispatch] = React.useReducer(reducer,initialState)
	//reducer() is a function -first arg is current state and 2nd arg is the action..
	//reducer() callback - somebody has to call it..
	
	//useReducer() method returns 2 destruct variables  - 
			firs one is currentState, 
			second one is to update the state I want one dispatch method to call what?  to call your reducer or not..
			
	//So in case of this cnt program..lets take "add" as second argument. 
	
	
	

think i have the component const App = () => {} is there...
i have one button is there. If i click on button I have to print the state variable value in some <h1></h1>
So we have to bring the data to here or not..
First time data is 0..We need to print it or not? How we can?

We have a predefined method is there. it is called dispatch() is the method..
//dispatch method is to call the reducer..

//If we call the dispatch() method then at that time which method is going to trigger? My reducer() function or not?
Which reducer() is going to trigger? We can write multiple reducers right..
Now simple..

	const reducer1 = (state,action) => {}
	const reducer2 = (state,action) => {}
	let [currentState, dispatch] = React.useReducer(reducer1,initialState)
	
	This dispatch method comes with which reducer? this reducer or not..
	So if we are using this dispatch() method if you call this dispatch() method, with this one which reducer is binded?
	See in the code..it is pretty clear that reducer1() is binded to the dispatch() method..
	So now when dispatch() is triggered it will call reducer1() and not reducer2()

	within my reducer1() how many arguments it is going to take?
	1)currentState
	2)action
	
	my currentState is what now? zero..
	Now i have to perform currentState + 1
	at last what we have to do?
	We have to return the currentState or not.
	ex action is "ADD"
	
	reducer1 = (currentState,action) = { return currentState + 1 }
	Now on each iteration currentState is changed inside the function body and the updated currentState value comes in the reducer1() argument..
	
	
Example
=======
I have 1 button .. incre..
according to the program it is going to update the count always by 1
incre1 onClick increases count by 1

lets use useState()

App.js
So lets create a functional component - an App component 
	1)It has 1 buttons and also 1 h1 tag displaying count..as part of return value
	2)We also have to write 1 click events for the button..
	3)Lets use useState() to initialise the state variable  :- const [cnt,updateCnt] = React.useState(0);
		cnt is a state variable with default value 0.
		it returns a callback function which is like setState() method for class components.
		We can use this callback function anytime to update our state variable in functional components.
		updateCnt(cnt+1)

	    ****useState() always takes one argument that is variable..
	    
	4) now lets use that callback function i.e. updateCnt() from inside of button click...	
	
  const App = () => {
        const [cnt,updateCnt] = React.useState(0);
        const fnClick = () =>{
            updateCnt(cnt+1)
        }
        return <div>
                <h1>{cnt}</h1>
                <input type="button" value="click" onClick={fnClick} />
            </div>
    }


Example
=======
I have 1 button .. incre..
according to the program it is going to update the count always by 1
incre1 onClick increases count by 1

exact same program but lets use useReducer() instead of useState()
What is the benefit?
//....

App.js
So lets create a functional component - an App component 
	1)It has 1 buttons and also 1 h1 tag displaying count..as part of return value
	2)We also have to write 1 click events for the button..
	3)Lets use useReducer() to maintain the state variable  :- const [cnt,updateCnt] = React.useReducer(reducer, cnt);
		cnt is a global state variable with default value 0.
		useReducer() takes 2 arguments - one is reducer function and other is initialState ie. cnt
		useReducer() returns 2 values in an array destruct...one is current updated state, and other is a dispatch method..
	    reducer() also takes 2 arguments - one is state and second is action..
	    reducer() always returns the updated state...
	    reducer() metod gets called when its corresponding dispatch is called..
	    
	4)Basically we have to call the dispatch() from some event..we called from button click..
		*****imp**** We can pass variables to dispatch() which reducer() method will get as 2nd argument..	i.e. action 
   const reducer = (state, action) => {
        debugger;
        state = state + 1;
        return state;
    }
    const App = () => {
        const cnt = 0;
        const [state, dispatch] = React.useReducer(reducer, cnt);
        const fnClick = () => {
            debugger;
            dispatch();
        }
        return <div>
            <h1>{state}</h1>
            <input type="button" value="click" onClick={fnClick} />
        </div>
    }



Example
==========
Now i have 3 buttons .. incre1,incre5,decre5..
according to the names it is going to update the count..
incre1 onClick increase count by 1
incre5 onClick increase count by 5
decre5 onClick decrease count by 5

and i have initialData object. i.e. holding cnt as 0 and name as Sachin..
We have to use useReducer() hook to maintain the same state variable and update its value on specific actions..



App.js
So lets create a functional component - an App component 
	1)It has 3 buttons and also 2 h1 tags displaying name and count..as part of return value
	2)We also have to write 3 separate click events for 3 buttons..
	3)Lets add an initialData object as well :- 
		const initialData = { 
			cnt :0 , 
			name : "sachin" 
		}
		
		
	4)Now lets maintain the state using React.useReducer() instead of useState()..
		        const [state,dispatch] = React.useReducer(reducer,initialData);
	5)Now define the reducer() method outside of App..what argument it takes? state and action..
	  Always return state = previous state as is using ...state + the new changes to state..
	  like 
		state = {
                    ...state,
                    cnt : state.cnt + 5
                }
                
    6)Add a switch case in reducer() method to handle different actions..then on basis of action change the state variable and return the same
    7)call the dispatch from button click functions and pass the action attribute to it..i.e. like "incre1","incre5","decre5" etc..
      dispatch() is to call its binding reducer() function..
    
const reducer = (state,action) => {
        switch (action){
            case "inc5" :
                state = {
                    ...state,
                    cnt : state.cnt + 5
                }
                //state.cnt = state.cnt + 5;
                break;
            case "dec5" :
                state = {
                    ...state,
                    cnt : state.cnt - 5
                }
                //state.cnt = state.cnt - 5;
                break;
            default:
                state = {
                    ...state,
                    cnt : state.cnt + 1
                }
                //state.cnt = state.cnt + 1;
                break;
        }
        return state;
    }

    const App = () => {
        const initialData = {
            cnt : 0,
            name : "sachin"
        }
        const [state,dispatch] = React.useReducer(reducer,initialData);

        const fnDecFive = () => {
            dispatch("inc5")
        }

        const fnClick = () => {
            dispatch("inc1")
        }

        const fnIncFive = () => {
            dispatch("dec5")
        }
        return <div>
            <h1>{state.cnt}</h1>
            <h1>{state.name}</h1>

            <input type="button" value="inc5" onClick={fnDecFive} />
            <input type="button" value="inc1" onClick={fnClick} />
            <input type="button" value="dec5" onClick={fnIncFive} />
            </div>
    }

    ReactDOM.render(<App />, document.getElementById("root"))



****here what we had done using useState() we are able to do using useReducer()
Extra benefits what we found?
//For example if you want to create multiple states how many times you have to write this useState()?
//multiple times we have to write it or not?
//Instead of that one just we are going to create a simple constant variable object type
//We can put any number of state here or not?
//That is my first benefit..

//The next is i have one component is there..
//Within that component you created one useState()
//That particular state is local for that component or not?
//Now my requirement is i want to share the data from one component to another component
//That means i want to make this as global..
//Now in useState() the cnt variable was a local variable..
//But i want to share across the components
//So for example i have one component is there. within the component one button is there
	If i click on button my cnt is going to be incremented
	That value i dont want to print within this component 
	I want to print in another component..
	
//That means whatever redux concept is there that redux is going to put like useReducer() method within hooks..

//So far if you want to communicate between components how we can?
//I have 2 components are there..
// => parent to children if we want to pass data?//props
// => children to parent if we want to pass data?//event delegation
// => one sibling to another sibling if we want to pass data?//useContext()
// => share data throughout the application?//useReducer()

//action is of any type..whatever we are sending from dispatch() that is received as reducer() method second argument action..
//We pass an object and "type" is a mandatory field.

const reducer = (state,action) => {
        switch (action.type){
            case "INC5" :
                state = {
                    ...state,
                    cnt : state.cnt +  action.val
                }
                //state.cnt = state.cnt + 5;
                break;
            case "DEC5" :
                state = {
                    ...state,
                    cnt : state.cnt -  action.val
                }
                //state.cnt = state.cnt - 5;
                break;
            default:
                state = {
                    ...state,
                    cnt : state.cnt +  action.val
                }
                //state.cnt = state.cnt + 1;
                break;
        }
        return state;
    }

    const App = () => {
        const initialData = {
            cnt : 0,
            name : "sachin"
        }
        const [state,dispatch] = React.useReducer(reducer,initialData);

        const fnDecFive = () => {
            dispatch({type: "DEC5", val : 5})
        }

        const fnClick = () => {
            dispatch({type : "INC", val : 1})
        }

        const fnIncFive = () => {
            dispatch({type: "INC5", val : 5})
        }
        return <div>
            <h1>{state.cnt}</h1>
            <h1>{state.name}</h1>

            <input type="button" value="inc5" onClick={fnDecFive} />
            <input type="button" value="inc1" onClick={fnClick} />
            <input type="button" value="dec5" onClick={fnIncFive} />
            </div>
    }

    ReactDOM.render(<App />, document.getElementById("root"))


*******************************************************************************************************************************************
26/02/2020
*******************************************************************************************************************************************
Ok.. Can you tell me what is the syntax of useReducer()? 
How it is working..?? 
Ok .. UseReducer() i.e. const [state,dispatch] = React.useReducer(reducer,initiaState);
      It is going to return array destructions.. 
      Takes how many arguments? 2 arguments.. 
      First argument is the reducer function. 
      Second argument is the initial state.. 
      Initial state is which type?? Any type... 
      
      For example if we want to put two state variables cnt and name then at that time i need to store it as an object.. 
      const initialState = { cnt :0, name : '' }
      
      So if we want to create multiple state variables with some initial value. How we can create that..
      Ok.. in general how we can write it?
      this.state = {
        cnt :0, 
        name : ''
      }
      
      The same thing if we want to use by using React.useState() how we can write it?
      const [cnt,updateCnt] = React.useState(0)
      const [name,updateName] = React.useState('')
      
      Now by using React.useReducer() I want to maintain the state..How we can do that?
      Just create a simple variable..thats it.
      Pass that variable as an argument to this React.useReducer() method..thats it..
      const initValue = {
        cnt :0, 
        name : ''
      }
      Like this any number of values we can put it..any type we can put it...
      Lets pass initValue to useReducer() method..this initial state is always passed as the second argument.
      The first argument to useReducer() method is a reducer() function..This takes again 2 arguments..currentstate and action
      How we can get the cuurrentstate?We are passing rigt..here first time it is initialValue..
      
    					
    					 |```````````````````````````````````^
      					 v                                   |
      const reducer = (state,action) => { //code..}			 |
      const [state,dispatch] = React.useReducer(reducer,initValue);
      first time in above code state is same as initValue
      
      In the reducer() function what we want? Based on our requirement we can do something..
      At last what we have to return from reducer()? 
         return the updated state..that we get in the array destruction state variable..
      reducer() also returns a dispatch() method. dispatch() method is to call the reducer() 
      Now this dispatch() method takes how many arguments?It takes only one argument always...may be any type..
      For example multiple datas are there..That time we have to use like an object..
      If we want normal string like increment or decrement then we can pass like a string...
      Whatever we are passing, dispatch() method is used to call your reducer() by passing some argument is nothing but 
        that is coming like reducer() method second argument.
        
      The state is coming to reducer() as first argument always..
      Once we get this arguments operations is our wish..We have to return the state finally..
      
    			  ^```````````````````````````````````|
    			  |									  V
      dispatch({     })  ==>  const reducer = (state,action) => { //code..}	
      dispatch() calls reducer() method
      Whatever we pass as argument within dispatch() method is same as "action" i.e. reducer() method second attribute
      
==:========================================================================:==
First Requirement
==:========================================================================:==
Now my requirement is like this..
I have 2 components...Click and Hover..
  Click component has a button  - button text by default is - He clicked me 0 times..
  Hover component has a h1 tag  - h1 text by default is - He hover me 0 times..

Already we did this one using higher order component..
The same requirement I want to use like useReducer() method..

Here by using higher order component what we achieved? 
Here see..if we click on this button of Click component we are going to increment this count..
If we hover on h1 of Hover component we are going to increment this count..
My functionality is same or not? 
If the functionality we want to share across the components, then at that time in our class components what we have?
Higher order components..Same requirement I want to achieve by using useReducer()...

How we are going to do this?? 
Ok ca you tell me what is the common functionality? incrementing the count or not..
Where we have to write that functionality? Within my reducer or not?
How my reducer looks like..Can we write the reducer? pass 2 arguments state and action as we already know.

  const reducer = (state,action) => {
  
  }

What is my initial state here? What we are going to keep? 
I want to keep cnt which will be incremented on click or hover.. 
another one I want to keep is users which is coming from database.., 
and another one I want to keep is photos which is coming from database..
These all the 3 (cnt,users,photos) I want to maintain within the state variable..
So that what is my intialVal?? i.e.

const initialVal = {
  cnt : 0,
  users : [],
  photos : []
}

Now tell me.. this reducer is the responsible person for updating all our state variables or not...i.e. cnt,users,photos..
This cnt state variable we are using in Hover and Click component.
There is one more component is there - Users component - we have using users state variable 
One more Photos component is there - We are going to maintain photos state variable

So can you tell me how many operations we are going to perform? multiple operations or not?
  1) increment count on hover and click - general function
  2) load users 
  3) load photos
  
How we can differentiate this operations? By using action or not
  
How I can differentiate those functionalities here?? 
By using action or not... Based one?? 
We are going to put like type or not.. 
So how it looks like?? Switch case.. 
So we will write a switch case and action.type we need to pass.. 
We will check for case 'INCRE' : then at that time i need to perform some operation.. 
What operations we will perform?? We will increment the cnt.. 
If my case is like users i.e. case 'USERS' :
Then at that time i ma going to update that users or not.. 
If my case is like photos i.e. case 'PHOTOS' :
Then at that time i ma going to update that photos or not.. 

Now this Hover and Click component is going to call which method?? 
reducer() method by passing ? ? 
Ok how we can call this reducer() method?? Using dispatch() or not.. 
Ok how many arguments we have to pass?? 
One argument.. What is that argument?? 
INCRE..which type of argument it is??One object or not.. 
Why because see.. 
Whatever we are passing that is going to 
 reducer() method and in switch case it takes 
 that data by using dot(.) notation or not.. 
 Then it is nothing but what.. 
 My action is object type or not.. {type : "INCRE"}

So here from dispatch() I am going to pass like an object.. 
And here my type is equal to what?? INCRE.. 

i.e. dispatch({type : 'INCRE'}) 
So this is how the dispatch() method will be called 
from Hover and Click component events.. 
i.e. click and onchange events respectively.. 
Now whoever component calls we have to increment the cnt or not.. 
But cnt should be incremented separately for both components.. 
One should not impact the other.. 

Ok yesterday we did all these operations in a single component.. 
Now we are using different different components
One is Click and another one is Hover... 
Now coming to the reducer() function when the 
 case 'INCRE' is matched we have to update the 
 state variable cnt or not.. 

How we can write it?? 
We have to bring our previous property.. 
Along with we will update the state variable cnt
In the state we have the existing cnt variable.. 
Let's get that.. And then increment with 1..

Same like that we have to add other use cases.. 
And finally we have to return the state variable or not.. 


const reducer = (state, action) => {
       switch (action.type) {
           case 'INCRE' :
              state={
                 ...state, 
                 cnt : state.cnt + 1
              }
           //add remaining cases
       }
    return state;
}

In yesterday's program if you remember I had 
 3 buttons in the same component.. 
 And all are operating on the same cnt.. inc5,inc, dec5
 
But now in this case we have 2 different components. 
We are maintaining the same cnt state variable separately for both components
If we click on button from Click component 
 it should not have any impact on 
 Hover component cnt.. It will only update the Click component cnt.. 

Which means my state is independent to components always.. 

If I have class A and class B bad both have same state variable names, 
 Then both are independent or not.. To their classes.. 
So that we are using useReducer() for particular component state or not.. 

So in our case 2 state variables are created and which are independent. 
i.e. one for Click and one for Hover


==:========================================================================:==
Second Requirement
==:========================================================================:==

Now this is my another requirement. 
I have my App component. 
Within App I have 3 components are there.. 
A, B, and C.. all are siblings
Now within my A component i have 
   a label Name
   an inputt text
   a submit button

Now within my B component i have 
   a label Location
   an inputt text
   a submit button


Now whatever I enter in the component A textbox and click on submit it should have to print within the C component.
Same like whatever I put in the component B textbox  and click on submit it should have to print within the C component. 

Now see.. My App component is the root component. 
Within the App component I have Components A, B, C. 
A, B, C are what? They are siblings or not..There is no relationship nothing is there..
So far you know what? 
If a component A, under that another component B.. 
 then at that time we have to pass data 
 from A to B we know(parent to child using props).. we know
 and B to A (child to parent using event delegation).. we know
 
Ok.. now our requirement is what? I have some data within the A..we have to pass to component C..
My C have supose one component as child i.e. D and D have E and E have F...
Within my F also I want the same data..name and location from C..
Generally how we can do it?
  From my A i pass the data to its parent App using event delegation..
  then from my App to its child C, C to its child D, D to its child E, and E to its child F using props...
  like this or not..
  
Now I dont want to do with this hierarchy. Only one hierarchy is there.. 
  then that time it is ok.. we can maintain like this.. I dont want to ddo like this..
  By using useReducer() how we can share the data across your components?yes or no..same data..
  This is my another requirement.. how i can do this?
  
==:========================================================================:==
Solution to my first Requirement
==:========================================================================:==

Solution :: 
lets create an html file..
useReducerEx2.html
===================
//import three mandatory script files - react, react-dom and babel..
//create the container div..<div id="root"></div>
//embed the script tag to write our react code..and the script type should be "text/babel"
//within the script tag take help of ReactDOM.render() to load our App component to the root container div..
//Now within the script tag lets create the App component and return one div.. <div> and close your div.. </div>...
 const App = () => { return <div> </div> }
//lets create 2 components Click and Hover just above the App component..
 const Click = () => { return <h1> Click </h1> }
 const Hover = () => { return <h1> Hover </h1> }
//these 2 components I have to put within my App. Now lets modify my App..
 const App = () => { return <div> <Click /> <Hover /> </div> }
//Run this html and see if the skeletal structure works fine till now..

//Now lets add a button to the Click component..
 const Click = () => { return <h1> Click <button> He clicked me 0 times </button> </h1> }
 //Now here my zero(0) is tatic..i have to make it dynamic..
 //so lets take out that zero from above code..and make it dynamic.
 //ok..how many ways we can maintain the data??
 //we can use state variable or not..we can use useState().
 //but I dont want that one..
 //If we use useState() here then at that time what happens? 
 //That is the local for me..We have to operate within this particular component only or not..
 //I want that functionality like what?its a global..multiple people are using that one or not..
 //so that can we write one initial state as global..write it outside of all components...
 //Now What do you want me to maintain?
   const initval = {
      cnt : 0,
      users : [],
      photos : []
   }
 //users and photos later will be loaded with multiple records from rest api call..so take empty array as of now..
 //Now this initialVal.cnt we have to print within Click component or not..it should take place of hardcoded zero(0)..
 //I want to get this intialVal..how we can write?? 
 //Which means this initialVal.. the state variable we have to make it avaiable to the Click component or not..
 //So by using useReducer() we can get it or not..
 //lets write this code inside of Click component as we will be using the state variable cnt here..
 //React.useReducer() gives us array destruction..it gives us what?our current state..or not..as first argument/.
   our updatedstate and currentstate is first time is equal to initialVal or not ? both are same first time..
   and second argument is a dispatch() method..to call our reducer() function or not..
   React.useReducer() takes how many arguments? 2 arguments..what are those?? reducer() and initialState or not..
      const [state,dispatch] = React.useReducer(reducer,initialVal)
//Now here in the above assignment left side what is state? in  const [state,dispatch]?.. our updated state or not..
//Now as we have our updated state in component Click can we use in the button text to update the count dynamically 
  instead of hardcoded zero? How we can write that? using expression or not? i.e. {}
   const Click = () => { 
      const [state,dispatch] = React.useReducer(reducer,initialVal);
      return <h1> Click <button> He clicked me {state.cnt} times </button> </h1> 
   }
   
   
//Ok what is missing? It gives me error like what? my reducer() is not defined..
//so that can we define the reducer()..lets add that..
  it takes 2 arguments..state and action.
  it returns the updated state at last.
  can we perform some operation here?
  can we write some switch condition here to operate on multiple state values or not?so that i have to differentiate..
  for example..for this particular cnt if we want to put.. for this particular action we will write like.. 
    switch(action.type){}
  now this action is coming from where?? our dispatch() method argument or not..
  now when the case is "INCRE" , i have to update the cnt to cnt + 1 and return the existing state plus this change..
  so in order to return existing state we will use spread operator before state.. ie. (...state)
  Here is the code how my reducer() method will look like after all these changes..
  
  const reducer = (state,action) => {
    switch(action.type){
        case "INCRE" :
            state = {
                ...state,
                cnt : state.cnt + 1
            }
            break;
        case "USERS" :
            //add code for users
            break;
        case "PHOTOS" :
            //add code for photos
            break;
        default :
            state = {
                ...state,
                //add code for others..
            }
    }
    return state;
}

//for this "INCRE" type.. how my dispatch() method will look like? 
  We have to pass one object or not as we are using action.type in swicth case condition..i.e. switch(action.type){}
  dispatch() will look like -> dispatch({type : 'INCRE' }) 
  
//similarly if I have to update users or photos I have to call the reducer() method or not..
  how we will call? using dispatch() method or not.. So how my dispatch() method will look that time?
  dispatch({type : 'USERS', data : [100] })
  
//similarly for photos it will be as below..
  dispatch({type : 'PHOTOS', data : [100] })

//dipatch() mthod will call the reducer() method..
  and whatever data I am passing from dispatch() it will be coming like second argument to my reducer() method.
  
//So When the dispatch() method we trigger from anywhere we send an object..
  And within this object what all properties are there? one is type and another property is data..
  The dispatch() method will invoke the reducer() method by passing this argument as second argument to this reducer()..
  Now inside the reducer() based on this object action type..state changes will be done or some action will be performed.
  ANd finally from my reducer() method state will be returned..
  So we will only decide that one while calling the dispatch() method based on our requirement we will mwntion the acton type and data.
  And we can pass any number of properties to this object when passed to dispatch()
  
//In case of case "INCRE" - only action.type is required..no data is required.. 
  because we are already having state variable cnt..and on every click or hover we are updating the cnt with hardcoded plus 1.
  
//But for other cases like "USERS" or "PHOTOS" i have to pass data or not..
  when we call dispatch we will pass one single object with 2 attributes..type and data here..
  lets update the switch case of reducer() method to update the state variables users and photos..
  
  const reducer = (state,action) => {
    switch(action.type){
        case "INC" :
            state = {
                ...state,
                cnt : state.cnt + 1
            }
            break;
        case "USERS" :
            state = {
                ...state,
                users : action.data
            }
            break;
        case "PHOTOS" :
            state = {
                ...state,
                photos : action.data
            }
            break;
    }
    return state;
  }
  
//Now I ahev to update the cnt always when i click on button..
  So lets call the dispatch() method from onClick..my dispatch() method takes how many argument?? one or not..
  For which action I want to perform this operation? "INCRE" or "USERS" or "PHOTOS"? for our "INCRE" or not..
  so lets send one object with type as "INCRE" to our dispatch() method..i.e. {type:"INCRE"}
  dispatch() method is used to trigger the reducer() method and update the state variable cnt..
  Lets add the onclick function there only inline code instead of writing a separate function..
  
  const Click = () => {
    const [state,dispatch] = React.useReducer(reducer,initialVal)
    return <div>
            <h1> Click : </h1>
            <button onClick={()=>{return dispatch({type: "INCRE"})}}> I am clicked {state.cnt} times </button>
        </div>
  }
  
//Now save the html and test it again..if we are able get the cnt in Click component..from the initialVal..default value 0.
//And also cnt should be updated by plus 1 each time we click on button..
  because we are calling the dispatch() method internally calling the reducer() method 
    which internally updates the state variable cnt...

//lets write the same code for Hover component...first let add useReducer() 
  i.e. const [state,dispatch] = React.useReducer(reducer,initialVal)
  The meaning of above line is what??
  it gives me one state variable or not..which contain three properties or not..
  my state is independent to one component..another component or not..
  Now as we get the state variable...
  Now lets change the static zero(0) to dynamic value inside Hover component..using {state.cnt}
  
  Now the count variable cnt is coming from initial state.. but we have to perform increment with plus one on hover or not..
  Here what we have to do? We have to add one event onMouseHover or not..lets add this inline as well.
  i.e. <h1 onMouseOver={()=>{return dispatch({type: "INCRE"}); }}>
  
  So the final Hover component will look like :- 
  
  const Hover = () => {
    const [state,dispatch] = React.useReducer(reducer,initialVal)
    return <div>
            <h1 onMouseOver={()=>{dispatch({type: "INCRE"})}}> Hover : I am hover {state.cnt} times</h1>
        </div>
  }
  
//Now save the html and test it again..if we are able get the cnt in Hover component as well..
//Now we have to write code for Users and Photos the same way we did like HOC..

** Note : How many times we are going to call useReducer()that many times independent state variables are created...


==:========================================================================:==
Solution to my second Requirement
==:========================================================================:==
I have to share the data across the components..
My data is avaiable in component A..
We have to give it to C..
My C contains D and D contain E and E contains F..or whatever it is..
I want to share it..
That means what? We have to maintain the state or not..across our application now..
Lets start the coding..

Solution ::

lets create an html file..
useReducerEx3.html
===================
//import three mandatory script files - react, react-dom and babel..
//create the container div..<div id="root"></div>
//embed the script tag to write our react code..and the script type should be "text/babel"
//within the script tag take help of ReactDOM.render() to load our App component to the root container div..
//Now within the script tag lets create the App component and return one div.. <div> and close your div.. </div>...
 const App = () => { return <div> <A /> <B /> <C /> </div> }
//Now my App contains three components A, B , C lets return those from within wrapper div..
 const App = () => { return <div> <A /> <B /> <C /> </div> }
//lets create component A..
  it contains what? 
  1)one label Name: 
  2)an input textbox 
  3)a button or not..
  SO component A code will look like :-
 const A = () => { return <div> Name: <input /> <input type="button" value="submit"> </div> }
  
//lets create component B..
  it contains what? 
  1)one label Loc: 
  2)an input textbox 
  3)a button or not..
  SO component B code will look like :-
 const B = () => { return <div> B: Loc: <input /> <input type="button" value="submit"> </div> }
 
//Think..now we wrote all these components in one page..so no import nothing is required..
  we can keep in different different pages also..how we can include? by import and export only..
  SO if we want to write like clean separation..create 3 different files for three different components A, B , C..
  and import all to our App component..nothing more than that..
  
//Now lets create our C component..C component has to display Name coming from A.. and also display Loc coming from B..
  The initial skeleton looks like - 
  const C = () => { return <h1> C: Name: Loc: </h1> }

//Now whenever we put some data in Name textbox and click on submit that data immediately has to reflect in C after Name :
//Now whenever we put some data in Loc textbox and click on submit that data immediately has to reflect in C after Loc :
//But suppose by default I want Name as "Sachin" and Location as "Mumbai" to display in C..
  How we can do that? That should be affected by outside person..should be dynamic values..
  Do you want us to write name sachin and location mumbai as local variables or global? global or not..
  using useReducer() we can do that right..as useState() is used for handling state variables locally..
  
  yes we can write state variable inside component C.. name as Sachin and loc as Mumbai.. 
  two state variables we can keep by using useState()..but that is not affected by what?outside person or not..
  If it is not affected then that time what happened? Always name value is Sachin only..always loc value is Mumbai only..
  Whatever we want to put here(Inside C)..that should be affected by some other people is nothing but global or not.. 
  that should be global to all components..
  ok..global state how we can maintain??by using useReducer() or not..
  Can we write that first..which data we want to maintain we will put that one..
  
//so lets add initVal outside of all components...
  const initVal = {
    name : "Sachin",
    loc : "Mumbai"
  }
  
//Ok..Now at the time of clicking on A component button, what we have to do?
  We have to update the state variable name or not..
  that updation happened where? in the reducer() method or not..
  Who is going to update this state?? reducer() method or not..
  Can we write this reducer() method...we can use this reducer() method wherever we want...
  ok..we know what we are going to update..we know how to get the data from outside to my reducer..
  that time can we write the code directly? my reducer() method.. who is going to update the state..my initial state..
  
  my reducer() is a function..
  my first argument is like what? is current state..
  my second argument is what?? is action..coming from outside data..i.e. coming from dispatch() method..
  at last it returns what? return our state or not..
  Now only one operation is there? or multiple operations are there? 
  multiple operations or not..one is what? update the name and another one is what? update the location or not..
  multiple operations means what multiple functionalities..How we can differentiate? By using switch..
  add switch(action.type){} and the case statements inside..for name and loc...
  update the state variable name when case is name that is action.type is "NAME" 
    How can we update the name? where is the name?? It is coming from outside..from dispatch() method..
    now I am not performing any operation on my existing state name variable..
    like we did for cnt..incrementing exisiting state cnt with + 1.. 
    we are not operating on exisiting name.. name value we are going to completely change or update from outside event..
    for example here.. my initialVal state variable name has value "Sachin".
    I dont want to add something to "Sachin"..I want to override that "Sachin" to "Dhoni"..
    So dont use previous state to update the name..instead we are going to use the data coming from dispatch like action object..
    So lets change the state as existng state (using ... spread operator) plus our name key.. holding action.payload..
    Usually the keyword we use to send data in action object is "payload"..
    So the dispatch() method from component A button click will look like - 
      dispatch({
        type : "NAME", 
        payload: "Dhoni"
      })
    Like the above we have to call the dispatch() to call our reducer() method..to update our state from name sachin to dhoni..
    This total object passed from dispatch() method is coming like action object in reducer() 
    And we are using action.payload to update our state variable name..
    And add same thing for "LOC" case as well..
    
    Lets write the full code for reducer() method..
      const reducer = (state,action) => {
        switch(action.type){
            case "NAME" :
                state = {
                    ...state,
                    name : action.payload
                }
                break;
            case "LOC" :
                state = {
                    ...state,
                    loc : action.payload
                }
                break;
        }
        return state;
      } 
  
//now where we want to use this useReducer()?
//in all the components or not..
//see - already my previous example tells what? 
  If I am using useReducer() is nothing but a new state is going to created or not..
  Each and every time the new state is going to be created..But I dont want to create the new state right..
  Now I want to maintain only one state..can anybody put the data..can anybody get the data..
  ok.. then How many useReducer() we have to write? 
  only one useReducer() we have to write it or not..that will be shared with all components or not..
  Then if i create the useReducer() it returns me what? state and dispatch() or not?
  Who wants the state? and who wants the dispatch() method?
  My C component want the state..My state contains what name and loc..My C has to display that one..
  Who wants the dispatch() method? A and B or not..Why? 
    My A has to call the dispatch() method and which invokes the reducer() method to update my name..
    My B has to call the dispatch() method and which invokes the reducer() method to update my loc..
  Ok now there are three components..
  In future there will be 100 components..For All the components Can I make it available my state and dispatch()?
  Then at that time who wants to put the data then at that time which method they are using? dispatch() or not..
  Then at that time who wants to take the data then at that time what we are using? state or not..
  
  NNow within my app there has 100 components..can i give for all these components - my state and dispatch()??
  If I give my state and dispatch() method to all..
    the components which wants to put the data they will use dispatch()
    the components which wants to get the data they will use state
    
  So only one time we have to create the useReducer() declaration. Multiple times if we create then what happens?
  Each and every time new state is going to be created or not..I dont want that one..
  I want total global one..it should be shared..
  Important - now tell me who has to supply this state and dispatch to all our compnents?
  App only or not..Within App how many components are there I want to give some data to all my components..
  How i can give? I want to give some data to all my children .. how i can give it? By using context or not..
  ok not prop here.. prop is nothing but what ...not only A,B,C..my C contains D,my D contains E,my E contains F..
  sharing data from App to A or App to B or App to C is fine..upto one level we can go with props..
  But here in our requirement we can go to any level down..So why to use props at each component..
  why to maintain at every hierarchy?As the prop has to travel all the way down to the compnent which actually needs it..
  
  So for all the components if we need the data we will go for context..
  Now if we give the context value at App, then all the components of A can use it..all the components of B can use it..all the components of C can use it..
  As A,B,C are children only so A contains how many children they all can use it..B contains how many children they all can use it..C contains how many children they all can use it..
  
//Ok now lets add the useReducer() within my App component..
  only one time we have to write in App..and supply to all my children..
  const [state,dispatch] = React.useReducer(reducer,initialVal)
  
//Now as we want to give my state and dispatch() to all my components..any level down..not a problem..
//how we can do that? Can we use the context?Where we will create the context?? 
  It is global right.. so lets use it outside of all components..
  const ctx = React.createContext();
  
  Now this createContext() takes how many arguments? one argument or not..to maintain the default value..
  Now we are not passing any default value..lets pass it from ctx.Provider
  Now who wants this data? A,B, C or not? lets put all these within ctx.Provider and pass this state and dispatch as value..
  Now as I can pass only single element to my ctx.Provider value attribute..
  but here my requirement is to send state and dispatch both.. so lets wrap both as an object and sent it..
  i.e. {state:state,dispatch:dispatch} 
  is nothing but equivalent to {state,dispatch}
  i.e. if my key and value are same in an object we can just mention once..
  
  const App = () => {
    const [state,dispatch] = React.useReducer(reducer,initialVal)
    return <div>
        <ctx.Provider value={{state,dispatch}} >
            <A />
            <B />
            <C />
        </ctx.Provider>
    </div>
}

Now my state,dispatch is available to all my componnets..as discussed my components A and B wants dispatch and C want state..
lets first display the state variable name and loc in c..using the state that we will receive from App..
Now How we will receive the data from my ctx.Provider component?
there are 2 ways right..one is ctx.Consumer and other is React.useContext() or not..
So that lets use our React.useContext() hook as we are dealing with functional components..

lets modify the component C..
    var ctxData = React.useContext(ctx);
    Now ctxData is of which type? object type or not?
    Within the object what we have? state and dispatch or not?
    Now within the state what we have?my name and location variable or not..
    ok how we can print?? {ctxData.state.name} and {ctxData.state.loc} or not..
    lets see the complete changes in C..
    
    const C = () => { 
    	var ctxData = React.useContext(ctx);
    	return <h1> C: Name: {ctxData.state.name} Loc: {ctxData.state.loc} </h1> 
    }

//Now save the html and test it again..Now we will be able to get the initial value Sachin and Mumbai..
//now if i put some data in name textbox and click on button immediately it should reflect in component C name..
and same for loc..

//Lets go to component A and add onClick event..
  <input type="button" value="submit" onClick={fnUpdateName}/> 
  
  And then define the function fnUpdateName() within component A..Here what i need to do?
    const fnUpdateName = () => {
       //dispatch() --call dispatch and pass data..and action..as an obj
    }
   
  I need to call the dispatch() method with updated name as argument to invoke the reducer() 
    and update the state variable name or not..ok somy dispatch() method is coming from where? from my context ctx or not..
    for that first i need to get the ctx or not..How I will get that?
    Using useContext() or not..same code..we wrote in C to get the state..Can we write that..
    
    var ctxData = React.useContext(ctx);
    Now how can I get the dispatch() method..my ctxData is an object which contains state and dispatch..
    so lets call it ctxData.dispatch()..now this dispatch() takes how many arguments? one or not? What is that?
    My reducer is expecting one action type to match the case in switch and also payload to update the name or not..
    so lets pass it as an object to my dispatch() as a single variable..
      so my dispatch() method will look like - 
            ctxData.dispatch({
                type: "NAME",
                payload : "Dhoni"
            });


    here type: "NAME" understood.. but my payload should be dynamic..we need to send the textbox value..
    can we get that data? How we can get it?? 
    can we use the onChange() on input textbox?or we can also use useState() inside component A to maintain a local state variable..
    
    So lets add a local state using useState() inside A..
    const [name,updateName] = React.useState('');

  Add one onChange() event to my textbox and call this updateName() to update my local state..
  Now on every time we enter some data to textbox name..my local variable name is updated to his value.
  Now ca we send this name as payload..during the dispatch() from button click within the same component..
  ...to invoke the reducer()...to update the global state name..

Now my complete code for A component looks like :-
 const A = () => { 
    const ctxData = React.useContext(ctx);
    const [name,updateName] = React.useState('');
     const fnUpdateName = () => {
            ctxData.dispatch({
                type: "NAME",
                payload : name
            })
     }
     return <div> 
        A: Name:
        <input onChange={(e)=>{updateName(e.target.value)}}/> 
        <input type="button" value="submit" onClick={fnUpdateName}/> 
    </div>
  }

//Now save the html and test it again..Now we will be able to get the updated value for name field or not..when we enter and click..


Again my component B has to be the same code but for loc change..
  We will go to component B. First take the data from textbox..
  so forr that one variable is required..that variable should be local for my component..then better to with state..
  lets create a state variable..
          const [loc,updateLoc] = React.useState('');
    //updateLoc() is to update my local state variable loc..acts as setState() for state variable loc..
    
  Add one onChange() event to my textbox which takes one callback fucntion as argument 
  And call this updateLoc() to update my local state.. from inside the callback..
  Now within updateLoc() we have to update the loc or not.. 
          <input onChange={(e)=>{updateName(e.target.value)}}/> 

  Now I have the local state variable loc.. which always holds the textbox updated value.. and I have to pass this tomy reducer..
  How I can pass it? From my button click event or not? 
  Now from button click which method is required to call the reducer()?
  dispatch() method is required or not..dispatch() method is now coming from where? from our context ctx or not..
  So that can we first get the context?How can we get ctx? using useContext() or not..
          const ctxData = React.useContext(ctx);
  
  Now in my ctxData I have my state and dispatch() method..
  Now where will call this dispatch()? from my onclick() method or not..
  Now for this component lets write the fucntion inline on event onClick={()=>{}} i.e.
         <input type="button" value="submit" onClick={()=>{ctxData.dispatch({type:'LOC', payload :'loc'})}}/> 

  
Now my complete code for B component looks like :-
const B = () => { 
    const ctxData = React.useContext(ctx);
    const [loc,updateLoc] = React.useState('');

     return <div> 
        B: Loc:
        <input onChange={(e)=>{updateLoc(e.target.value)}}/> 
        <input type="button" value="submit" onClick={()=>{ctxData.dispatch({type:'LOC', payload :loc})}}/> 
    </div>
}

//Now save the html and test it again..Now we will be able to get the updated value for loc field as well or not..when we enter and click..

Note :- So throughout the application if we want to share the data we will use useReducer() along with context..
      Both we need to use..using simply useReducer() it is not possible..
      

==:========================================================================:==
==:========================================================================:==

There are few more hooks..These are for performance related hooks..
1. useCallback()
2. usemeno()

Now see what is the problem..Then we can rectify the problem by using useCallback().
Ok simply I have 3 components are there..one is Heading..another is like Count..and the other is Button..
These are the components..Heading,Count,Button.. By using these 3 components I have to design the form
My view should be like this...
  Heading - My IT
  Count -   My age is 31 
            I need a button (If i click on button this age should be incremented by 1)
            My Salary is 10000
            I need a button (If i click on button this salary should be incremented by 1000)
  Button -  for reusable 
  
  We will need Button component inside Count..
  and pass the text like dynamic..
  
Solution
=========
lets create an html file..
useCallback.html
===================
//import three mandatory script files - react, react-dom and babel..
//create the container div..<div id="root"></div>
//embed the script tag to write our react code..and the script type should be "text/babel"
//within the script tag take help of ReactDOM.render() to load our App component to the root container div..
//Now within the script tag lets create the App component and return one div.. <div> and close your div.. </div>...
 const App = () => { return <div>  </div> }
 
<script src="react.development.js"></script>
<script src="react-dom.development.js"></script>
<script src="babel.js"></script>
<div id="root"></div>

<script type="text/babel">
const App = () => {
    return <div>
        </div>
}
ReactDOM.render(<App />, document.getElementById("root"))
</script>
  

//Now return the <Title /> component from App..and pass name="MyNIT" as attribute..
const App = () => {
    return <div>
           <Title name="MyNIT" />
        </div>
}

//Now lets create the title component..
The attribute sent from App to Title is coming like what?? 
if it is a class component it should receive like props..
if it is a functional component it will receive like argument ot not..
usually we receive as an variable data..and retrieve the exact attribute using dot(.) operator.
ex..
const Title = (data) => {
    return <div>
           {data.name}
        </div>
}

Which means my argument data is object type or not..
so that can we write directly as an object format in the argument..
which takes how many properties? name..can we put name within it? 
  i.e. const Title = ({name}) => { }
ok how we can use that name ? using expression or not.. {name}
This is also another way of writing it..

Next add 2 buttons...to App
<Button />
<Button />

Now go and refresh the HTML page..we should see one label NIT and 2 buttons with text "INC" on it..

Now lets add the text like "Inc Age" and "Inc Salary" on button text..
lets pass these as title attribute to my Button component..
How my Button component will receive it ? As argument or not?
Can we receive the same way we did for Title component..using object notation..
const Button = ({title}) =>{
    return <div><button>{title} </button></div>
}


Now my App looks like :
const App = () => {
    return <div>
        <Title name="NIT" />
        <Button title="INC Age"/>
        <Button title="INC Salary"/>
        </div>
}

//But i dont want to pass it as attribute from my App component..

//there is another way...can we pass like below?
        <Button>INC Age</Button>
        <Button>INC Salary</Button>
//Now for this Button component what is this content?children or not??
//So whatever is there inside <Button>....</Button> all are children..
//Ok now how I can represent all my children in my component Button..
//we have "children" one prop is there..directly we can use for functional components..
//In case of class components we have this.props.children..
//And now in my Button component I can get it like : 
  const Button = ({children}) =>{
      return <div><button>{children} </button></div>
  }

//So if we are passing any other attribute to button we will receive it using an object..
  but for receiving its children we have to use the keyword children..eg..
  const Button = (arg, {children}) =>{
      return <div><button>{arg.title} - {children} </button></div>
  }
  
//lets create the Count component..and return from App..
  same as Title component..lets pass title attribute to Count from my App component..
  And in Count Component receive it in argument object notation..
  const Count = ({title}) =>{
    return <h1>{title}</h1>
  }

Now my App looks like : 

const App = () => {
      return <div>
        <Title name="NIT" />
        <Count title="Age"/>
        <Button>INC Age</Button>
        <Count title="Salary"/>
        <Button>INC Salary</Button>
       </div>
}

So in browser it is loaded like......
NIT
Age: 
INC Age//a button
Salary: 
INC Salary//a button

So now instead of labels Age: and Salary: I want to show like default values..
Age: 1 and Salary: 1000
This is also dynamic value or not...so it should be coming from outside it or not..
So can we take another argument inside my Count component as follows..
  as we will be capturing here the value sent from <Count /> object from App..
  e.g. 
  const Count = ({title, val}) =>{
    return <h1>{title} {val}</h1>
  }
  
And my App should look like :- 
const App = () => {
    return <div>
        <Title name="NIT" />
        <Count title="Age: " val="0"/>
        <Button>INC Age</Button>
        <Count title="Salary: " val="1000"/>
        <Button>INC Salary</Button>
        </div>
}

But now I want dynamic data..Do you want me to hardcode like 0 and 1000 ? No then what?
We have to use state or not?So that lets remove this 0 from <Count title="Age: " val="0"/> and make it as state variable..
Similarly remove this 1000 from <Count title="Salary: " val="1000"/> and make it as state variable..
Ok how we can do that? Where we will add the state variable? Within my App or not?
We will use useState() for that...

const [age,updateAge] = React.useState(0);
const [salary,updateSalary] = React.useState(1000);

 and now use this state variable instead..
 const App = () => {
    const [age,updateAge] = React.useState(0);
    const [salary,updateSalary] = React.useState(1000);

    return <div>
        <Title name="NIT" />
        <Count title="Age: " val={age} />
        <Button>INC Age</Button>
        <Count title="Salary: " val={salary}/>
        <Button>INC Salary</Button>
        </div>
}


//Now if i want to click on this age button I want to increment the age in the Count component 
//Now if i want to click on this salary button I want to increment the salary in the Count component 
//Now where we will write the code for onClick?
Within my Button component return actual html button or not..
Because my Button component will not understand the click event...

const Button = ({fnUpdate,children}) =>{
    return <div><button onClick={fnUpdate}>{children} </button></div>
}

Ok now tell me how many buttons we are using?? 2 so lets write a generic function..fnUpdate..
now my age is present where? in my App..So my requirement is like when i click on age butto i have to increment age..
which means i have to perform some operation in my App..can we pass that function?
now my Count will take that function as props..

Both the methods are going with which key? fnUpdate or not..so Button component will trigger the same function..
const App = () => {
    const [age,updateAge] = React.useState(0);
    const [salary,updateSalary] = React.useState(1000);

    const fnSetAge = () => {
        updateAge(age + 1)
    }

    const fnSetSalary = () => {
        updateSalary(salary+1000)
    }
    return <div>
        <Title name="NIT" />
        <Count title="Age: " val={age} />
        <Button fnUpdate={fnSetAge}>INC Age</Button>
        <Count title="Salary: " val={salary}/>
        <Button fnUpdate={fnSetSalary}>INC Salary</Button>
        </div>
}


Can we put console.log messages to my components...
const Title = ({name}) =>{
    console.log('Title Component...')
    return <h1>{name}</h1>
}

const Button = ({fnUpdate,children}) =>{
    console.log('Button Component...', children)
    return <div><button onClick={fnUpdate}>{children} </button></div>
}

const Count = ({title, val}) =>{
    console.log('Count Component...', title)
    return <h1>{title} {val}</h1>
}


Now can we save this and load the page...open my console..and see the logs..
Title Component...
Count Component... Age: 
Button Component... INC Age
Count Component... Salary: 
Button Component... INC Salary

which is expected..

Now I click on the increment age..lets see what gets printed..
Title Component...
Count Component... Age: 
Button Component... INC Age
Count Component... Salary: 
Button Component... INC Salary

Again all the components gets loaded or not? 
Why I need that one?Only i have updated age..there is no updattion to Button and Title component or not..
first tell me if the state is not changed i dnt want to execute the methods..what component is there?
pure component is there or not..
pure component purpose is what?
If there is no update nothing is there..dont call it..

Recat.Memo() is there..alternative to pue component..is not a hook..
how many components are there all are like functional components..can we make it like pure?
How we can? By using React.Memo() is same as my class extends React.PureComponent
Lets change all the components..

const Title = React.memo(({name}) =>{
    console.log('Title Component...')
    return <h1>{name}</h1>
})

const Button = React.memo(({fnUpdate,children}) =>{
    console.log('Button Component...', children)
    return <div><button onClick={fnUpdate}>{children} </button></div>
})

const Count = React.memo(({title, val}) =>{
    console.log('Count Component...', title)
    return <h1>{title} {val}</h1>
})


Now can we save this and load the page...open my console..and see the logs..
Now on initial load it loads all which is as expected..
Now click on increment age and here is the log..
Count Component... Age: 
Button Component... INC Age
Button Component... INC Salary

So far we did not use callback..
My title is not changed..its a static one..so it is not loaded..
My Count Age sgould be rendered..because you are updating what? Age..
Next One? Button incrementing Age..We are performing some operation on Button..
But I dont want to render Button incrementing Salary.. or not? because no changes made for salary..

this is because we are using same button for both..same compnent..
lets handle this by using callback hook..We will be mentioning for which variable we are performing the operation...
   const fnSetAge = React.useCallback(() => {
        updateAge(age + 1)
    },[age]);

    const fnSetSalary = React.useCallback(() => {
        updateSalary(salary+1000)
    },[salary]);


Count Component... Age: 
Button Component... INC Age

Now this is the expected output or not...

These are called memoized functions..

But we also have memoized components, memoized functions and memoized variables..
	memoized components //React.memo()
	memoized functions  //React.useCallback()
	memoized variables  //useMemo()
	
*******************************************************************************************************************************************
27/02/2020
*******************************************************************************************************************************************
useCallback() works like a memoized callback hook
My useMemo() and useCallback() used for performance improvements..

useMemo() is one more hook available..This one is going to work for values..
If you made some change on values..
Now we will handle like values..like how we will handle? we will see one example..

Requirement :- 
I have one button is there..on button i want to show like count - 0
I have one more button also..on button i want to show like count - 0 
If i click on the button I want to increment the count for that button..
example button 1 click should increment its count by 1..
example button 2 click should increment its count by 1..
both counts are independent..

for the first button - in the same line i have label and for 2nd button there is no label..
for button 1 if count is even value - label will be visible as even otherwise odd.. 

How it looks..rough sketch

Button count 0  even
Button count 0  

Button count 1  odd
Button count 3 


Lets write the code for same..

useMemo.html
===================
//import three mandatory script files - react, react-dom and babel..
//create the container div..<div id="root"></div>
//embed the script tag to write our react code..and the script type should be "text/babel"
//within the script tag take help of ReactDOM.render() to load our App component to the root container div..
//Now within the script tag lets create the App component and return one div.. <div> and close your div.. </div>...
 const App = () => { return <div>  </div> }
 
// Now I have to return first button with label and then next button..
 const App = () => { 
 		return <div>  
 			<button>count: {count1} </button>
 			<button>count: {count2} </button>
 		</div>
 }



//Now if we write this code what is missing here?? count1 and count2 is missing or not?
//These variables are static or having dynamic data? keeps on changing or not?so that can we create the state variables?
//lets start..modifying App..lets add 2 state variables for count1 and count2 using useState() as we are using functional component..
 const App = () => { 
 	const [count1,updateCount1] = React.useState(0);
 	const [count2,updateCount2] = React.useState(0);

 		return <div>  
 			<button>count: {count1} </button>
 			<button>count: {count2} </button>
 		</div>
 }



//what next??state variable default values gets printed on first time load on buttons as 0 for both..
//but we have to increment the count or not..and we have updateCount1() and updateCount2() to increment the state variables count1 & count2..
//lets add onClick event to the buttons and call these methods to update state variables..
 const App = () => { 
 	const [count1,updateCount1] = React.useState(0);
 	const [count2,updateCount2] = React.useState(0);

 		return <div>  
 			<button onClick={()=>{ updateCount1(count1+1); } }> count: {count1} </button>
 			<button onClick={()=>{ updateCount2(count2+2); } }>count: {count2} </button>
 		</div>
 }
//Now save this html file and refresh the browser..
//We should be able to see 2 buttons ready with initial count as 0 on them..
//When we click on any button it is incrementing its count..


//Now we have print the label EVEN or ODD for our first button count1 value or not..
//How we can do this??
//Can we write a function isEven() inside App and use the same for label?
	const isEven = () => {
		return count1%2 == 0;
	}
//lets add a <h1> tag after the first button.. and call this isEven() there...
            <h1>{isEven() ? 'EVEN' : 'ODD'}</h1>
//Now my App should look like -
	const App = () => {
    const [cnt1, updateCnt1] = React.useState(0);
    const [cnt2, updateCnt2] = React.useState(0);
    const isEven = () => {
      return cnt1 % 2 == 0;
    };
    return (
      <h1>
        <p>
          <button onClick={() => updateCnt1(cnt1 + 1)}>count:{cnt1} </button>
        </p>
        <h1>{isEven() ? 'Even' : 'ODD'}</h1>
        <p>
          <button onClick={() => updateCnt2(cnt2 + 1)}>count:{cnt2}</button>
        </p>
      </h1>
    );
  };
  
//Now save this html file and refresh the browser..and now my label even and odd should be visible or not..
//ok now is my label is changing ? even..odd..even...? based on the state value change or not..
//if we update the state value then what happens? my render() method gets triggered or not..
//within the render() what we did? isEven() we are calling or not?
//when we are calling isEven() at that time my count1 is what?changed or not...and it returns true or false..and keeps on changing
//Now we have this label even or odd right.. Which is coming from isEven() 
//let's put a delay here.. 
//On button one click.. After some time I am going to return this value.. 
//so for that I am going to put some condition.. A loop or something
//for example :-
	const isEven = () => {
		let i= 0;
		while(i < 2000000000) {
			i++;
		} 
		return court%2 == 0;
	}

//so this while loop only for delay I put.. 
//so after this while loop only my return statement will work or not.. 
//this is synchronous one.. 
//if u put like setTimeout() then what happens?? 
//that is asynchronous one.. So it won't wait for this setTimeout() to finish.. And returns immediately

//This while loop code does not have any impact on variable court.. 
//we have added this loop in order to just add some delay... 
//now save the HTML file and refresh the browser.. 
//now click on button 1 and we can see it's taking time to load the label.. Even or Odd.. 
//So now clicking on button 1 .. Incrementing it's count 1.. that also happen after a delay
  And displaying the even or odd based on count1 value with some delay is ok.. 
  As we are showing label on basis of count1 state variable change.. 

//Now coming to button 2 if we click on it, it is not having nay impact on label even or odd.. It's value is same.. 
//but this operation also takes time.. With delay count2  is updated on button 2..
Now why is this happening?? We are not expecting this right.. 
As there is no change to state variable count1 and label is supposed to change if this state variable count1 is changed.. 
//that means if there is no impact on my state variable..then at that time why I need to be waiting or paying for that changes?? 

//can we use some hook method here? If it is a call back we were using React.useCallback()... 
//if it is a blue then we are using hook.. React.useMemo() 

//where we are going to write this code?? On the value where we are going to perform some operation or not... 

//for example :-
	const isEven = React.useMemo(() => {
		let i= 0;
		while(i < 2000000000) {
			i++;
		} 
		return count%2 == 0;
	},[count1]) 

//now this one should now impact on my count1 only or not... 

//Now save this html file and refresh the browser..and now there won't be any delay if we are clicking on button 2..
//that means what?? My useMemo() is going to return me what?? 
That value it is going to return me directly or not.. 
If we use isEven() now.. We will get error.. Because we are using useMemo() on the isEven() function definition which returns me a value.. 

//ok tell me.. Before we used useMemo(), why button 2 click event was taking time?? 


==:================================================================================:==
For example I want my own hooks also.. Custom hook.. Ok
How my hooks looks like? In general.. 
//hooks are generally methods..we call them..and we pass the initial value..and this returns an array destruct..

      const [] = useCustom(DefaultValue) 

//So far we have used like :
	useState()
	useEffect()
	useContext()
	useReducer()
	useCallback()
	useMemo()
	
//But now i want to write my own hook..
//useCustom() or something we can put it..
//I want to write some functionality for that..ok
//take one simple functionality and use that one..
//suppose this is the requirement..
//I have a component with 3 buttons..one is increment, one is decrement and the other is reset..and one label with default value zero(0)
   If I click on increment button it should increment by 1..
   If I click on decrement button it should decrement by 1..
   If I click on reset button it should reset to 0..
  So this is like one component..i.e. component1
  
//Same like I am going to create another component - component2 - with exactly same skeletal structure..
  So component2 is also having 3 buttons..one is increment, one is decrement and the other is reset..and one label with default value zero(0)
   If I click on increment button it should increment by 1..
   If I click on decrement button it should decrement by 1..
   If I click on reset button it should reset to 0..
   
//So tell me here how many times we are writing the code? In the component1 we are writing..In the component2 also we are writing
//So this is duplicate code or not..
//So by using our custom code we can reduce this code..We can reuse the custom code in component1 and component2..

//SO now we are going to write one component component1. and the same code I am going to copy paste in component2..
  As we know each component has 3 buttons so it has 3 methods as well..to handle the onclick event..
  That means component1 also has 3 methods.. and component2 also has 3 methods.
  I dont want to write the same code in multiple components..
  write one place and use that one..
  
  How many ways we can deal with this ?
  //By using useReducer()
  //By using custom hook - useCustom()
  
//So lets try to write the code for above...

customHook.html
================
//import three mandatory script files - react, react-dom and babel..
//create the container div..<div id="root"></div>
//embed the script tag to write our react code..and the script type should be "text/babel"
//within the script tag take help of ReactDOM.render() to load our App component to the root container div..
//Now within the script tag lets create the App component and return one div.. <div> and close your div.. </div>...
 const App = () => { return <div>  </div> }
//Now lets return 2 components from component App..
   const App = () => { return <div> <A /> <B /> </div> }
//Now lets create the A and B component..
//What will be the content of A and B? We will have 3 buttons and a label or not..
const A = () => {
    return <div> 
        <h1>{cnt}</h1>
        <button>Increment</button>
        <button>Decrement</button>
        <button>Reset</button>
        </div>
}
//I have added one label and three buttons..Now what is missing here..
//my cnt in label is dynamic and it is missing or not..
//so lets create a state variable to handle that..lets create that local state variable cnt inside component A..
  const [cnt,updateCnt] = React.useState(0)
//Now what next? We have to update the count on each button click..so for that I need to write onclick methods for all buttons or not..
//lets add three methods..within component A button clicks..
//Now after adding all these now my component A looks like :
const A = () => {
    const [cnt,updateCnt] = React.useState(0)
    const increment = () => {
        updateCnt(cnt+1);
    }
    const decrement = () => {
        updateCnt(cnt-1);
    }
    const reset = () => {
        updateCnt(0);
    }
    return <div> 
        <h1>{cnt}</h1>
        <button onClick={increment}>Increment</button>
        <button onClick={decrement}>Decrement</button>
        <button onClick={reset}>Reset</button>
        </div>
}


//Now save this html file and refresh the browser..and now see if we are getting this structure..
//the functionality is also working as expected..for updating cnt..using the buttons

//Now the same thing I want to write for component B.. lets copy the same code and  see..

const B = () => {
    const [cnt,updateCnt] = React.useState(0)
    const increment = () => {
        updateCnt(cnt+1);
    }
    const decrement = () => {
        updateCnt(cnt-1);
    }
    const reset = () => {
        updateCnt(0);
    }
    return <div> 
        <h1>{cnt}</h1>
        <button onClick={increment}>Increment</button>
        <button onClick={decrement}>Decrement</button>
        <button onClick={reset}>Reset</button>
        </div>
}

Now this is exact same code or not..which is duplicate..
So how we can reduce this one? duplicate functionalities we have wrote na..for increment(), decrement() and reset()..
One is by using reducer() method by writing these functionalities here..
another one way is by using custom hooks..

can we create one hook with these functionality and can we use this hook?
Now all hooks are what? methods or not..
so that lets write a method..it should return what? array or not?? 
my each and every hook is going to return me one array destruction or not..
lets return one array from this method..

So now my basic hook method should look like :- 
	const useCustomHook = () => {return []}

Every time my hook expects what? one initial value or not..so that lets pass it as argument to that hook method..
	const useCustomHook = (cnt) => {return []}

Now let's cut all the functionalities from A and B to my useCustomHook...
And now my useCustomHook() looks like - 
	const useCustomHook = (cnt) => {
    	const increment = () => {
        	updateCnt(cnt+1);
    	}
    	const decrement = () => {
        	updateCnt(cnt-1);
   	 	}
    	const reset = () => {
        	updateCnt(0);
    	}
    	return [];
	}

//Now lets remove my useState() - i.e. state creation part from A and B as well.. as we are using updateCnt() within the reducer only...
      const [cnt,updateCnt] = React.useState(cnt)
	but inside useCustomHook() dont hard code the initial default value..
	Rather expect from the components to send this cnt default value who is going to use this useCustomHook()
	And in useCustomHook() receive cnt as argument...useCustomHook(cnt)
    
//Now lets see after all these changes how my useCustomHook() and A and B components looks like......
const useCustomHook = (cnt) => {
    const [cnt,updateCnt] = React.useState(0)
    const increment = () => {
        updateCnt(cnt+1);
    }
    const decrement = () => {
        updateCnt(cnt-1);
    }
    const reset = () => {
        updateCnt(0);
    }
    return [];
}


const A = () => {
    return <div> 
        <h1>{cnt}</h1>
        <button onClick={increment}>Increment</button>
        <button onClick={decrement}>Decrement</button>
        <button onClick={reset}>Reset</button>
        </div>
}

const B = () => {  
    return <div> 
        <h1>{cnt}</h1>
        <button onClick={increment}>Increment</button>
        <button onClick={decrement}>Decrement</button>
        <button onClick={reset}>Reset</button>
        </div>
}


//Here if we see A and B we can easily guess that these values (cnt,increment,decrement,reset) are not available to A and B..
//So A and B they are expecting cnt,increment,decrement,reset
//So now from where I will get this cnt?and the rest as well..all these are defined in my useCustomHook() only or not..
//Now my cnt is going to keep on changing or not..
//So we have the cnt,increment,decrement,reset everything in useCustomHook()
//can we give this to A and B who need all these..
//Now how we will give this??lets return as an array from useCustomHook() or not..
    return [cnt,increment,decrement,reset];

//Now anybody calling this particular method - useCustomHook() it is going to return these 4 values or not..cnt,increment,decrement,reset
//Now lets call this method useCustomHook() from A and B.. and as it returns an array so lets destruct while calling only..by assigning it to array destruct variable as follows..
//No need to change anything else..as we are using the same variable names inside A and B which we captured in array destruction..from useCustomHook()..
//Now the whole code looks like :- 

<script src="react.development.js"></script>
<script src="react-dom.development.js"></script>
<script src="babel.js"></script>
<div id="root"></div>

<script type="text/babel">

const useCustomHook = (cnt) => {
    const [cnt,updateCnt] = React.useState(cnt)
    const increment = () => {
        updateCnt(cnt+1);
    }
    const decrement = () => {
        updateCnt(cnt-1);
    }
    const reset = () => {
        updateCnt(0);
    }
    return [cnt,increment,decrement,reset];
}


const A = () => {
    const  [cnt,increment,decrement,reset] = useCustomHook(0);
    return <div> 
        <h1>{cnt}</h1>
        <button onClick={increment}>Increment</button>
        <button onClick={decrement}>Decrement</button>
        <button onClick={reset}>Reset</button>
        </div>
}

const B = () => {  
    const  [cnt,increment,decrement,reset] = useCustomHook(0);
    return <div> 
        <h1>{cnt}</h1>
        <button onClick={increment}>Increment</button>
        <button onClick={decrement}>Decrement</button>
        <button onClick={reset}>Reset</button>
        </div>
}
const App = () => { 
    return <div>
        <A />
        <B />
        </div>
}

ReactDOM.render(<App />, document.getElementById("root"))

</script>

Similarly any functionality is there..if it is duplicated then create your own hook and use wherever you want..


Few other hooks are there like
		-useLayoutEffect()
		-useDebuggerValue()
		-
		
Pending..not found proper documentation..

lets work on our stdApp -previous requirement we discussed..
//install mongodb
//create stdApp - (create a server folder and a client folder)
//within the server folder can you create the skeleton using express()
//Within client - we can either use webpack or create-react-app to create the application.
//Within the client I have a registration form..we have to use only functional components.
//register.html - userid,password,email,phoneno,register button..and one update button..
//now whatever the registered user that registered user should have to come in a table i.e. reusable component again..
Again this table will be having multiple registered users. And for each user there will be a edit and delete button.
In the table we have to add these buttons for all the users..so every row should contain these..
//If we click on edit for a particular user..or row..then that data from table should be pre-populated in Register component form..
//My Register component is out of from my Users component or not..So what is the relationship between these 2..nothing right..
//Can we use useReducer() along with context Provider and useContext()..to maintain a global state and pass the data to components..

//All these component we have to put inside the root component that is the app component..
 
//I want to create a TextBox Component again..
For this particular TextBox component if we want to pass a prop like type="text" then it will be treated like normal textbox.
If I pass prop like type="password" then my textbox is like password field.
If I pass prop like type="radio" then it will be radio button..
If I pass prop like type="checkbox" then it will be checkbox ..

//Same like that i dont want to hardcode labels like userid,password,email,phoneno,register button inside my register.html
//can we pass the labels also for this particular text?

//we will create using.. hooks+mongodb+nodejs
//lets design this one. 
		
//Ok now tell me now how many components are required in this ?
	Lets create one component for the form section..name it as Register component..
	Lets create one component for the table section..name it as Users component..
	//within the Users component we have a table..and within Register component we have textboxes..lets create generic components for those
	Lets create a generic Table component..for Users component
	Lets create a generic Textbox component..for Register component

//Now here as we discussed we will be using reducer,useReducer() to maintain state...
//On Table particular user EDIT click - Here who is going to use dispatch and who is going to use state??
//So here Users component will use dispatch() and my Register component will use the state or not..

==========================================================================================================================================
Implementation
==========================================================================================================================================
//Now in server side we are going to use nodejs by using express...
//Can we create that one?
//create a folder StdApp. 
//create 2 sub folders inside StdApp - client, server
//cd server
//express (type express and hit enter - it will create skeletal structure)
//npm install (download all dependancies to node_modules)

//while npm install from server folder is in progress lets go with client side changes..
//We will create project from scratch using webpack..
//open a new terminal..
//cd client
//Here we need package.json first right..so lets run the below command
//npm init
//lets download all the dependancies..dev and prod..

prod dependancies
===================
//npm i react react-dom axios --save

dev dependancies
===================
//npm i babel-core babel-loader babel-preset-env babel-preset-react --save-dev
//npm i webpack webpack-dev-server html-webpack-plugin webpack-cli --save-dev
//npm i style-loader css-loader --save-dev

//Now lets create the application structure in client folder..
//create src folder inside client..
//inside src folder lets create index.html ,App.js, index.js first..
//Add just sample html code as of now into index.html.. 
	<!DOCTYPE html>
	<html>
		<head>
    		<title>stdapp</title>
		</head>

		<body>
    		<div id="root"></div>
		</body>
	</html>
	
//Now write the App.js - Create and Return the App component from here....
	import React from 'react';
	const App = () => {
		return <div>
				Helloooo...
			</div>
	}
	
	export default App;

//Now write the index.js - render the App component in container div with id is root..
	import React from 'react';
	import App from "./App";
	import ReactDOM from "react-dom";
	ReactDOM.render(<App />, document.getElementById("root"))
    
//Now lets create webpack.config.js and .babelrc
//.babelrc -
	 { "presets" : ["env", "react"] }
	 
//webpack.config.js  - 
	var hwp = require("html-webpack-plugin");
	var bootStrapHtmlPage = new hwp({
    	template : "src/index.html"
	});
	var MyModule = {
    	module : {
        	rules : [{
            	test : /\.js$/,
            	exclude : /node_modules/,
            	loader : ['babel-loader']
        	},{
            	test : /\.css$/,
            	loader : ['style-loader','css-loader']
        	}]
    	},
    	plugins:[bootStrapHtmlPage]
	}
	module.exports = MyModule;


//package.json
//We need to add the changes to run this application ..npm start to use webpack-dev-server
{
	....
	....
	"script" : {
	    	"start": "webpack-dev-server --development --open",		
			"test": "echo \"Error: no test specified\" && exit 1"
	}
}

//to fix error...
//npm i babel-loader@7 --save-dev




*******************************************************************************************************************************************
28/02/2020
*******************************************************************************************************************************************
Ok..Now what was our requirement?? We have to develop one UI using react..
We have two sections on our page..within App
1)Register
	userid,password,email,phoneno,register button..
	//use TextBox component..
	//On click of register button I want the Register form data in json object format..
	//Then this json object data I have to pass to my server..or not
	
2)Users
	Load Table here using TableComp
	//At the time of loading only we have to make a request to the server..and get the data...& show the data in the tabular format
	//uses TableComp component
	
	
Now what is the structure then? We have one App component..
Within the App component we have Register and Users component..

Register component uses TextBox component for creating textbox
	//What we will pass to TextBox component to create Textboxes with label?? e.g. name:[textbox]
	//We have to pass label and type or not.. 
		i.e. we will pass like attributes from Register component while using the TextBox instance there..
		
Users component uses Table component for loading Table..
	//What we will pass to TableComp component to create the Table? One table to another table what is the difference?
	//We have to pass headers, then for body we need complete record "dataObj and key"..
	//headers and keys are static array..are not supposed to change..
	//but dataObj is an array of objects - each object representing one registered user details..
	//key we need to create td..to fetch from dataObj and to create a row..dataObj[key]
	//so based on key it is going to display data within tr..
	//dont use keyword key..use some other name..
	//we will also have edit and delete button for each row..
	//on click of edit..it should open a modal and load exact the same fields(selected row data) within the popup in a form..and there will be update button
	

Lets start the code from wherever we stopped..Till now designed App component and loaded to index.html..using ReactDOM.render() in index.js
For that we have designed 3 files..within src
	1)index.html
	2)App.js
	3)index.js

Now lets add below files to src..
	4)Register.js
	5)TextBox.js
	6)Users.js
	7)TableComp.js

Now lets create now - the skeleton for Register and Users...
All are functional components only..

Register.js
===========
import React from 'react';
const Register = () => {
    return <div></div>
}
export default Register;

Users.js
===========
import React from 'react';
const Users = () => {
    return <div></div>
}
export default Users;


Now where you want me to use these? inside App or not..inside our root component..
lets modify App.js..
App.js
===========
import React from 'react';
import Users from "./Users";
import Register from "./Register";

	const App = () => {
		return <div>
				<Register />
				<Users />
			</div>
	}
export default App;
		

Now lets discuss each component in detail and lets enhance these components a bit more..
Coming to Register component we need to design a form like structure - uid, password, email and phone..with a register button
But as these 4 fields(uid, password, email and phone) are textbox -lets create a reusable component Textbox for the same..
Create a file inside src..TextBox.js
Now just think..This Textbox type is what? may be text, may be password, may be email..may be checkbox or other..
Now I want to include the label also inside TextBox component..so the TextBox component should look like - e.g. name:[textbox]
//for the whole line I am creating the textbox component.. each line is looks like - 
	label : [textbox(type)]
	
So what we need as input to this component?one label and one type or not..
So when we need all these lets decide within the TextBox component only that what we need for this component..
			and ask to the component who is instantiating this <TextBox /> to pass these..with same key what I am expecting..
So these lbl and type should be coming from Register component where we will be instantiating TextBox -  <TextBox lbl={} type={}/>

TextBox.js
===========
import React from 'react';
const TextBox = ({lbl,type}) => {
  	return <p>
            <b>{lbl} :</b><input type={type} />
        </p>
}

export default TextBox;


Now this TextBox where you want us to use? In our Register component or not..
Now coming to Register component..Here we have to use the TextBox component which we have created just now..
So we will use the TextBox component to create the label with textbox..for four fields..

Lets first import the TextBox component..
Once we have added TextBox four times by sending different lbl and type..
Lets add the Register button at end..
Now what we are expecting? On click of this button we should read the data from all these textfields and prepare the json or not?
How we can do that?? First lets add a click event to button.. and define the function..

Register.js
===========
import React from 'react';
import TextBox from "./TextBox";
const Register = () => {
    const fnRegister = () =>{
        
    }
    return <div>
        	<TextBox lbl="Uid" type="text" />
        	<TextBox lbl="Password" type="password" />
        	<TextBox lbl="Email" type="email" />
        	<TextBox lbl="Phone" type="number" />
        	<input type="button" value="Register" onClick={fnRegister}/>
        </div>
}

export default Register;


//Just all files and start the webpack server.. ok how we can start? 
 script is "npm start" or not..We already mentioned in package.json..
 type npm start ..
 once server is up and running..type localhost:8080/ in browser and see if Register section is ready or not..
//Now tell me..at the time of clicking on the register button all the text field data I needed or not..
  in which format? json object format or not...In this Json ..as a client side developer which part we have? key or value?
  we have value...my keys are given by whom? by server side ppl..
  we are only developing server..we are only developing client..so that we can set here also the keys right..
  the same keys we are using in sevrer as well..
  
//Now as we understand on clicking on this register button..i want to display one json object...
that json object we havt to pass to whom? to my server or not..
  
//Now just think we have added the onclick event in Register component.. for register button..
  i.e. fnRegister()..I just want to print the json..this json object i have to store where? in the mongodb database or not?
  
//Now tell me how I can take this data when i click on register button? 
Now we are in Register component..and we have only TextBox components here and a register button..And on click of this button we need data.
But As TextBox is not an html element..its a custom component.. we cant use onChange() event on same...

i.e. fnRegister() is called on Register button click and inside this i want to retrieve all the <input > values..
but we cant fetch here directly on button click... as earlier we has used onChange() event on input elements(i.e. <input />) ...
The reason is inside Register component we dont have usual html <input /> tag , rather we have our reusable component TextBox..
so these windows events can not be understandable by the custom components directly..

Now we are also expecting one more field key from the <Textbox /> or not..
So lets put onChange within the Textbox component definition only ..directly where we have used input tags or not.. <input />

import React from 'react';
const TextBox = ({lbl,type,key}) => {
    const fnChange = (e) =>{
            let targetEle = e.target;
            let val=targetEle.value;
            let key = targetEle.key; //or id
    }
    return <p>
            <b>{lbl} :</b><input type={type} onChange={fnChange} key={key} />
        </p>
}
export default TextBox;

//now we have the value and we have the key here..on all the input textfield changes..fnChange() is triggered

//Now question is where we are going to create the json? And Where exactly we want this json object?
//We want this json object inside Register component or not..
//At the time of clicking on Register button only we need this json..to send to server
//So if we are making any changes within the input textfields and we are clicking on Register we have to get these values or not..
	in which format? json format or not..
	
but this object will be keep on changing everytime when we click on button..if any changes made to textbox or not..
So as jsonObj is dynamic, lets create a state variable.. 
	
import TextBox from "./TextBox";
const Register = () => {
    const [dataObj,updateDataObj] = React.useState({});
    const fnRegister = () =>{
       console.log(dataObj) 
    }
    return <div>
        <TextBox lbl="Uid" type="text" key="uid" />
        <TextBox lbl="Password" type="password"  key="pwd" />
        <TextBox lbl="Email" type="email"  key="email" />
        <TextBox lbl="Phone" type="number"  key="phone" />
        <input type="button" value="Register" onClick={fnRegister}/>

        </div>
}

export default Register;

initial default value we provide is empty {} for dataObj but on button(register) click we have to update this..
But now my data is available inside TextBox component...
Now what is the relationship between Register to TextBox? Parent and Child?
Now we need data from Child to Parent..i.e.from TextBox to Register..
inputText onChange datas from TextBox to Register component button click?
Now after getting data in Parent, what my Parent is going to do? It is going to update this state variable dataObj..
How can i get this? using callback event delegation or not..
for that we have to write a method inside my parent i.e. in Register..
and my child i.e. TextBox is going to call this parent function during its input onChange()...

When i want to pass data from child to parent event is required at the same time one callback is going to be triggered..
one event is going to be triggered within the children..my callback method is going to be triggered where? inside my parent or not..
So lets add a method to parent component..i.e. to Register component and pass as an attribute to <TextBox />
and TextBox component will call this method..lets name it as fnPrepareData()

import TextBox from "./TextBox";
const Register = () => {
    const [dataObj,updateDataObj] = React.useState({});
    const fnRegister = () =>{
       console.log(dataObj) 
    }
    const fnPrepareData = () =>{
    }
    return <div>
        <TextBox lbl="Uid" type="text" key="uid" fnPrepareData={fnPrepareData} />
        <TextBox lbl="Password" type="password"  key="pwd" fnPrepareData={fnPrepareData} />
        <TextBox lbl="Email" type="email"  key="email" fnPrepareData={fnPrepareData} />
        <TextBox lbl="Phone" type="number"  key="phone" fnPrepareData={fnPrepareData}  />
        <input type="button" value="Register" onClick={fnRegister}/>
        </div>
}
export default Register;

Now coming to my TextBox component it will receive as an argument or prop type.. Lets call this from fnChange() i.e. from onChange event..
	import React from 'react';
	const TextBox = ({lbl,type,k,fnPrepareData}) => {
    	const fnChange = (e) =>{
            let targetEle = e.target;
            let val=targetEle.value;
            let key = targetEle.id;
            fnPrepareData(key,val)
   		}
    	return <p>
            <b>{lbl} :</b><input type={type} onChange={fnChange} id={k} />
        </p>
	}
	export default TextBox;


-- 
Now I have received data from my child..i.e. fnPrepareData is called with 2 argument..that is key and value..
lets modify this method in my Parent class i.e. Register.. 
Now we need to update the state variable right..with the new data coming from child..
How we can update? we have updateDataObj callback to update dataObj..local state variable..

import TextBox from "./TextBox";
const Register = () => {
    const [dataObj,updateDataObj] = React.useState({});
    const fnRegister = () =>{
       console.log(dataObj) 
    }
    const fnPrepareData = (key,value) =>{
        //updateDataObj(...dataObj, [key]:value);//one way
     	let updatedObj = Object.assign({},dataObj,{[key]:value});
        updateDataObj(updatedObj);
    }
    return <div>
        <TextBox lbl="Uid" type="text" key="uid" fnPrepareData={fnPrepareData} />
        <TextBox lbl="Password" type="password"  key="pwd" fnPrepareData={fnPrepareData} />
        <TextBox lbl="Email" type="email"  key="email" fnPrepareData={fnPrepareData} />
        <TextBox lbl="Phone" type="number"  key="phone" fnPrepareData={fnPrepareData}  />
        <input type="button" value="Register" onClick={fnRegister}/>
        </div>
}
export default Register;


Now save all..and refresh the browser..enter values for uid,password,email and phone...and click on register button.
Now open the console..we should be able to see the json object is ready... to be sent to server..

Now as the Register and TextBox is almost ready.....
lets focus on the TableComp that Users component will be using to load the table...
So in a generic TableComp what things are required? As a part of dynamic values?
headers..data and keys or not..
//headers to create table column headers ..all th...
//data is to create the number of rows...tr....data is array of objects...
//key is to load data to columns for a particular row..as each row is basically the data in json object format,....td...
		so key will be used to fetch data from object..
//use map() on headers,keys and data to create table...
//lets add edit and delete buttons also....add these after the expression as it is hardcoded..


TableComp.js
=============
import React,{useContext} from 'react';
import {ctx} from "./context";
const TableComp = ({header,k,data}) => {
    return <React.Fragment>
            <table border="1px solid green">
                <thead>
                    <tr>
                        {   
                            header.map((v,i)=>{
                             return <th key={i+'h'}>{v}</th>
                            }) 
                        }
                        <th>EDIT</th>
                        <th>DELETE</th>
                     </tr> 
                </thead>
                    <tbody>
                       { data.map((obj,i1)=>{
                           return  <tr key={i1+'r'}>
                                 { 
                                    k.map((v2,i2)=>{
                                        return <td key={i2+'c'}>{obj[v2]}</td>
                                    }) 
                                    
                                 }
                                 <td><button onClick={()=>{fnEdit(obj)}}>Edit</button></td>
                                 <td><button onClick={()=>{fnDelete(obj)}}>Delete</button></td>
                             </tr>
                        }) }
                    </tbody>
            </table>
        </React.Fragment>
}

export default TableComp;


//Ok as of now we dont have these headers..data..key.. We are expecting from server to fetch these..
For now lets hardcode these data with the mock json or array..Later we will replace with original data...

lets prepare these mock data in Users component and pass to TableComp..
here my headers and keys are static..lets pass hardcoded array..
but my data wil be keep on changing...lets maintain a state variable for that..instead of hardcoding..
Now lets create a const data with some default user records.. and pass it as initial value for state variable data 
And pass the state variable data with some default records...and headers , keys defined to my TableComp..


Users.js
==============
import React,{useState} from 'react';
import TableComp from "./TableComp";

const Users = () => {
    const headers = ["UID","PASSWORD","EMAIL","PHONE"];
    const k = ["uid","pwd","email","phone"];
    const data = [{
    	'uid':'u1',
    	'pwd' : 'p1',
    	'email' : 'e1',
    	'phone' : 468745686 
    
    },{
    	'uid':'u2',
    	'pwd' : 'p2',
    	'email' : 'e2',
    	'phone' : 465456578 
    }];
    const [data,updateData] =useState(data);

    return <div>
            <TableComp header={headers} k={k} data={data}/>
        </div>
}

export default Users;


Once we get the data from the server..then that time what we will do?
We will pass the initial state as [] and then load with the actual data...coming from server..
Ok..one more thing..where we are going to update this data? 
We have to send one request to server and get the data or not..then only we have to update our data or not..
Which place is the right place?
Once my DOM is loaded with default data my request goes to the server and get the data and update the data..
Which place is the best place? componentDidMount() ..is equal to useEffect() or not... Lets modify the code a lil bit..


Users.js
==============
import React,{useState,useEffect} from 'react';
import TableComp from "./TableComp";

const Users = () => {
    const headers = ["UID","PASSWORD","EMAIL","PHONE"];
    const k = ["uid","pwd","email","phone"];
    const data = [{
    	'uid':'u1',
    	'pwd' : 'p1',
    	'email' : 'e1',
    	'phone' : 468745686 
    
    },{
    	'uid':'u2',
    	'pwd' : 'p2',
    	'email' : 'e2',
    	'phone' : 465456578 
    }];
    const [data,updateData] =useState(data);
    useEffect(()=>{
    
    })
    return <div>
            <TableComp header={headers} k={k} data={data}/>
        </div>
}

export default Users;


Now how we are going to fetch data? using axios...
lets write a separate file..
ServerCall.js
==============
import axios from "axios";
class ServerCall{
	static fnGetReq(url){
		return axios.get(url)
	}
	
	static fnPostReq(url,data){
		return axios.get(url,data)
	}
}

export default ServerCall;


Now we have to import this ServerCall.js in Users.js

Users.js
==============
import React,{useState,useEffect} from 'react';
import TableComp from "./TableComp";
import ServerCall from "./ServerCall";

const Users = () => {
    const headers = ["UID","PASSWORD","EMAIL","PHONE"];
    const k = ["uid","pwd","email","phone"];
    const data = [{
    	'uid':'u1',
    	'pwd' : 'p1',
    	'email' : 'e1',
    	'phone' : 468745686 
    
    },{
    	'uid':'u2',
    	'pwd' : 'p2',
    	'email' : 'e2',
    	'phone' : 465456578 
    }];
    const [data,updateData] =useState(data);
    useEffect(()=>{
    	ServerCall.fnGetReq()
    })
    return <div>
            <TableComp header={headers} k={k} data={data}/>
        </div>
}

export default Users;

Now at the time of clicking on the edit button..we need the selected row data...
I want the popup..these data should populate and one update button i need..
Once the data is updated then my popup button should close,...
Now we have to handle these button clicks or not..lets handle that one..
Lets add fnEdit() and fnDelete() functions on edit and delete button clicks..
For edit functionality we have to pass the data to fnEdit()..How we can pass the data ?
I cant write..onClick={fnEdit(data)} , because my onClick I am expecting function name..not function call..
but we cant use .bind() also here...my current object is not there..so bind() is also not possible.
so lets write an arrow function on edit button click..and from arrow function lets call fnEdit() with argument..


const TableComp = ({header,k,data}) => {


   const fnEdit = (obj) => {
        console.log(obj);
        ctxData.dispatch({type : "EDIT_INFO", payload :obj });
        updateShowModal(true);
    }

    const  fnDelete = (obj) => {
        console.log(obj);

    }
     return <React.Fragment>
				.......
				........
 					<tbody>
                       { data.map((obj,i1)=>{
                           return  <tr key={i1+'r'}>
                                 { 
                                    k.map((v2,i2)=>{
                                        return <td key={i2+'c'}>{obj[v2]}</td>
                                    }) 
                                    
                                 }
                                 <td><button onClick={()=>{fnEdit(obj)}}>Edit</button></td>
                                 <td><button onClick={()=>{fnDelete(obj)}}>Delete</button></td>
                             </tr>
                        }) }
                    </tbody>
            </table>
        </React.Fragment>
}

export default TableComp;


fnEdit() -> we have to give this data to some other component..
There is no relationship nothing like that. just think like that.
We can also use useReducer() or not? How we can??



*******************************************************************************************************************************************
29/02/2020
*******************************************************************************************************************************************
If we click on the edit button then that time..we have to show one popup window...or a modal..
Then in that modal we have to pre populate this particular user data..
This is our requirement..
Can we create one modal?Lets start.. How we can create?

Now coming to the TableComp we have the table..and each row containing edit and delete button..
Here on click of edit we have a method fnEdit().. and we have the data here for the particular selected row or user..
Now this data on click of edit button from fnEdit()- I have to send to my modal or not..

If I create a Modal component here inside my TableComp..then what is the relationship between the two?
TableComp will be parent and Modal will be child or not..That time we can directly pass data from parent to child using props..
But our requirement is not like that...By using useReducer() i want to give this data..
understand or not..ok..my model is there..thata model i am going to give within the TableComp..
our data is available where? 
My edit button is written where? within our TableComp.. When we click on edit button - that time fnEdit() is going to trigger..
So my data is available where? within the TableComp..
If I put the modal here what is the relationship between TableComp and Model? Parent and Child right..
	Ok my parent has the data..directly i can pass from parent to child by props..that is already we know..
But our requirement is we want to share this data to reducer..

Now this data(within fnEdit()) whatever data we have..we have to update within the state by using reducer..
lets start...how we can write it..
If we want to add reducer to this particular application..how we can add it?ok we can use this reducer for any state..any state change..ok
can we create one file initVal.js..
Now in the past we wrote everything within the single file..now we will write each and everything in separate files for clean separation..
No think..in global which state values we want to print? or which state variables we want to maintain in the global??
Can we put like editInfo and Users??

initVal.js
===========
export const initVal = {
	editInfo : {},
	users : []
}

Now this initial state i.e. initialVal where we have to use??within the useReducer() method or not..
Within the useReducer() method we are going to use like a second argument..
Ok where we are going to use this useReducer()?Where we have to write this code?
I want this data through out our application..so can we put in App component... 
SO this data from initVal.js I need in my App component..
Lets make sure that we are exporting initVal in initVal.js...

Lets go to App component..Lets write the useReducer() in App..and use this initVal for  default value..
Lets import useReducer from react..
Lets import initVal file also..check below code..
	import React,{useReducer} from "react";
	import {initVal} from "./initVal";

Now can we create the useReducer()? How can we create the useReducer()?
How can we create the reducer? Shall we create in the same App component? or in a separate file?
Lets write the reducer() function in a separate file as part of clean separation.
const []=useReducer(reducer,initVal)



lets create a new file - reducer.js
only one reducer() we can write it..any functionalities we can update..
How we can write reducer() here? reducer() is what? a function or not? 
which takes how many arguments? 2 or not.. first argument is state and second is action or data..
the second argument is coming from?? it is coming from he dispatch() method..What will be the type if second argument action?
any type...if we want to differentiate then ?? we have to mention type.. and use switch case..lets write the code..

Ok let's write the code for reducer.. Which takes two arguments.. state and action.. 
const reducer = (state, action) => { }
Where we are going to use the reducer now?? In App.. 
Can we export it then?? Ok.. export default reducer.. 
Ok.. What we are going to do in this reducer?? Update the state or not... 
Within my state how many variables are there?? 2 values.. 
So that can we write two if conditions.. Or switch case whatever it is... 
Here is the reducer() how it looks after adding switch case.. 

const reducer = (state, action) => {
    switch(action.type) {
        case "EDIT_INFO" : 
              break;
        case "USERS"
              break;
    }
   return state;
}

export default reducer;

Ok.. Now inside case "EDIT_INFO" what we have to do?? 
We will update the state or not.. state we are receiving within reducer() as arguments.. 
Can we use Object.assign() to update this state?? Ok how we can write?? state contains how many properties?? 
2 properties.. So here which property we are going to update?? 
editInfo or not.. So that is the key coming from?? initVal.. 
What is the value?? So my value is coming within the reducer() method argument.. As action.payload.. 

state = Object.assign({}, state, {editInfo : action.payload}) 


Now where we are going to use this reducer()? Inside my App component. 
Let's go to App and modify the code... 

Lets import reducer file along with initVal.js
import React, {useReducer} from 'reach;
import {initVal} from './initVal';
import reducer from './reducer';

Then Within the App() method add.. 
const [state, dispatch] = React.useReducer(reducer,initVal) 
Now can we give this state and dispatch to all my components.. by using contexts.. 
While sending data use context provider and while retrieving use useContext()... 
Can we create the provider? Can we create the context? 

Ok.. Now can we create one more file to create all the context?? 
context.js.. We can create any no of context right.. Based on our requirement

import React from "react";
export const ctx = React.createContext();

Where we are going to use this ctx?? 
While sending the data and also while receiving the data or not.. 
In App.. To send to data as context provider .. i.e. the state and dispatch.. Or any other.. 
And in Users and Register to retrieve the data..Using useContex() to receive state and dispatch.. 
Lets export this context...

Now how we can send the state and dispatch using ctx provider in App?? Let's see the code.. 
using value attribute we can pass context data from provider to consumer or useContex() 
What type of data we can pass to value attribute of provider?? 
Any type or not.. But here my requirement is to pass one object.. {state:state, dispatch:dispatch}
As key and value are same in object we can deduce to {state, dispatch}.. 
Now let's pass this object to my value attribute within provider.. 

Within the value attribute we will pass state and dispatch.. 
const App = () => {
     const [state, dispatch] = React.useReducer(reducer,initVal)
     return <div>
         <ctx.Provider value={{state,dispatch}}>
              <Register />
              <Users />
         </ctx.Provider>
     </div>
}


Now this context variable is available to all my components.. 
Now which component want to update the state?? My state variable editInfo who is going to update?? 
Or where we are going to update this editInfo?? Inside TableComp.. Edit button click method.. 
So from here we need to call the reducer()..to update the editInfo..So it needs dispatch() here... 
dispatch is available where? ctx..

lets modify the TableComp...
import React,{useContext} from 'react';
import {ctx} from "./context";

const TableComp = ({header,k,data}) => {
    debugger;
    const ctxData = useContext(ctx);
    const fnEdit = (obj) => {
        console.log(obj);
        ctxData.dispatch({type : "EDIT_INFO", payload :obj })
    }
    .....
}




Now in TableComp if we click on edit on any row..it should open a modal ..
Now lets design the modal popup....
Lets create a separate file Modal.js..
Modal.js
=========
import React from "react";
const Modal = () =>{
    return <div>
        <div></div>
    </div>
}
export default Modal;

//the outer div we can use like a mask...
//and the inner div we can use like a content....



//lets import this Modal to my TableComp.. because here on edit click I need this..
TableComp.js
=============
import Modal from "./Modal";
//add this <Modal /> after the <table></table> ends..
<Modal />



//By default this Modal div will be visible..but we are going to add condition for this..
//lets ad bit css to it...
//for outer div..used for masking..

styles.css
===========
div{
  height:100%,
  width:100%,
  position:fixed;
  top:0;
  left:0;
  background : rgba(0,0,0,0.6);
}


//for inner div..for content..
div{
  height:300px,
  width:50%,
  position:absolute;
  right:0;
  left:0;
  margin:auto;
  background:white;
  top:50px;
}


//lets import this styles.css inside index.js..
import './styles.css';


//Now let modify the modal.. lets add a close button to the right top corner..
//For the close button [X] lets add a span to the content div..and add some css..
span{
	position:absolute;
	right:7px;
	top:5px;
	cursor:pointer;
}


Now this modal should be toggled right..Now all the time this modal window is appearing..
We are using the modal inside TableComp..So can we write a condition here to Toggle..
toggling will happen dynamically and keep on changing whenever edit click event is triggered..So can we take a state variable to toggle this modal..
	const [showModal,updateShowModal] = useState(false);

And we have to enable this inside fnEdit() i.e. on edit button click event..we have to show the modal..
Ok how we can update this showModal to true?using updateShowModal() or not...so lets set true ..updateShowModal(true)

Now we have to hide the modal when we click on the modal window X button..so we have to do it from Modal Component..
But our flag(showModal) is available inside TableComp .. It is like child parent relationship..
So that lets handle it using event delegation.
let create a method closeModal() in TableComp and pass it as an attribute to the Modal component and call it from there...so it set it to false..and closes the modal..
And we will set the showModal flag inside closeModal() method in TableComp...
Now as the flag is set..lets use it to render <Modal /> inside TableComp
  {showModal &&  <Modal closeModal={closeModal}/>}


import Modal from "./Modal";
const TableComp = ({header,k,data}) => {
  ....
  const [showModal,updateShowModal] = useState(false);
  const fnEdit = (obj) => {
        console.log(obj);
        ctxData.dispatch({type : "EDIT_INFO", payload :obj });
        updateShowModal(true);
    }
  const closeModal = () =>{
        updateShowModal(false); 
  }

  ....
  return <React.Fragment>
            <table border="1px solid green">
            ...
            </table>
           {showModal &&  <Modal closeModal={closeModal}/>}
        </React.Fragment>       
}
export default TableComp;


Now our next focus is to populate the input textbox with data coming from selected row..in the Modal window..
So how we can get the content in the modal? when i click on edit button in table..it sends data to editInfo i.e. global state variable..

my data is already available in the reducer..reducer has updated to the state..so my data is available within the global state..
lets use the context to fetch the data from global state..how to do? use useContext()...
lets modify the Modal component..lets add these code..

Modal.js
========
import React from "react";
import {ctx} from "./context";

const Modal = ({closeModal}) =>{
    const ctxData = useContext(ctx);
    const {uid,pwd,email,phone} = ctxData.state.editInfo;
    return <div id="mask">
        <div><span onClick={closeModal}>X</span></div>
    </div>
}

export default Modal;


Now we have all the data available and we just have to display within the textbox..and we need an update button...
How we can get the textbox here? For that again we will use the TextBox component right...
Lets copy the code from Register.js...
and make modification whatever required.. 
   			<TextBox lbl="Uid" type="text" k="uid" fnPrepareData={fnPrepareData} />
            <TextBox lbl="Password" type="password"  k="pwd" fnPrepareData={fnPrepareData} />
            <TextBox lbl="Email" type="email"  k="email" fnPrepareData={fnPrepareData} />
            <TextBox lbl="Phone" type="number"  k="phone" fnPrepareData={fnPrepareData} />
            <input type="button" value="Register" onClick={fnRegister}/>

what extra things we have to pass here..value attribute..lets add that as we have data from context...
Also modify the Register button to Update button and add an onClick event as fnUpdate()...
Also Inside TextBox Component we have to receive the value as argument prop and use it within <input value={vale} /> to load prepopulated data..

TextBox.js
===========
import React from 'react';
const TextBox = ({.........,value,.....}) => {
    ....
    return <p>
            <b>{lbl} :</b><input .... defaultValue={value} />
        </p>
}
export default TextBox;


Also we need to write method fnPrepareData() to prepare the json object..
This method will be called by the TextBox component..as we did in register component

Now just think..suppose we click on table edit button from a specific table row....
and modal opens up..then we did not modify any..and click on update button..
Here we want the existing data to be saved..the same data in server..
That means what is my default data?coming from globalstate or not..editInfo..
so lets create a local state variable inside Modal component and lets save this existing data as initial value for this local state variable..
And this we will be updating when we made any changes to the textfields..
    const [userInfo,updateUserInfo] = useState(editData)
At the time of edit button click my userInfo state variable will hold the preloaded existing data..



Modal.js
==========
import React from "react";
import {ctx} from "./context";
import {TextBox} from "./TextBox";

const Modal = ({closeModal}) =>{
    const ctxData = useContext(ctx);
    const editData = ctxData.state.editInfo;
    const {uid,pwd,email,phone} = editData;
    const [userInfo,updateUserInfo] = useState(editData)
    
    const fnPrepareData = (k,value) => {
        let updatedObj = Object.assign({},dataObj,{[k]:value});
        updateDataObj(updatedObj);
    }
    const fnUpdate = () => {
		console.log(userInfo,"**");
    }
    return <div id="mask">
        <div>
            <span onClick={closeModal}>X</span>
            <TextBox lbl="Uid" type="text" k="uid" value={uid} fnPrepareData={fnPrepareData} />
            <TextBox lbl="Password" type="password"  k="pwd" value={pwd} fnPrepareData={fnPrepareData} />
            <TextBox lbl="Email" type="email"  k="email" value={email} fnPrepareData={fnPrepareData} />
            <TextBox lbl="Phone" type="number"  k="phone" value={phone} fnPrepareData={fnPrepareData} />
            <input type="button" value="Register" onClick={fnRegister}/>
        </div>
    </div>
}

export default Modal;


===::===::=================================================================================================:====:====
We are almost done with client side changes.. lets jump to server side..
cd server..we used command (express) to generate the server side folders..or skeleton..
	If express is not there first we need to install it globally..
		npm i -g express express-generator 
	then type - express - to get the skeleton
		npm i
//These are the folders generated from express...
	node_modules
	bin
	public - contains js..styles sheets..these are used for client side..so i dont need this folder..
	views - jsx files..this is also client side..react will take care of..so i dont need this folder..
	//The below files or folders are required..
	routes
	app.js
	package.json //npm install will run this file and download dependancies to node_modules..
	
	
Here we are going to use mongodb..and as there is client server interaction lets download cors also..
npm i mongodb cors --save


app.js - if we open this app.js - what it contains? 
all our whatever our application contains files or folders..those are registered within the app.js
if we have to run this application this file is required..it is working like a root file..
app.js file extension is js.. in this js file if we want to use other js files how we can use it?how many ways we can use it?
one is we can load it..another way is to run it..
if we want to load then another file is required..by using script or something we can load it..
If we want to run we can use node command to run it..
node app //no need to give extension here like node app.js

Now at the time of running this one it is going to start and stop immediately. 
Becase we are not specifying the particular port in our local machine..
So lets add the port no within app.js by using app.listen(anyport)

routes folder - we are going to write endpoints..
create one file called student.js inside routes..
now tell my student.js or any file we created that should be registered where?App.js..
when this should be registered with App.js?
Whatever you created within the Student.js that should be used by some other person..
    then those things are supposed to be exposed or not..those things should be running on server or not..
	that type of files only we have to register with app.js...
	internal files not required..
	
Now in this file we are going to write something..that is going to be accessed by whom?my client or not..
so this file should be exposed...or not..how we can?

we created one file -Student.js. that should be running mean that should be registered in app.js file..
now my file is available in routes folder..so that ..that should be registered in app.js
var std = require("../routes/Student")

Student is a file..Within this file what we are going to write?
That is accessed by client..that means as a client side developer what you are expecting from the server side guy?
at the time of clicking on button within the client which resource i want?
That resource related location url or not..so as a client side developer first we have to come to node server..
So my request should have to come from my client to my node server where its running..for ex..it is running on localhost:2020..
where is our end point? within the student file..so that my request has to come from node server to my student file..
No one exposes the file name directly..so that lets give an unique identity for that..ok..
Now at the time of writing this ...register within the app.js..can we give the identity..is nothing but url for this particular file.. 
How i can register this file in app.js? lets write it..

    var express = require("express");
    var std = require("../routes/Student")
	var app = express();
`	app.use("/student",std); //giving identity with url

Now till here how we can access this file??
	localhost:2020/student/
	
now my request comes to where? localhost:2020 is the server..and then to student.js...
inside student.js there are so many files.. insert,update,delete,select is there...
Where we want to go now? some functionality should execute..so that we can write our end points here..
for example insert i want.. how I can write it??using Router()..Router is coming from where? express..so that can we get that express first..
	
	student.js
	============
	//import express
			var express = require("express")
	
	//inside express i have Router..can i get that...
			var router = express.Router()
	
	//Next within the router that has get() method is there..post() is there..put() method is there..delete() method is there..we can use those...
	//Now lets write the end points using router object..how we can write it?...router.post()
	//how many arguments it takes? 2 arguments or not..one is url pattern i.e. /std-reg..second is callback function or not..
		router.post("/std-reg", (req,res,next)=>{
	
		})
	//callback function takes how many aguments? req,res, next..
	//req contains what? the data coming from client...the data is available as a part of request..
	//how many ways we can receive data from request object?//header,query,body,params...
	//how can we fetch? using req.body..or req.query..or req.body..or req.params
	//how many ways i can fetch the data from my client to server means - the ways are different..but that is coming as part of what? request only or not..
	//so that we should have to take the data from request and then we have to pass the response back...
	//next passing this particular one..if we need to check something like authToken or something..there we are using next...
		
	//Now we are going to register this file in App.. lets export this file...
		module.exports = router;
	
	
Now if I have to hit this particular API..what will be the url?
	localhost:2020/student/std-reg
	This is the full fledged url..and we have to give this url to our client side developers.. i.e. "/student/std-reg" or not..

what is this guy responsibility? 
	router.post("/std-reg", (req,res,next)=>{ })
	//receive the request..read the data from the request...connect with the mongodb..and then perform required operation..and give the response back..thats it..
	//this is the way we write our end point skeleton..
	
===::===::=================================================================================================:====:====

Now coming to the mongodb...How we can differentiate mysql with mongodb?
one is nosql..second is it is a server first..cloud is up and running..
ok within my mysql what we have to do?We will have to create database here or not..multiple databases we can create inside mysql server..
..
same like that mongodb is also a server..this also contains databases only...

Now within the mysql database..my database contains what? tables..lets create a table here...
student..table contains what? columns and rows..
Now tell me at the time of inserting data into table what things are required in general?..
based on no of columns only we are going to pass the data or not..
within the student suppose we have only 3 columns...uid..pwd..and email..
Then how many fields we can insert? exactly three fields or not..its like structural...
for the particular structure of table we have to pass the data...
for each and every student how much data we can store?only and exactly 3 fields......
For example for studen1 - 'u1','p1','m1@gmail.com'
For example for studen2 - 'u2','p2','m2@gmail.com'

for example..for second student student2 i have some extra information...
like location..so that time is it possible to store these information here in mysql database tables or not...
No we cant...because we have to pass the data based on the table structure....
any number of tables we can create...

My mongodb is not structural..
now here is the flow...we have server...server contains databases..my database contains tables..my table contains columns n rows...

Now coming to mongodb... there is no terminology as tables. in mongodb it is called as collections..
any number of collections we can create...within the collection we can store data and we can call like document...
my document type is always an object..sso how my document looks like see...
this is my student collection...std...within this we can put students data...
within this std collection we can put documents..document is nothing but object..collection of key and values..
{uid : "u1",pwd:"p1",email:'m1@gmail.com'}
{uid : "u2",pwd:"p2",email:'m2@gmail.com'}

Now as we discussed earlier if instead of only three fields if i have to send some extra information for my second student...like location..
{uid : "u2",pwd:"p2",email:'m2@gmail.com',location : "Hyderabad"}
so mongodb is not structural one...

any number of properties we can pass....
{uid : "u1",pwd:"p1",email:'m1@gmail.com'}
{uid : "u2",pwd:"p2",email:'m2@gmail.com',location : "Hyderabad"}

So at the time of sending data from client to server..we can send the object directly..that object will be directly inserted into the collection..

In our local machine if mongodb is there then there is no issue..
In our system in local mongodb is not there..then we can use cloud mongodb also...
Then no need to install mongodb to use..we can use cloud..
There are some cloud providers are there..
1. AWS
2. Azure
3. Google cloud
4. Oracle..

They are providing some space in cloud...

We can download from below link.. 
MongoDB compass like an IDE for mongodb
https://www.mongodb.com/download-center/compass

or use cloud..
https://www.mongodb.com/download-center/cloud

Signup with email id.. or sign in if signup already
sanj.live01@gmail.com
Soumya0!3
Create a Project...
create or build cluster..choose Shared Clusters(starting at free..)
Next it will navigate to Create a Starter Cluster..
	You can choose cloud provider and region..also clustername
	(aws, mumbai i.e. ap-south-1)
	name it...e.g clusterFirst
It takes little bit of time..but cluster is created means some space is allocated more than that nothing..

Go to projects...
Select your project
Go to collections..
Add my own data
Give database name, collection name
Next window we are allowed to create a document, fetch all documents etc...


//*IGNORE -start *//
Connect to Cluster0
1.Whitelist a connection IP address
	Add Your Current IP Address or
	Add a Different IP Address
2.Create a MongoDB User
	Provide username, password
	Create MongoDB user
uid,pwd are root/root
//*IGNORE -end*//

click on connect...tab
connect to clusterFirst
choose - connect your application
choose your driver version -nodejs
version-3.0 orlater
Add your connection string into your application code
	//copy this urll
	mongodb+srv://root:<password>@clusterfirst-sl7yr.mongodb.net/test?retryWrites=true&w=majority 
	replace "root" in <password> in above url..
	mongodb+srv://root:root@clusterfirst-sl7yr.mongodb.net/test?retryWrites=true&w=majority
	
	
click on collection..tab
create database..
schooldb - database
student - collection..
takes time to load...
click on the student collection..under schooldb..
click on insert document..inser some keys and values as pairs..click on insert..

===::===::=================================================================================================:====:====
Lets go back to our client side code..
Lets create our Loader component..
Add a loader image..

Loader.js
==========
import React from "react";
const Loader = () => {

    return <div id="mask">
        <img src="./loader.png" />
    </div>
}
export default Loader;

We need file-loader as well..
	cd client
	npm i file-loader --save-dev
	
Also we will make an entry for images in webpack.config.js



**We will get the connection details from the selected cluster connect button..
- Connect to Cluster0 (new popup window)
	Ip address and userid and password we had used while creating project
	Clcik on button Choose a connection method
	- 3 options will come on next window
		1) Connect with mongo shell
		2) connect your application
		3) connect using mongodb compass
		
	Select 2nd option 2) connect your application
	- Next window it will ask beow
		1) Select your driver(Node.js) and version(3.0 or later)
		2) Add your connection string into your application code
			Copy this url....
			mongodb+srv://root:<password>@cluster0-eae6u.mongodb.net/test?retryWrites=true&w=majority
			Replace <password> with the password for the user, root, and ensure all special characters are URL encoded.
			Replace password with root
			
Another setting change allow access from anywhere within the cloud cluster (edit whitelist entry)


===::===::=================================================================================================:====:====

Lets  create a file called Student.js for DB operations..
Lets ask client side guy to provide an object directly..as my mongodb expects one object to create one document..

Student.js
==========
var express = require('express');
var router = express.Router();
var mongodb = require('mongodb');

router.post('/std-reg',function(req,res){
    var data=req.body.data;
    var mongoClient=mongoDb.MongoClient;
	var url ="mongodb+srv://root:<password>@cluster0-eae6u.mongodb.net/test?retryWrites=true&w=majority"
	mongoClient.client(url,function(err,cluster){
		if(err){
			res.send('db con error');
		}
		cluster.db('sms');
		var collection = db.collection('student')
		//now within the collection only we need to perform some operation
		//which operation we need to perform?
		//insert 1 record
		collection.insertOne(data, function(e,r){
			if(e){
				res.send(e);
			}else{
				res.send(r);
			}
		})
	})
    
})

module.exports = router;


node app

url : localhost:2020/student/std-reg
method : post
dataObj : {data : {'uid' : 'u1' ,'pwd' : 'p1' ,'email' : 'e1'} }

===::===::=================================================================================================:====:====


> show dbs
admin   0.000GB
config  0.000GB
local   0.000GB
> use mongodb
switched to db mongodb
> show collections
> db.createCollection("student")
{ "ok" : 1 }
> db.products.insert( { item: "card", qty: 15 } )
WriteResult({ "nInserted" : 1 })
> show collections
products
student
> db.student.insert( { uid: "u1", password: "soumya", email:"ssurajita111@gmail.com",phone:9090667942 } )
WriteResult({ "nInserted" : 1 })
> db.student.insert( { uid: "u2", password: "stalin", email:"stahl.stalin@gmail.com",phone:9124433052 } )
WriteResult({ "nInserted" : 1 })




*******************************************************************************************************************************************
02/02/2020
*******************************************************************************************************************************************

How to run application?? Or how to start server? 
Go to the StdApp.. 
npm start or 
webpack-dev-server --development --open

Ok now how we can write the employee in mongodb?? 
Router().post("/", (req, res, next) => {
       
}) 

What is user request?? req?? 
How many ways we can send data to server?? 
Using req.body, 
Using req.headers
Uisng req.query
Using req.params
Now I have the data.. What is the next thing?? 
My data is in the object format or whatever it is.. 

Now if we have the data what is the next thing to do?? 
We have to put this data within the mongodb or not.. 

How is the structure of mongodb??
//We have the mongo server.. 
//Within that we have the mongodb database.. 
//Within this we have the collection. 
//Within this we have the documents.. 
My document type is what?? It is always an object or not.. 

Whatever my client is going to pass but we are going to send as object to my mongodb. . 
So that we will ask client only to pass the data in the form of object?? 

Ok.. I have the data now.. What's next... 
Received the request.. Got the data... 
Nect is establishing connection with database or not... 
Ok how we can?? 

What is my database?? mongodb.. Inside server folder.. 
We have to install that first.. How we can?? 
   npm install mongodb  --save

Once it is installed can we get that one?? 
How we can get?? 
   var mongo = require("mongodb");

//get the MongoClient.. How we can? 
   var mongoclient = mongo.MongoClient;

Now we have to connect with this particular database or not.. 
i.e. mongodb.. 
First we have to connect to the server.. From there We have to go to database... 
From there we have to operate on this collection.. 

Ok... Now first check if my mongodb is running on my local machine or on cloud.. 

If it is a cloud.. Last day we saw.. We have to take that particular url.. Cloud url.. 
If it is a local database then that time.. We will be using like 
  mongodb://localhost:27017/mongodb

We have to connect with this particular url.. Ok how we can connect to this??
We will use mongoclient.connect()..which takes 2arguments .. 
	1. One is the mongodb url.. 
	2. And second is the call back function or not.. 
Here I tried to make connection with mongodb.. It may be success or failure.. 
So in the callback function always my first argument is like error.. And here we have to send the error back.. 
Andd second argument is db object in case of success.. 
If it is a success then what we need to do?? we need to operate that one..
If it is a success then at that time my connection is pointing to this cluster..this space..ex..clusterFirst
within this cluster there will be so many database..which database we want..we can go to that particular database..
Now how we can do? If it is a failure..we can send the err back..
If it is a success then we have to come to the cluster..already there..from there we have to go to the database..from there we have to go the collection or not..
So Now inside callback in case of success I am pointing to the cluster...can we get the database from it..
which database is there? for ex..mongodb..
once we have the database..within the database what we have...collections or not..
so that how we can get the collection? we can get it by db.collection("collection_name")
Now once we have the collection we have to perform some operations on it..i.e. insert,update,delete or select whatever it is...
 
 	var mongo = require("mongodb");
    var mongoclient = mongo.MongoClient;
	var url="mongodb://localhost:27017/";   
	
	router.post('/std-reg',function(req,res){
    	mongoclient.connect(url, (err,clusterFirst)=>{
			if(err){
            	res.send('db con error'+err);
        	}
        	var db=clusterFirst.db('mongodb');
        	var collection=db.collection('student');
        	//now operate on collection...i.e. insert,update,delete or select whatever it is...
    	})
    })
   

Now my requirement is what? We have to insert one record or not..within this particular collection as a document object...
How we can ?? there is a method called insertOne() within my collection object...
which data you want me to insert?
Already I have data that is coming from client or not..That is always in the form of object only..
so that can we take that data? Again while inserting may be success or may be failure... so that can we get that one...
now if error is there..we can send this error...
if it is a success then we can send this success..so lets add this code..student.js

student.js
============
	var mongo = require("mongodb");
    var mongoclient = mongo.MongoClient;
	var url="mongodb://localhost:27017/";  
	
	router.post('/std-reg',function(req,res){
    var data=req.body.data;  
    mongoclient.connect(url, (err,clusterFirst)=>{
		if(err){
            res.send('db con error'+err);
        }
        	var db=clusterFirst.db('mongodb');
        	var collection=db.collection('student');
        	collection.insertOne(data,function(e,r){
          		if(e){
              		res.send(e);
          		}else{
              		res.send(r);
          		}
     		})
    	})
    })
    
    
Now lets write one end point for retrieving purpose also..How we can write it?..
for retrieving purpose lets use router.get()...which takes api endpoint url, and a callback function...with req and res as input..

student.js
============
var express = require('express');
	var router = express.Router();
	var mongo = require("mongodb");

	var mongoclient = mongo.MongoClient;
	var url = "mongodb://localhost:27017/";
	
	router.get("/std-get",(req,res)=>{
		mongoclient.connect(url,(err,cluster)=>{
			if(err){res.send(err);
			else{
				var db = cluster.db("mongodb");
				var collection = db.collection("student");
				collection.find({}).toArray(function(e,r){
					if(e){
                   		res.send(e);
               		}else{
                   		res.send(r);
               		}
				})
			}
		});
	})

In this case we want to fetch for particular user or all users..so there is no input nothing is required...
And then..received the request is completed..taking the data from request also completed..What is the next thing...
establish the connection with the database or not..so that what we need?
	mongo client is required or not..url is required..and connect() method is required..
	These are common for all the end points or not..
	Then Why to write each and every place?each and every end point?
for example tomorrow we are going to change...then how many places we have to change? multiple places we have to change or not..
So that what we have to do?
can we write a shared one...
ok lets see how we can write a shared file...shared.js

In these what are common things?..url is common..mongoclient is common..and connect() is common..
Then inside connect the operations will vary...inside our application we mostly using a single database..but the collections may vary..
So lets put the common things in a shared file.. lets put all these code till creating the database.. 
	And lets return this db back to my student.js...

Do you want to register this file inside App.js? //no
Why? Why because there is nothing is there which is directly connecting with the database..simple
shared.js file is used by whom? My internal purpose only or not?
I multiple thing we have to share from shared.js then how we can??
Can we create a variable?? shared? as an object..
And finally export that object?
Lets export shared ...

So that all the end points from student file can call the shared.js to establish the connection and get the database..
then they can perform some operation on database db..connection may be success or may be failure..
if err then we have to send the err back using res.send()..but res is not available here..so lets pass it from student file..while calling this shared method..
Now if err is not there that means success..lets handle this success part..in else{} part.
we will get a cluster object..lets use that to get the database..
once i get the database i have to work on my collections..
There might be multiple collections in a database which we will be dealing with..
So do you want us to handle the collection code inside shared file..no right..
Now we need to pass db back to student file APIs otherwise we will get error like db is not defined...
ok can we get the db? from where we can get the db?we already having it from cluster..
can we return the db? return db; like this?

Now can we call this method from student file??

shared.js
========
var mongoDb=require('mongodb');
var shared={};
shared.getMongoCon=function(res){
     var mongoClient=mongoDb.MongoClient;
     //var url="mongodb+srv://root:root@clusterfirst-sl7yr.mongodb.net/test?retryWrites=true&w=majority"
     var url="mongodb://localhost:27017/";    
     mongoClient.connect(url,function(err,cluster){
        if(err){
            res.send('db con error'+err);
        }
        var db=cluster.db('mongodb');
        return db;
     });
}

module.exports=shared;

Ok how can we call this??
lets import this file..we have already exported in shared file...
then lets call that method by sending one argument that is res..and get back the db object..
and then lets use this db object to get the collection..see below code...


student.js
==========
var express = require('express');
var router = express.Router();
var mongodb = require('mongodb');
var objId=mongodb.ObjectID;
var shared=require('./shared');

router.post('/std-reg',function(req,res){
    var data=req.body.data;
    var db = shared.getMongoCon(res);
    var collection=db.collection('student');
     collection.insertOne(data,function(e,r){
          if(e){
              res.send(e);
          }else{
              res.send(r);
          }
     });
    
})

But the problem is mongoclient.connect() method is asynchronous one...
At which line it is getting called from student file..when we call the shared method or not...
That means the below line of code.. 
    var db = shared.getMongoCon(res);
So here it wont wait from the shared method mongoclient.connect() to finish execution and control goes to next line..
suppose this connect() method takes 2 mins of time..then it wont wait and next code will be executed..
i.e. var collection=db.collection('student'); 
But at this time may be the async call is not finished and db object is not returned from shared.js

So what we need to do ? how can we handle this..we can handle by using callback or not..
Lets pass a callback method along with res from server file while calling the shared method..
And from inside of shared method we will call that callback method..and pass db as argument..

Now again coming to student file..whatever code following the shared method call has to go inside the callback..
because rest things has to be operated after 2 minutes...i.e. connect() methd timing..i.e. shared method second argument..
lets see the code..

shared.js
==========
var mongoDb=require('mongodb');
var shared={};
shared.getMongoCon=function(res,cb){
     var mongoClient=mongoDb.MongoClient;
     //var url="mongodb+srv://root:root@clusterfirst-sl7yr.mongodb.net/test?retryWrites=true&w=majority"
     var url="mongodb://localhost:27017/";    
     mongoClient.connect(url,{ useUnifiedTopology: true },function(err,clusterFirst){
        if(err){
            res.send('db con error'+err);
        }
        var db=clusterFirst.db('mongodb');
         cb(db);
     });
}
module.exports=shared;


Now while calling shared.getMongoCon() from student.js lets pass res object and a callback method...
And to callback one argument is passed from shared.js i.e. db instance.. 
So while defining callback in student.js ... define callback with one argument and that we can use as db
Now no need to return anything from shared.js ..instead we are calling a callback method..

Now lets modify the student.js get and post methods


student.js
============
var express = require('express');
var router = express.Router();
var mongodb = require('mongodb');
var objId=mongodb.ObjectID;
var shared=require('./shared');

router.post('/std-reg',function(req,res){
    var data=req.body.data;
    shared.getMongoCon(res,function(db){
     	var collection=db.collection('student');
     	collection.insertOne(data,function(e,r){
          if(e){
              res.send(e);
          }else{
              res.send(r);
          }
     	})
    });
})
  

router.get('/get-std',function(req,res){
    shared.getMongoCon(res,function(db){
          var collection=db.collection('student');
          collection.find({}).toArray(function(e,r){
          //select * from student; then here in this case we can use find({})
          /*then we are going to get all the records like what?an array format or not..
          	so that we have to convert like  collection.find({}).toArray()
          	once we have formatted and everything that time it may be a success or failure..
          	lets take a callback function within toArray() where we will get error or result.. */
          	
               if(e){
                   res.send(e);
               }else{
                   res.send(r);
               }
          })
    })
})


Now as 2 end points are ready..lets go and integrate with the client...
These are exposed as - 
	http://localhost:2020/student/std-reg
	http://localhost:2020/student/get-std
	
Now lets remove the hardcoded data..that has to be replaced with my own data..
From server side i got 2 end points..i have to integrate that one..

First lets take this case...
whenever we are clicking on the register button we have to send a request to the server or not..
ok..lets go to that part...
already we have a click event and we have also prepared the object that server is expecting...
here there is no structure nothing is there... how many properties we want..that many properties we can put it..
but server side they asked like..whatever the object is there that object we need to pass it to them..
with which key? key is data or not..go to the server folder and check what is that expecting...
	i.e. req.body.data
can we send in this format...


I know the url..i know the method..i knw the data format..then can we send the request to the server?
by using axios or not..already we have written ServerCall.js
Ok..can we call this one..where we have to call? inside Register.js file..button click we have to make request right..
lets modify Register.js...lets import this file.. 
next we have to send the remaining part of url for post operation..check exact pattern in server roues folder..student.js..it is /std-reg
now second argument to this ServerCall.getPostReq() is object with key is maching exactly to data... and value is also an object that we already prepared on click of button..
lets see below code..

Register.js
=============
	import ServerCall from "./ServerCall";
	........
	...
	const fnRegister = () => {
			ServerCall.getPostReq('/std-reg', {data:dataObj});
	}
	.....


In the URL http://localhost:2020/student/std-reg , "http://localhost:2020/student/" this part is common as we are using a single database for our application..
lets save this as base url inside ServerCall.js..and pass remaining part of url from other files..and append to the base url..
	
Shared.js
==========
	var mongoDb=require('mongodb');
	var shared={};
	const baseUrl = "http://localhost:2020/student/";
	
	shared.getMongoCon=function(res,cb){
     var mongoClient=mongoDb.MongoClient;
     //var url="mongodb+srv://root:root@clusterfirst-sl7yr.mongodb.net/test?retryWrites=true&w=majority"
     var url="mongodb://localhost:27017/";    
     
     	mongoClient.connect(baseUrl+url,{ useUnifiedTopology: true },function(err,clusterFirst){
        	if(err){
            	res.send('db con error'+err);
        	}
        	var db=clusterFirst.db('mongodb');
        	 cb(db);
     	});
	}
	module.exports=shared;


Now this ServerCall.getPostReq() method call returns me a promise..We have to consume it..how to consume it? using then()...
Where we will change the code..in Register.js file or not..
Here suppose on mongoclient connect success or any db query success i want to updated msg..one msg variable that should be changed dynamically..
lets add a state variable for msg..lets add initial default value as empty... ''
Put a debugger in promise then()..and see if we are getting the data..if yes then store that data in a avriable..
we are storing here in _res..
and then updating the msg state variable using updateMsg()..if insert is success..
	if(_res.ok ==1 && _res.insertedCount == 1){
                updateMsg("Inseted Successfully..."); 
            }

Register.js
=============
	import ServerCall from "./ServerCall";
	
    const [msg,updateMsg] = useState('');

    //now based on the condition we ll update this state..update success or insert success..like that

	const fnRegister = () => {
			ServerCall.getPostReq('/std-reg', {data:dataObj}).
			then((res)=>{
				debugger;
				let _res = res.data;
				if(_res.ok ==1 && _res.insertedCount == 1){
                	updateMsg("Inseted Successfully..."); 
            	}
			}).catch((err)=>{   
			    	updateMsg("Not updated...try again..."); 
			})
	}



How many times we need to fetch the data for the tableComp?
//once on initial load..
//once on register button click and save data to db and refresh table
//edit button click...
//delete button click...


If multiple components required the same functionality then how we did?? 
By using higher order component...that can be replaced  with useReducer()
we wrote switch condition and updated the data...
in my useReducer() which states we were maintaining global..editInfo and users..
from where we can check....initVal.js
this users is coming from database or not...
who is going to update this state variable userss? how many times it is going to be updated?
4 times...4 times we have to send the request...we have to write some piece of code or not...
can we write only once place..which place is the right place?
wh is going to update this users? reducer or not...
can we ask the reducer..can we go and get the data..and can you update?
ok now in the past what we have done.. this is my initial load..this is my update..this is my insert..this is my delete..
initial time i send the request to server and get the data...this data where we want to update..the initVal properties...
but dont write the code individually...can we ask the reducer..you go and get the data... and you only update...
So on every operation we are going to the server and getting the data individually..
Now dont write the code individually
Can we ask the reducer you go and bring the data and you can update..
Can we write the data only one place? Can we update te users there?
understand or not?
Which place we have to write?
reducer or not??

case "USERS" :
	//who wants to call this case?
	//4 persons..initial load, update,insert,delete
	
How we can call it?
//dispatch({type:"USER"})

Now this call control coming to reducer..
Now from here can we make a call to server and get the data?
Ok once you get the data.. we have already state is there
Can we update the data?

So instead of writing 4 times..lets write one time and use it..
Can we write that one? How we can?
Can we go to our reducer?
Anybody calls this reducer or make a dispatch() call with type "USERS", can we make a server call here and get the data?

reducer.js
==========
export const reducer = (state,action) => {
    switch(action.type){
        case "EDIT_INFO" :
            state = Object.assign(
                {},state,{
                    editInfo : action.payload
            });
            console.log("state.....",state)
            break;
        case "USERS":
        	ServerCall.fnGetReq('student/get-std')
        	.then((res)=>{
        		state = Object.assign(
                {},state,{
                    //users : action.users
                    users : res.data
            	})
            	return state;
        	}).catch((err)=>{
        		state = Object.assign(
                {},state,{
                    //users : action.users
                    users : []
            	})
            	return state;	
        	})
            
            break;
        default:
            //state
            break;
    }
    return state;
}


Who wants this data? TableComp or not?
Where we are using tableComp?
Within Users.js we are using TableComp or not?
I have the header is there i have the keys is there..
We need to send data or not?
How we can get this data?
Data is available within the state
How we can get it?
By Using context or not?

My App.js connects with the reducer ok.it gets state and dispatch 
And App.js make it available to all our components or not?
Who wants to get the data uses dispatch()
ANd who wants to set the data uses state or not?
Ok how we can get it?

Go to Users component and modify it now..

Users.js
=========
import React, { useState, useEffect, useContext } from 'react';
import TableComp from './TableComp';
import { ctx } from './context';
import ServerCall from './ServerCall';
const Users = () => {
  const headers = ['ID', 'UID', 'PASSWORD', 'EMAIL', 'PHONE'];
  const keys = ['_id', 'uid', 'pwd', 'email', 'phone'];
  const ctxData = useContext(ctx);
  const [data, updateData] = useState(users);

  useEffect(() => {
   	ctxData.dispatch({type : "USERS"}) 
  },[]);
  return (
    <div>
      <TableComp
        headers={headers}
        data={ctxData.state.users}
        keys={keys}
      />
    </div>
  );
};

export default Users;



            
*******************************************************************************************************************************************
03/02/2020
*******************************************************************************************************************************************

We are returning state from reducer..switch is there..
For example think like my operation is like asynchronous one..
This part from reducer is coming out and is going to execute independently or not??
At that point of time my data is not coming from outside..we are not updating the state..
Then immediate what happens the controls coming out means what??
Its coming here..what is the default state here?? out of this case..
And outside the return state is what? my default state or not?
So here in below code actually before the async call finish the last return statement is getting called...
And that time it is keeping default state or initial state value
It contains userInfo,editInfo


And inside reducer we wrote asynchronous calls. When we will get the response??
So understood the problem or not?
This async call is taking time.. and meanwhile we are returning the state..
And that state is not updated one..

reducer.js
==========
export const reducer = (state,action) => {
    switch(action.type){
        case "EDIT_INFO" :
            state = Object.assign(
                {},state,{
                    editInfo : action.payload
            });
            console.log("state.....",state)
            break;
        case "USERS":
        	ServerCall.fnGetReq('student/get-std')
        	.then((res)=>{
        		state = Object.assign(
                {},state,{
                    //users : action.users
                    users : res.data
            	})
        	}).catch((err)=>{
        		state = Object.assign(
                {},state,{
                    //users : action.users
                    users : []
            	})
        	})
            
            break;
        default:
            //state
            break;
    }
    return state;
}

Now suppose instead of returning at the end if we keep return statement within async call then what happens?
reducer.js
==========
export const reducer = (state,action) => {
    switch(action.type){
        case "EDIT_INFO" :
            state = Object.assign(
                {},state,{
                    editInfo : action.payload
            });
            console.log("state.....",state)
            return state;
            break;
        case "USERS":
        	ServerCall.fnGetReq('student/get-std')
        	.then((res)=>{
        		state = Object.assign(
                {},state,{
                    //users : action.users
                    users : res.data
            	})
            	return state;
        	}).catch((err)=>{
        		state = Object.assign(
                {},state,{
                    //users : action.users
                    users : []
            	})
            	return state;
        	})
            
            break;
        default:
            //state
            return state;
            break;
    }
    
}

In the above code also not correct..
Because async call always runs independently
it never stops for further lines of code to be executed...
So in above case nothing gets returned when reducer() method execution is completed..as async call is not yet done..running as a separate thread
So when in other components we try to fetch dispatch or state from reducer it is undefined...

So They said like dont put any asynchronous calls in reducers..
Write your action..which action you want me to do?
My action is what in this case?
//Go to the database and get the data..
//so my flow is like this now..
I have a button is there.. getUsers is my button..
If i click on the getUsers button my users available within the database..
At the time of clicking on button we have to get the data from database and we have to update the data..where?
Within your problem state..editInfo, users

Lets write a common action for getUsers...
userAction.js - simple js file
We can use that method where ever we want..
This method is used for get the data from the database..
Now this method contains some sort of ajax code or whatever leave it...
Now this method is called by whom?
//


Now see.. This is my component..From here I am going to call my action method..
How I am going to call it??
Lets export that userAction.js file..and import it within the component file?
lets import that..
Now can you tell me this imported userAction is of which type?
//function type or not
Now can we call that action method here ?


Already we have created one Servercall.js
WHich method we are using?
fnGetReq()? we are expecting our url..
From here we are returning -  return axios.get(url)
This is going to return promise .. .then() and then .catch()

userAction.js
=============
import ServerCall from './ServerCall';
const userAction=(dispatch)=>{
    ServerCall.fnGetReq('student/get-std')
    .then((res)=>{
        dispatch({
            type:'USERS',
            payload:res.data
        })
    })
    .catch(()=>{
        dispatch({
            type:'USERS',
            payload:[]
        })
    })
}
export default userAction;

Now it is going to server..server to nodejs and nodejs to mongo and fetching data..
Now here we are going to set the data or not?
This userAction has to tell the reducer..i have the data.. can you please update the users..
Now tell me how we can??
Any person who is communicating to the reducer.. how it can?
using dispatch() method or not?
Who want dispatch() method now??
Who wants to communicate with the reducer?
My userAction only or not?

Now where is my dispatch() method? Within my context only or not?
Now my context is available for all your children components or not?
But now this userAction.js is a simple javascript method.
Then at that time my context is available? no..
Now tell me how this userAction will get the context?
Can we pass context as an argument to userAction method?
Now tell me who wants to call this userAction? In this scenarios tell me
One is Users, Update Component, Register component
This component contains what?
Ur state as well as dispatch or not?
See for example this is C1 ur component..it has button called getUsers..
When click on button it calls userAction.
Can we pass one argument here?
How we will get the dispatch here? By using context data or not?
So in component we have the dispatch and state available from context 
And we pass that to the userAction .
lets call the reducer from here..by passing how many argument?
One object..{type : "users", payload: {})


And from userAction i want to call the server 
So I will use ServerCall.js
Ok my ServerCall is going to communicate with nodejs... node to my database mongodb
And also it returned back to userAction.js..
And here we have to update the state..If we have to update the state we have to call the reducer from here..
By using dispatch()
so it is passed from a component where action is triggered...


This is the overall flow..


lets start the coding..
Lets create the UserAction.js and we will make the async calls here..
We will handle the promises here..the response coming from server after service call..
So lets import ServerCall..
And call fnGetReq() by passing url..
And we are handling the promise here..
Now we have the response here within userAction..
Now we have to update the state..
Where we can update? in reducer..
How we can call reducer?What is needed?
dispatch()..
Where my dispatch() is available?
context..


Now from Users I want the data..SO that i can send to TableComp for rendering ..
Lets export userAction.js and import it in Users.js
At that time of first time load only we need to call right...
Lets use the hook useEffect() which is same as componentDidMount()



userAction.js
================
import ServerCall from './ServerCall';
const userAction=(dispatch)=>{
    ServerCall.fnGetReq('student/get-std')
    .then((res)=>{
        dispatch({
            type:'USERS',
            payload:res.data
        })
    })
    .catch(()=>{
        dispatch({
            type:'USERS',
            payload:[]
        })
    })
}
export default userAction;


context is available to components..but this userAction is not a component.
But this method userAction() is getting called from a component..or not?
So lets pass as an argument the dispatch() from component to userAction...


Users.js
=========
import React,{useState,useEffect,useContext} from 'react';
import TableComp from './TableComp';
import {ctx} from './context';
import userAction from './userAction';
import ServerCall from './ServerCall';
const Users=()=>{
    const headers=['ID','UID','PASSWORD','EMAIL','PHONE'];
    const keys=['_id','uid','pwd','email','phone'];
    const ctxData=useContext(ctx)
    const fnDelete=(user)=>{
        ServerCall.fnGetReq('student/delete-std?id='+user._id)
        .then((res)=>{
            if(res.data.ok ==1  && res.data.deletedCount == 1){
                alert('deleted successfully');
                userAction(ctxData.dispatch);
            }
        })
        .catch((res)=>{

        })
    }
    useEffect(()=>{
            userAction(ctxData.dispatch);
    },[])
    return <div>
        <TableComp fd={fnDelete} headers={headers} data={ctxData.state.users} keys={keys} />
    </div>
}

export default Users;


Now in the reducer we have to update the state with whatever payload is coming from userAction.js

reducer.js
===========
const reducer= (state,action)=>{
    debugger;
      switch(action.type){
          case 'EDIT_INFO':
              state=Object.assign({},state,{editInfo:action.payload})
              break;
          case 'USERS':
              state=Object.assign({},state,{users:action.payload})
              break;
          
      }
      return state;
}

export default reducer;


Now the table component needs the data or not??

TableComp.js
=============
import React,{useContext,useState} from 'react';
import {ctx} from './context';
import Modal from './Modal';
const TableComp=({headers,keys,data,fd})=>{
    const ctxData=useContext(ctx);
    
     const [showModal,updateShowModal]=useState(false);
    const fnEdit=(data)=>{
        ctxData.dispatch({
            type:'EDIT_INFO',
            payload:data
        })
        updateShowModal(true);
    }
    const closeModal=()=>{
        updateShowModal(false);
    }
    const fnDelete=(data)=>{}
    return <React.Fragment>
        <table border='1px'>
            <tbody>
            <tr>
                 {
                     headers.map((h,i)=>{
                        return <th key={i+'h'}>{h}</th>
                     })
                 }
                 <th>Edit</th>
                 <th>Delete</th>
            </tr>
                {
                    data.map((obj,i)=>{
                        return <tr key={i+'r'}>
                            {
                                keys.map((k,i)=>{
                                    return <td key={i+'d'}>{obj[k]}</td>
                                })
                            }
                            <td><input type='button' value='edit' onClick={()=>fnEdit(obj)} /></td>
                            <td><input type='button' value='delete' onClick={()=>fnDelete(obj)} /></td>
                            
                        </tr>
                    })
                }
                </tbody>
        </table>
       {showModal && <Modal closeModal={closeModal} />} 
    </React.Fragment>
}

export default TableComp;

Now save everything... and refresh the page.. we should see the data loaded from database


Now lets do the insert operation...
We have to call userAction from my register component now by passing dispatch to it..
this we have to do once insert donne successfully..
within the insert success callback we have to fetch the data..
It also need context to get dispatch
so lets import useContext from react..


Register.js
============
import React,{useContext} from 'react';
import TextBox from './TextBox';
import ServerCall from './ServerCall';
import userAction from './userAction';
import {ctx} from './context';
const Register=()=>{
    const [dataObj,updateDataObj]=React.useState({});
    const [msg,updateMsg]=React.useState('');
    const ctxData=useContext(ctx);
    const fnPrepareData=(key,val)=>{
        let updatedObj=Object.assign({},dataObj,{[key]:val});
        updateDataObj(updatedObj);
    }
    const fnRegister=()=>{
         ServerCall.fnPostReq('student/std-reg',{data:dataObj})
         .then((res)=>{
            let _res=res.data;
            let _msg="Not inserted try again"
            if(_res.ok == 1 && _res.insertedCount == 1){
                userAction(ctxData.dispatch);
                _msg='Inserted Successfully';
            }
                updateMsg(_msg);
         })
         .catch((res)=>{
            updateMsg('Something went wrong');
         })
    }
    return <div>
       <TextBox lbl="Uid" type="text" k="uid" fnPrepareData={fnPrepareData} /> 
       <TextBox lbl="Password" type="password" k="pwd" fnPrepareData={fnPrepareData} /> 
       <TextBox lbl="Email" type="email" k="email" fnPrepareData={fnPrepareData} /> 
       <TextBox lbl="Phone" type="number" k="phone" fnPrepareData={fnPrepareData} /> 

       <input type='button' value="Register" onClick={fnRegister} />
       <h1>{msg}</h1>
    </div>
}

export default Register;


student.js
===========
router.post('/std-reg',function(req,res){
          mon
           shared.getMongoCon(res,function(db){
            var collection=db.collection('student');
            collection.insertOne(data,function(e,r){
                 if(e){
                     res.send(e);
                 }else{
                     res.send(r);
                 }
            })
           });

         
})



Now the next one...If we click on the edit...
data should be updated in db and table should be refreshed..

Here we are calling reducer 2 times..
first is when we click on edit button on table row click..
That is when modal window opens up.
We call dispatch() to set the row data selected from table to the modal window..
For that we need to update state.. and hence used dispatch()

import React,{useContext,useState} from 'react';
import {ctx} from './context';
import Modal from './Modal';
const TableComp=({headers,keys,data,fd})=>{
    const ctxData=useContext(ctx);
    const [showModal,updateShowModal]=useState(false);
    const fnEdit=(data)=>{
        ctxData.dispatch({
            type:'EDIT_INFO',
            payload:data
        })
        updateShowModal(true);
    }
    
    ...
    ...
    return <React.Fragment>
        <table border='1px'>
            <tbody>
            <tr>
                ...
            </tr>
                {
                    data.map((obj,i)=>{
                        return <tr key={i+'r'}>
                            ...
                            <td><input type='button' value='edit' onClick={()=>fnEdit(obj)} /></td>
							...                            
                        </tr>
                    })
                }
                </tbody>
        </table>
       {showModal && <Modal closeModal={closeModal} />} 
    </React.Fragment>
}


And Here we dont need to create action..cz there is no async call required here..
once modal window opened we can change field values and click on update..
This time it should call /update-std and on update success callback again load users..using userAction

modal.js
========
import React,{useContext,useState} from 'react';
import {ctx} from './context';
import TextBox from './TextBox';
import ServerCall from './ServerCall';
import userAction from './userAction';
const Modal=({closeModal})=>{
    const ctxData=useContext(ctx);
    const editData=ctxData.state.editInfo;
    const {id,uid,pwd,email,phone}=editData;
    const [userInfo,updateUserInfo]=useState(editData)
    const fnUpdate=()=>{
        ServerCall.fnPostReq('student/update-std',userInfo)
        .then((res)=>{
            if(res.data.ok == 1 && res.data.n == 1){
                closeModal();
                userAction(ctxData.dispatch);
            }
        })
        .catch(()=>{
            
        })
    }
    const fnPrepareData=(key,val)=>{
        updateUserInfo(Object.assign({},userInfo,{[key]:val}))
          
    }
    return <div id="mask">
        <div>
        <TextBox lbl="Uid" type="text" val={uid} k="uid" fnPrepareData={fnPrepareData} /> 
        <TextBox lbl="Password" type="password" val={pwd} k="pwd" fnPrepareData={fnPrepareData} /> 
        <TextBox lbl="Email" type="email" val={email} k="email" fnPrepareData={fnPrepareData} /> 
        <TextBox lbl="Phone" type="number" val={phone} k="phone" fnPrepareData={fnPrepareData} /> 

       <input type='button' value="Update" onClick={fnUpdate} />

            <span onClick={closeModal}>X</span>
        </div>
    </div>
}

export default Modal;


use $set in server side changes..



student.js
===========
router.post('/update-std',function(req,res){
      var id=  req.body._id;
      var uid=req.body.uid;
      var pwd=req.body.pwd;
      var email=req.body.email;
      var phone=req.body.phone;

      var condtionObj={
            _id:objId(id)
      }

      var updatedDataObj={
        "uid": uid,
        "pwd": pwd,
        "email": email,
        "phone": phone
      }

      shared.getMongoCon(res,function(db){
             var collection=    db.collection('student');
             collection.updateOne(condtionObj,{$set:updatedDataObj},function(e,r){
                 if(e){
                     res.send(e);
                 }else{
                     res.send(r);
                 }
             })
      })
})


Now lets code for delete request..
delete button is available in tablecomp
But lets write the functionality inside Users.js
ans pass this as a callback function..
TableComp is generic component and we should not write application or specific logic inside it.

TableComp.js
==============
import React,{useContext,useState} from 'react';
import {ctx} from './context';
import Modal from './Modal';
const TableComp=({headers,keys,data,fd})=>{
    const ctxData=useContext(ctx);
    const [showModal,updateShowModal]=useState(false);
    const fnEdit=(data)=>{
        ctxData.dispatch({
            type:'EDIT_INFO',
            payload:data
        })
        updateShowModal(true);
    }
    const closeModal=()=>{
        updateShowModal(false);
    }
    const fnDelete=(obj)=>{
        let isOk=confirm('r u sure');
        if(isOk){
             fd(obj);
        }
    }
    return <React.Fragment>
        <table border='1px'>
            <tbody>
            <tr>
                 {
                     headers.map((h,i)=>{
                        return <th key={i+'h'}>{h}</th>
                     })
                 }
                 <th>Edit</th>
                 <th>Delete</th>
            </tr>
                {
                    data.map((obj,i)=>{
                        return <tr key={i+'r'}>
                            {
                                keys.map((k,i)=>{
                                    return <td key={i+'d'}>{obj[k]}</td>
                                })
                            }
                            <td><input type='button' value='edit' onClick={()=>fnEdit(obj)} /></td>
                            <td><input type='button' value='delete' onClick={()=>fnDelete(obj)} /></td>
                            
                        </tr>
                    })
                }
                </tbody>
        </table>
       {showModal && <Modal closeModal={closeModal} />} 
    </React.Fragment>
}

export default TableComp;


**And now this callback from TableComp is going to call its parent component TableComp()
By calling its attribute fd() from TableComp TableComp()
And from here User.js fnDelete() we have the object available to be deleted..
lets call the delete request from server call and pass this object..
Also once delete is done lets handle the promise async call here..
Then call the userAction to update the state by passing dispatch() to load/refresh the tableagain..


Users.js
=======
import React,{useState,useEffect,useContext} from 'react';
import TableComp from './TableComp';
import {ctx} from './context';
import userAction from './userAction';
import ServerCall from './ServerCall';
const Users=()=>{
    const headers=['ID','UID','PASSWORD','EMAIL','PHONE'];
    const keys=['_id','uid','pwd','email','phone'];
    const ctxData=useContext(ctx)
    const fnDelete=(user)=>{
        ServerCall.fnGetReq('student/delete-std?id='+user._id)
        .then((res)=>{
            if(res.data.ok ==1  && res.data.deletedCount == 1){
                alert('deleted successfully');
                userAction(ctxData.dispatch);
            }
        })
        .catch((res)=>{

        })
    }
    useEffect(()=>{
            userAction(ctxData.dispatch);
    },[])
    return <div>
        <TableComp fd={fnDelete} headers={headers} data={ctxData.state.users} keys={keys} />
    </div>
}

export default Users;


server.js
===========
router.get('/delete-std', function (req, res) {
  var id = req.query.id;

  var condtionObj = {
    _id: objId(id),
  };

  shared.getMongoCon(res, function (db) {
    var collection = db.collection('student');
    collection.deleteOne(condtionObj, function (e, r) {
      if (e) {
        res.send(e);
      } else {
        res.send(r);
      }
    });
  });
});


*******************************************************************************************************************************************
04/02/2020 - redux
*******************************************************************************************************************************************
How can we create our custom bind method as mybind() which works exactly smae as javascript bind()?? 
Suppose I have a function f() with 2 arguments.. 
And we have an object called o.. 
How many ways we can call bind() on object o? 


o = {
	n:10;
}
function f(a,b){
	return this.n + a + b;
}

f.bind(o)(10,20);
f.bind(o,10)(20);
f.bind(o,10,20)();

These are the possibilities..

Now if we have to replace this predefined bind() method with our custom mybind() method.. 
	Which should works exactly the same as the bind() method..and gives the same output..
Now how can we create the own bind() method?? 

f() method should have to call with which reference? function or not.. f.bind()..
If we want to call one method with function referenece..then how i can create that method?

my requirement is i created one method..that method should be called with function reference..
ok..if we want to call one push() method which reference is required? object reference is required..
same like..my own method with function reference..then how i can create that method...
that method should be inside one class..class should call as function class..
there are multiple classes are there na like..Array,String,Object...same like that Function is also one more class..
that method should be within the Function..then we can call that method with any function reference..
so that how i can any function available to my Function class?
That class already created..ok..one class already existed..i want to add one method to the the class..how we can?
I have one class is there..I want one function from outside..inheritance..

so lets write it..inherit that function class first...
if we want to inherit the class how we can inherit? extend..is for es6 class..

But in case of normal functions..function class..we can use prototype..
which function you want us to call with function reference? mybind()...is which type? function type..
so lets write that method..

Function.prototype.mybind = function(){

}

Now this function we can call with any function reference...So that how can we call this? we already defined another function f..
f.mybind()...

Function is a core javascript class...If we want to make available one method to this class Function..how can we do it?
	Function.prototype.mybind = function(){}
	then check...if f.mybind() is there or not...
	
earlier weused f.bind() now we are using f.mybind()...
Now tell us how our bind() method i.e. mybind() structure will look like?
ok...first tell javascript bind() method returns us what?//function or not..
so our mybind() should also return a function..there is no problem in that..
Function.prototype.mybind = function(){
	return function(){}
}


So that how we can this inner returning function from bind?..
we can call like... 
	f.mybind()()
	Now tell at the time of calling this which method is going to call?
	My original method should trigger....in case of bind just relate...
	f.call()? which method should trigger?//f()
	f.bind()?returns one function..We are going to call this returned function..then which method is going to be triggered? f() or not..
	so now this part is now our f() method calling....
	
	upto f.mybind() it is pointing the inner method..
	now upto f.mybind()() we are calling the inner function...
	and from this inner function body.. we have to call our original method i.e. f1() to implement similar to javascript bind()
	
	but do you want me to hardcode that one??no right..because i dont know what is my method name..
	so that some object reference is required..or not.. what is my object reference..at the time calling how i can get my object reference..
	like current object this or not...
	
	now tell me.. f.bind() takes how many arguments??i.e. javascript bind().. any number of arguments right..
	can you tell me how we can represent multiple arguments ? using rest operator...it is like spread operator only...
	But if we pass it like an argument then it is called rest operator..
	can i put like ...outer. now this outer is which type? array...ok which contains how many elements? any number of elements or not...
	
	my first element is what? object or not...second element onwards is my original function arguments or not...
	now tell me all the arguments are in outer function parameters or some are in inner function parameters also?
	in inner function parameters also or not...see the below..
	f.bind(o)(10,20);
	f.bind(o,10)(20);
	f.bind(o,10,20)();

	the inner function also can take any number of arguments..may be 2,3...or n
	how i can represent any number of arguments..can we use rest operator again like ...inner
	
	Function.prototype.mybind = function(...outer){
		return function(...inner){
			//here we have to merger this outer and inner and then we have to call function f()
		}
	}


Now how we can represent the current object? this..so that can we get that one...
var o = {
	
}

at the timeof calling this one..

my object reference is there..how we can call it?
using call we can call it..

.....
call or apply? which one is better one? ok lets discuss first call()..
original.call()
first argument is object...
my outer function first argument should always be an object.....argument outer is which type? array..
then how we can take the first argument? outer[0].. 
now i have the object avaialble..lets discuss about rest arguments..we can pass it like any of the below 3 ways...
	f.bind(o)(10,20);
	f.bind(o,10)(20);
	f.bind(o,10,20)();

An the rest all arguments may be within outer[1] to outer[outer.length-1] or in inner array..or may be in both..
lets tae all argument from outer except first index..as first index representing to object..

	Function.prototype.mybind = function(...outer){
		var origin = this;
		var outerArg = outer.slice(1);//2nd element to end...

			return function(...inner){
				//origin.call(outer[0], [//we need an array here so call() is not the recommended one..]
				origin.apply(outer[0], [...outerArg,...inner])
			}
	}

but we dont know if outer array has more elements in it..it may be in inner array..part of inner fucntion parameters..we dont know that..
then how we can call that?
so call() is not the recommended one..lets go with apply()..lets merge both the arrays and send it as a single array to apply()

here is the final code............

	Function.prototype.mybind = function(...outer){
		var originalFn = this;
		var currObj = oter[0];
		var outerArgs = outer.slice(1);//2nd element to end...
		return function(...inner){
			originalFn.apply(currObj, [...outerArgs,...inner])
		}
	}
	


function f(a,b){ console.log(this.n+a+b) } //undefined
o = {n:5} //{n: 5}
f.bind(o,10,20) //ƒ f(a,b){ console.log(this.n+a+b) }
f.bind(o,10,20)() //35

Function.prototype.mybind = function(...outer){
		var originalFn = this;
		var currObj = outer[0];
		var outerArgs = outer.slice(1);//2nd element to end...
		return function(...inner){
			originalFn.apply(currObj, [...outerArgs,...inner])
		}
	}
	


//ƒ (...outer){
		var originalFn = this;
		var currObj = outer[0];
		var outerArgs = outer.slice(1);//2nd element to end...
		return function(...inner){
			originalFn.apply(currObj, [...outerArgs,...inne…


f.mybind(o,10,20)() //35


f.bind(o,10)(20) //35
f.mybind(o,10)(20) //35

f.bind(o)(10,20)// 35
f.mybind(o)(10,20) //35


===::===::=================================================================================================:====:====
REDUX
======
lets start with redux......
if you know the useReducer() how my useReducer() is going to work within a functional component...
same like that my redux is going to work for class components as well as functional components...

lets take the same requirement we already discussed or implemented for useReducer()...
when we go for useReducer() tell me first... if i want to maintain the global state more than that nothing...
that state can be used by any one of the component within the application...
same like that with useReducer() we can use functional components only...
the same concepts i want for the class components also..then at that time we have the new concept called as redux is there..

now our requirement is what?what we did in case of useReducer()?
i have 3 components...these 3 components are available within the App component...
A component contains a name textbox and submit button
B component contains a location textbox and a submit button.
C component we are displaying name and location....

So what we did earlier is we put name and location in one place when we entered in textbox and click on submit..from A and B..
then in C we are reading the name and location from where it is stored...
ok tell me how many state variables we were maintaining ? that state is local or global..

we used like :-
	var initVal = {
		
	}

And initVal was representing as state object...this can contain any number of state variables.. and it was maintained like a global state..
so here also it is same in redux..here also we are going to maintain the state... by default name is empty string and location is also empty..
{
	name: '',
	location : ''
}
At the time of clicking on submit button this name should have to change with what? whatever we entered..for ex Sachin or not...
ok...now think this initial data is going to store in an object..what is my data?{name: '',location : ''}
we can call this like a store..yes or no? within my store how much data we can store?
any number of properties....

Now tell me how is going to update the store or state?
incase of useReducer()...reducer() was updating the state..
Here also in case of redux if we want to update the store the same reducer() is responsible...
const reducer = () => {}

this reducer() method takes how many arguments? 2 arguments...
current state and action...same here also in redux...
what is the purpose here? we can update any one of the state value or not,..how we can? may be name or location..
ok how we can differentiate? based on the type...
ok how we can write? we can use the switch case... switch(action.type){}
and at ast this reducer() method should return what? state..so that can we return that?
here we can use the spread operator..to get the original state as is..
lets write the full code..

const reducer = (state,action) => {
	switch(action.type){
		case "NAME":
			state = { 
					...state, //getting previous properties..
					name : action.payload //overriding name from state with the input coming action.payload
				}
			break;
		case "LOCATION":
			state = { 
					...state, //getting previous properties..
					location : action.payload //overriding location from state with the input coming action.payload
				}
			break;
	}
	return state;
}


now tell me who has the data? A...
A is what type of component? may be functional may be class...
if functional we used like useReducer(), but now it is a class....
So the structure of it will be like

class A extends React.Component{
	render(){
		return <div>
			<input />
			<button>submit</button>
		</div>
	}
}

Now what next..at the time of clicking on button one method is going to trigger..in this method what we have to do?
we have to get the data from textbox..we can get the data in 3 ways...
	1)refs(this.refs.refname.value)
	class A extends React.Component{
		fnClick(){
			let textboxvalue = this.refs.name.value;
		}
		render(){
			return <div>
				<input ref="name" />
				<button onClick={fnClick}>submit</button>
			</div>
		}
	}
	
	2)create my own reference
	class A extends React.Component{
		constructor(){
			this.r = React.createRef();
		}
		fnClick(){
			let textboxvalue = this.r.current.value;
		}
		render(){
			return <div>
				<input ref={this.r} />
				<button onClick={fnClick}>submit</button>
			</div>
		}
	}

	3)onChange event
	class A extends React.Component{
		constructor(){
			super();
			this.state={
				tval : ''
			}
		}
		fnChange(event){
			let textboxvalue = event.target.value;
			this.setState({
				tval : textboxvalue
			});
		}
		fnClick(event){
			//get that value..
			console.log(tval);
		}
		render(){
			return <div>
				<input onChange={fnChange} />
				<button onClick={fnClick}>submit</button>
			</div>
		}
	}

Alternative of createRef() in hooks is useRef()..


Now I have the data...to whom I have to give? to reducer or not..That has to update the state...
Can you tell me how we can call the reducer? using dispatch() or not..
in your useReducer() how we can get the dispatch()?
my useReducer() itself was returning one array...within that we have state and dispatch...

Here we get the dispatch() from store.. we will see that syntactically..
But if we want to call the reducer then there is no other option.. we have to call dispatch() only..
how we can get it ..we will see.,,dispatch() which takes how many arguments? one ...
that is an object..is equal to reducer() method second argument..the second argument is which type?
reducer second argument is object type or not..we can go to the reducer and check the switch case how we are using...action.type means action is object type only..
so now in my action it is an object...it has type and payload...
in order to differentiate which state we are going to update.. we can mention type in action..and this should match with my switch case in reducer..
payload we can send the data...


Now this component we developed A is at react side.....
And the store we are maintaining in redux....
now my react has to communicate with redux or not..
may be set the data or may be get the data..
my react if want to write a component react library is there...
if we want to maintain the store we want redux library...
both are separate..if we want to communicate then ?react-redux is the library...


Now we can develop B component with location and submit button..my data is going to save in store...
Now this C component...what it is going to do??It has to get the data from the store...

Lets first create the application.....

create-react-app reduxapp

Syntactically how we can create the store we will see..
how to get the dispatch()...

whatever we wrote in the useReducer() almost the same thing we are going to write it...
Yesterday in between we did something..action..
Now here one button is there. if you click on the button my data is available within the database..
In this case there is no action nothing is there..
Now my requirement is like to perform some action..
my requirement is like go to the database..get the data...Then at that time dont write the logic within this particular component level..
can we create an action method? 
From my component level we have to call action..action is going to call ServerCall..ServerCall is going to call NodeJS..NodeJS to Database..
then it comes to reducer..action

one scenario where we are using reducer..
we have session storage or local storage in browser..why it is there?
simple my data is coming from database or something..
if we want to use the data multiple times then why I need to go to the server and get the data..everything..
then at that time can we put that data in the browser only...instead of going to the server can we go the browser and can we get the data...
my performance is going to increase or not..

If we want to maintain the global state..yes we can maintain that one..
at the same time if we have any common data..put that data within the store..where ever we want..which operation we want..go and get the data and use it...
now the data is available store data is available in browser...
my local storage data we can see..session storage data we can see...my cookies data we can see..in the browser application tab..
but whatever data we put in the redux store  physically that data is not available..it is like the service in angularjs..we are putting some data..that data is not physically available..
same like that my redux store data also physically it is not available...

But as a client side developer...we are inserting data as Sachin..that time we should be at least knowing..
my data is going to be stored or not...at the time of developing...if my data is not stored..then there might be some bug..we might have to fix the bug...
ok..so if it is a session storage we can go to the browser and we can see that name Sachin is stored or not..
but my redux is not having that physical representation..in the browser we cant see that...then at that time how we can see that?that particular name is stored or not..
for that purpose if we want to see as a developer we have to check the logs...ok we click on the submit button..that time the name is stored or not..
that i have to check in the log...there is no other option...for that purpose one middleware library is there known as Redux Logger...
this is only for development purpose....
so how many library is there?
	//redux....to create the and everything..
	//redux-logger...if we want to check the logs..
	//react-redux ...communicate react with redux..

now see...
we have C class..here we have to display...so we have to take the data from store..
for example now my store has name: sachin and location : Mumbai
this data i want to use or display in C..

first tell me this data..is out of my component or not..that is not like...or this.state..or this.somevalue...
This is the data out of my component....
If it is out of our component...if it has to come from outside how we can retrieve this? as props or not..there is no other option..
the data should be coming like props only... this.props
Within my props what is the keys and everything we will decide that one...
That is the first point confirmed....

Now see  we are going to write a simple javascript function...lets understand this...
I have a function called f1 which takes 2 arguments.. a and b..
And then inside of function f body i will put like an object.. and then we will write a(o);
then i have a function called as if(){} and then we write like b(if)...
then


function f(a,b){
	var o ={ name : "sachin" };
	a(o);
	var if=()=>{}
	b(if);
	return function(n){
		return n;
	}
}


my f method takes 2 arguments a and b..what is the type of arguments?
functions...because in the code we are calling it by passing some arguments..
a(o)
b(f)


So now if we want to call method f() two methods are required...so that can we create the methods first..
ok how we can?

var f1 = (o) => {}
var f2 = (f) => {}

Now how can we call it...
f(f1,f2);

Now tell me my A is pointing to f1..which means we are calling A means calling f1 by passing one argument...what is that argument..
one object is the argument..

Now next we have function f2..which is passed to function if() while calling.. and from within the function f body..f2 is executed by taking another function as argument...

Now f() is finally returning a function... how can we call it???
f(f1,f2)(_) - like this or not...

Now the f(f1,f2) is returning a function which also takes one argument and returns the same argument.....


now f we will convert to connect() method..
object o is like current store...
inner function is like a dispatch method...


now my connect() method takes two arguments...
first argument is like what? function..it is going to call the function by passing one argument ie. object...that is current store data..

second argument is B now it is another function..this function is ging to call by passing how many arguments? 1 argument that is a function.. that is dispatch() or not...

And then it returns one more function..it is one more component...which component you want me to connect with the store??C or not..
once again it returns me what?? C component some methods or not...

Now see..connect() is the method which is available in which library?
react-redux...
my store is redux part..
my react is nothing but component...
but i want to connect my component with redux...we have a method called as connect() which is present in react-redux...library
which takes few arguments...the first argument is to get your current state...and second argument is like a function to get our dispatch function..
now my connect() method returns one more function...that function take what?
your component as an argument or not..returns me what? the same component with extra thing is what? connecting with the store r not...

lets write our component..in the connect() return

connect(f1,f2){
	return 
}


export default connect()
//this is always expecting a component...which is establishing a connection with store...

this component will be connect with the store..


Now at the time of executing this one connect(f1,f2)(C) - my store data is where?
my C wants only store data or dispatch method?
only store data....

Where we want dispatch?//A and B...
So my second argument is not required for C component...
connect(f1)(C) - this one will be called by passing my store data... my store data is available in f1..
and we will display the data in component C render method...how ? using props...
{this.props.name}
{this.props.location}


If we want the second argument only then..for example only dispatch() method then?
connect(null,f2)(C)

var f1 = (o) =>{
	return {
		name : o.name,
		location : o.location
	}
}


for naming convention purpose dont put like f1() and f2()...
f1() - mapStateToProps() and f2() - mapDispatchToProps()



*******************************************************************************************************************************************
05/03/2020
*******************************************************************************************************************************************
I have 3 components A,B and C..
From A and B i want to set the data..and from component C i have to get the data from the store..
Ok..tell me the flow...

first we will design the components.. A,B,C..
which libraries we need..react,react-dom

Now where we are going to save? store...
If we want to create the store which library is required? //redux..
Now suppose we have created the store...within the store which values you want me to put?
Here we are going to pu like some initVal..
{ name :'', loc : ''}

Now at the time of clicking on the button from component A..the store data i.e. { name :'', loc : ''} has to be updated..
So this is our requirement...
from the react side what we have to do?
we have to handle the click event...one method is going to trigger..get the reference of textbox..and get the data..
this is my name...now this name i want to update where? within the store or not..
who is going to update the store?reducer or not.... that means we have to give this data to the reducer or not..
if we want to call the reducer what you need??..dispatch() method is required or not..
so that can we create the reducer() method?..how we can?

reducer() is a simple javascript function more than that nothing...
	const reducer = () =>{}
	
Now this reducer() where you want me to use?
This reducer() responsibility is what in general? 
It is going to update the store or not..
In your application like this multiple javascript functions we can write..
For example userAction is there..how my userAction looks like :- 
	const userAction = () =>{}
	
Now what is the difference between reducer() and userAction() syntactically?
Syntactically there is no difference at all..
Both are normal javascript functions only...
But we said like this reducer() function has the capability to update the store...but userAction() function does not...

So what is the extra things? some extra properties are required or not for this reducer() function..
Ok what is that means this reducer() function is going to update the store means - 
This reducer() function has to connect with the store or not..
And that one didn't happen for this userAction() function...
Then only reducer() function is going to update our store or not...
where we are going to connect our reducer() to store we are going to see...syntactically...

In our application we can write any number of functions...those are like normal javascript functions only..
But if the function for ex reducer() has to communicate with the store means somewhere there is an interlink between this reducer() and store..

Now the components are going to give the data to whom? to the entity who is going to update the store.. We call that entity like reducer...
Now from components how we can call the reducer? by using dispatch() or not..
If we call the dispatch() method that time this reducer() is going to be triggered..within the reducer what we have to do?
this reducer() takes how many arguments? 2 arguments..what are those ? state and action..
and then within the reducer() function we can put the switch case and everything...and then finally we have to return what? state or not...
Now this data is going to be updated..fine...


What is next one?
There is one more component C is there...This person has to communicate with the store and has to get the data or not..
for that which library is required? //react-redux
within this library which method is there? connect() method
So far how many methods we have discussed yesterday?

Ok lets try to create component C..if we want to use C outside then we have to export it..we are aways exporting a component..
	class C extends React.Component{}
	export default C;

Now this component has to connect with redux store or not..for that which method is there? connect() or not..
So that can we take this connect()?this connect() takes how many arguments? some of the arguments...lets consider 2 as of now..
first argument is a function type and second argument is also a function type..
my first argument gives me store..and my second argument gives me dispatch...

Now for component C we need what? state or not..as we are only going to display the data..
So we need only first argument of connect() method..and name of function for convention lets use - mapStateToProps()
Now the connect() method returns me what? another function...so that can we call that function?That function expecting what?
Which component you want me to connect with the store..Here we are connecting C..
Now this method - connect(mapStateToProps)(C) returns me what? Same Component connect with store..
So total thing is returning the C component plus connection with the store or not...
	
	import {connect}  from 'react-redux';
	import React from 'react';
	
	class C extends React.Component{}
	function mapStateToProps(o){
		return {}
	}
	export default connect(mapStateToProps)(C);

Now my C component established the connection with the store or not..ok done..
Now which type of function is this -  mapStateToProps()? It is a callback method or not..

See we are giving this method mapStateToProps() to another function connect()..and then this connect() has to call with another reference or not..
Now this method - mapStateToProps() is going to call by passing how many arguments?
one argument is like state - all our store or not..
ok..my state contains this data...name and loc..
Where we are going to display this data? In C component or not..
The data is inside of my C component or outside of my C component? outside...
then how we can represent these data? using props or not... this.props..
but what about remaining things? so many props will be there right..
we are going to display my name and location...so the keys are required or not...how I am going to get the keys..

mapStateToProps() method is going to call..it is going to return me a state...
whatever you return from this particular method mapStateToProps() that data is available to our component..
which data we want to return to component C?
In the state what data is there..that data we can return...ok which data you want me to show within the C component?name and loc..
So that can we return that one? any key we can put it..and use the same by using props..

	class C extends React.Component{
		render(){
			return <div>
				<h1>{this.props.n}</h1>
				<h1>{this.props.l}</h1>
			</div>
		}
	}
	mapStateToProps = (state) => {
		return {
			n : state.name,
			l : state.loc
		}
	}
	export default connect(mapStateToProps)(C);

Now this total object { n : state.name, l : state.loc } is returned to whom? My C component or not..
Any value that is coming from outside that is like what? props or not..
so that this.props.n and this.props.l we can use..


Coming to my A component...my A component requires what? dispatch() method or not..
Can we use the second argument of connect() method?

In our hooks we were using like useReducer()..
if we want to make it available the state within all our components then that time what we were using? which concept?
context we were using or not...

Here also we need right..Here also I have the root component App is there..
Within the root component there are so many components are there..any component can set the data...and any component can get the data or not..
That means what we want to make it available to all our components? We have to provide our store or not...
If we provide our store then any component can set the data and any component can get the data...
Ok to who we have to provide?all our components is nothing but what? App or not..


lets create an application now using create-react-app
	create-react-app reduxapp
	
Now tell me how many libraries are required?Can we install those libraries?
	npm i redux react-redux redux-logger --save
	
redux        //for the store
react-redux  //is to communicate the react apps to redux..
redux-logger //this data is not physically available..as a developer we should have to know right this data is storing properly or not..
			 //this is like a middleware..at the time production we have to remove this one..
			 //we can use like dev-dependancy also.. --save-dev
			
Ok now how many components we want? 3 components ..can we create these?
	cd src
	create-react-component A
	create-react-component B
	create-react-component C

Now where we want to put these components? 
in App right..lets import these..and then render these 3 components in App..remove unwanted code..

App.js
=======
import React from 'react';
import logo from './logo.svg';
import './App.css';
import A from "./A/index";
import B from "./B/index";
import C from "./C/index";

function App() {
  return (
    <div className="App">
      <A />
      <B />
      <C />
    </div>
  );
}
export default App;


Now lets go to A component and add a textbox and a button..also handle the click event...
Go to A.jsx...for html tags...
Go to A.js...for adding onClick() methods or any events..

how can we get the data from textbox? how many ways are there? 3 ways right..refs,createRef and onChange()
Here can we use refs..
lets pass the reference -> refs="name" within  <input type="text" /> in my A.jsx..
And get that reference -> this.refs.name.value in my A.js fnSetName() method..

Here is the code how it looks..
A.jsx
=====
import "./A.css";
import React from "react";

function template() {
 
  return (
    <div className="a">
      <h1>A</h1>
      <input type="text" />
      <input type="button" ref="name" value="set name" onClick={this.fnSetName.bind(this)} />
    </div>
  );
};
export default template;

A.js
====
import React    from "react";
import template from "./A.jsx";

class A extends React.Component {
  fnSetName(){
    let name = this.refs.name.nodeValue;
  }
  render() {
    return template.call(this);
  }
}
export default A;

Now I have the name..this name to whom I have to provide?reducer() or not..the reducer() is going to update state..
my reducer() how it knows which state values are there...can we create those values first?
my state contains which value?ok can we get that values first? how we can?

lets create initVal.js..create a folder called utils inside src and within utils folder create initVal.js...
what we are going to store..name and loc as empty strings as default values..
Can you tell me where we are going to use this? Who should know that these are the properties are there...
Who is going to update the state?reducer or not...
so that lets export this initVal..


initVal.js
===========
const initVal = {
    name : '',
    loc : ''
}
export default initVal;


Next we have to create the reducer or not..somebody has to update this particular state..so that who is the responsible person?
reducer or not..so lets create this..

lets create a new folder called as reducers..and then inside reducer.js
reducer() takes 2 arguments - state and action..who is going to call this reducer()? my dispatch()
we are calling dispatch() means the reducer() is going to trigger..In this one which value we are getting from this particular dispatch() method?
we are getting action or not.. what about my state then ? we have to bind it or not? yes or no? so that where is my initial value?
initval.js..so that can we import that one? lets import that.. and give it to state..state = initVal

the same thing we used in useReducer() where?syntax is what?
	const [state,dispatch] = useReducer(reducer, initVal);
here we are passed initVal as second argument which gave the initial state to my reducer..
So whatever we are passing that is going to bind with the state or not..

Now the responsibility of action argument is what? how can we differentiate?
by type or not..now action.type what we are going to pass...we can decide that now..NAME and LOC
Now suppose anybody passed me action.type = "NAME" then we have to update what? state..i.e. name only..
les update the state... ok how many properties are there all properties i want..
in this property which property you want me to update?that is name right that is the key.. and data is coming from where? action.payload..
Now by seeing the code for action we know that action is an object and it is expecting 2 properties i.e. type and payload
And at last we have to return state..

Now where we are using this reducer? wehere we should have to use? This method has the capability to update the store or not..
that means somewhere we have to bind the reducer with the store or not...so that we are going to use this reducer in some other place or not..
so can we export this one...


reducer.js
===========
import {initVal} from "../utils/initVal";
const reducer = (state = initVal , action) => {
	switch(action.type){
		case "NAME" :
		    state = {
		    	...state,
		    	name : action.payload
		    }
			break;
	
		case "LOC" :
			state = {
		    	...state,
		    	loc : action.payload
		    }
			break;
	}

	return state;
}
export default reducer;


this reducer() method having the capability to update our store..is nothing but what..
this particular reducer() method should have to register with our store or not..
remaining methods not registered..that is the reason they are working like normal javascript methods or not..
But this reducer() method has some extra features like what to update our store...
We will see this later...

Now this reducer has to be called from dispatch() method..which component needs dispatch()? A and B right..
So lets go to my A component...
At the time of clicking on my button fnSetName() is going to be triggered..
And we have the textbox data..this data we are going to give it to whom? to the dispatch() method..to invoke the reducer..
Here how can we get dispatch() method?
my connect() method second argument gives dispatch() method..
A and B should have to give the data to reducer.. that means they need dispatch() method..
C has to get the data for display..so my state is required..

can we write the connect() method? coming from react-redux...lets import this...
connect() is the method which takes some of the arguments and returns me another function which take component as argument..
which argument of connect() we want in A component? second argument or not..as we need dispatch.. so pass null as first argument, and pass a function as second argument..
	i.e. connect(null,mapDispatchToProps)(A)
	
	
Now type of mapDispatchToProps is what? function..can we write that function...can we write that function? inside or outside the class?
outside or not as we are using it directly..which takes how many argument?one argument..
const mapDispatchToProps = () => { }

either mapDispatchToProps() or mapStateToProps() whatever it is returning it is available to the components as props...
Now lets return something from mapDispatchToProps()....that will be available to components as props..
ow what we are going to return? dispatch or not... how we will return?
dont think like exactly dispatch..it is like a variable reference for dispatch....we can put a..
but for convenience we will use dispatch name..

	const mapDispatchToProps = (dispatch) => {  
		return {
			dispatch:dispatch
		}
	}


Now this dispatch where you want me to use? exactly where ? inside button click only or not..
from here we have to call the reducer or not..
ok my dispatch is available within the class or outside the class?
out of the class?? Then how we can use?? like props or... lets call that...
which should take how many argument ? only one action or not..action can be of any type..but my reducer is expecting of type object with key type and payload....

	  fnSetName(){
    		let name = this.refs.name.nodeValue;
   	 		this.props.dispatch({type : "NAME", payload:name})
   	 		//now this argument goes to my reducer second argument...
  	  }


lets modify the A.js and write the full code....
A.js
=======
import React    from "react";
import template from "./A.jsx";
import {connect} from "react-redux";

class A extends React.Component {
  fnSetName(){
    let name = this.refs.name.nodeValue;
    this.props.dispatch({type:"NAME",payload : name})
  }
  render() {
    return template.call(this);
  }
}

const mapDispatchToProps = (dispatch) =>{
  return {
    dispatch 
  }
}
export default connect(null,mapDispatchToProps)(A);


Similarly lets write the component B and the dispatch() method and all these details...
lets use createRef() to get data from textbox here..
B.jsx
=========
import "./B.css";
import React from "react";

function template() {
  return (
    <div className="b">
      <h1>B</h1>
      <input type="text" ref={this.myRef} />
      <input type="button" value="set loc" onClick={this.fnSetLoc.bind(this)} />
    </div>
  );
};

export default template;


B.js
======
import React    from "react";
import {connect} from "react-redux";
import template from "./B.jsx";

class B extends React.Component {
  constructor(){
    super();
    this.myRef= React.createRef();
  }
  fnSetLoc(){
    let value =  this.myRef.current.value;
    this.props.dispatch({
      type : "LOC",
      loc : value
    });

  }
  render() {
    return template.call(this);
  }
}

const mapDispatchToProps = (dispatch) => {
  dispatch:dispatch
}
export default connect(null,mapDispatchToProps)(B);

How many places we are using this react-redux library?
	at the time of setting the data..at the time of getting the data..
	at the time of getting the data the connect() method is required or not..it is coming from react-redux
	at the time of setting the data..means giving the store to all our components..then at that time any component can set the data or not..
			then at that time that place also we need react-redux..
	Which place is the best place to make our store available to al the components? App or not..
	App we are using in our index.js..
	Inside index.js we are using like :- 
		ReactDOM.render(<App />, document.getElementById('root'));
	For this App what we have to do? We have to make this store available or not..
	FOr this purpose we have a component available called as a Provider..
	
	In our hooks how my store wa s available?
	We created one context provider and within the value attribute we passed the store..
	
	Same like that in our react-redux library there has one component is there..that is called as a Provider is the component..
	that component is used for providing the store to all our components..ok how we can get that one?
	//we can think like ctx.Provider is same as Provider...
	Now what you want me to make it available? store or not..so that we have to create the store and get the store or not...
	store = {}
	Now this store we have to give to whom? to my provider or not..Provider is a component..how we can give it? like an attribute or not..
	ok which attribute we have to give in Provider? Can we mention like <Provider a={store}><App /> </Provider> ?
	THis Provider is not created by us...
	If anybody creates a component then that time that guy should have to tell how he is expecting your values from outside...
	He is going to tell like If you want me to give the store can  you use like one attribute called store as the key...
	SO that this guy App is going to use like this.props.store.. now this store is available to all our component..
	
	But now what is missing? we have to create our store..by using which library? redux library
	Now we have to create store..who is going to update the store? reducer..
	my reducer type is what? A function..
	that particular reducer should have to bind with what? my store or not...
	then that time only that particular reducer method having the capability to update the store..
	
	So can we create the store...
	

	import {Provider} from "react-redux";
	ReactDOM.render(<Provider store={store}> <App /></Provider>, document.getElementById('root'));

	
We can also get dispatch from my store also..but my store is not yet created...lets create the store first...
which library is required? redux or not...
to create the store in the library there is a method called createStore()...
whom I have to give this store?to all our components only...so that anyone can get and anyone can set...lets export this...
store.js
=========
import {createStore} from "redux";

const store = createStore();
export default store;


Now lets import this one in App..so that store should be available to all the components..
Now we have to provide the store to which component ? App so that it is available to all the components..
How we can provide? using Provider...
Provider is from react-redux library..
communication is happening between App and Store..
App is at react side ...store is at redux side.. and Provider is from "react-redux" side...
Provider as discussed it is like ctx.Provider.. and instead of value attribute it has an attribute called store..

App.js
==========
import {store} from "./store";
import {Provider} from "react-redux";
ReactDOM.render(<Provider store={store}> <App /></Provider>, document.getElementById('root'));


Now within the B.js what we need here?dispatch() here...once again it is coming from my store also,...
lets go to B.js and call dispatch() from store...

B.js
=======
import React    from "react";
import {store} from "./store";
import template from "./B.jsx";

class B extends React.Component {
  constructor(){
    super();
    this.myRef= React.createRef();
  }
  fnSetLoc(){
    let value =  this.myRef.current.value;
    store.disaptch({
      type : "LOC",
      loc : value
    });

  }
  render() {
    return template.call(this);
  }
}

export default B;


Ok who can update the reducer? who can update the state?reducer...reducer is which type? function type..
we can have n number functions...but some of the functions only update our store or not..
that means what? those 
in our application which function is going to update our store?our reducer function or not..
can we register that reducer() function with this particular store at the time of creation...ok how we can?
For that one we have we have another method is there called as combinedReducers()..
By using combinedReducers() first combine all the reducers into a single reducer..lets call this as a rootReducer..But we can put anyname..
	combinedReducers() is the method which takes an object type as argument...Ok can we put the reducer we have imported to this file..
	If we have to give an object how we have to do?
	combinedReducers({reducer:reducer}) is same as combinedReducers({reducer})
and then register this rootReducer with the store...or not..
How many reducers are there in this case?only one...can we get that one?

we can have any number of reducers right...
my dispatch() calls all the reducers...and thats the reason we are combining like one reducer...
Any updates happening within the store I have to log...which library is required?//redux-logger
lets import that one..my logger is middleware..
there are multiple middleware are there..one is redux-thunk, one is redux-saga..
If we want to put the middlewares..there is one more method is there called as applyMiddleware()
These middlewares are on the store...so that can we register with the store?
for now which middleware is there? logger only right..

store.js
========
	import {createStore, combinedReducers, applyMiddleware} from "redux";
	import logger from "redux-logger";
	import reducer from "./reducer/reducer";
	
	const rootReducer = combinedReducer({reducer});
	const store = createStore(rootReducer,applyMiddleware(logger));
	export default store;



Now all the changes to the store and App are done..

Lets come to the component C...
We have to display the data...the data which is available in store that is outside that time we can access like this.props...
this.props.store.data...

C.jsx
======
import "./C.css";
import React from "react";

function template() {
  return (
    <div className="c">
      <h1>C</h1>
      <h1>{this.props._}</h1>
      <h1>{this.props._}</h1>
    </div>
  );
};

export default template;


Now coming to my C.js..now this person has to communicate with the store...get the state and display the data...
How we will get the current store? connect() the first argument gives me the current store or not..
I want the state..so first argument is required or not..
	connect(mapStateToProps)(C);

Now lets define this function - mapStateToProps()
Where we will define this? inside or outside class? outside or not..
It should have to return some value or not..basically one object..
now what is the key..any key name we can put it...but the same name we should use while displaying data using props..
because whatever mapStateToProps() method returns our component receive it as props...
Now all these state variables are from a particular reducer or not..that exact name we have to mention 
	e.g. 	
	const mapStateToProps = (state) => {
		return {
			n : state.reducer.name,
			l : state.reducer.loc
		}
	}
	
	there might be another reducer reducer1 having address as a state variable...then we will write as...
	const mapStateToProps = (state) => {
		return {
			add : state.reducer1.address
		}
	}

C.js
==========
import {connect} from "react-redux";
import React    from "react";
import template from "./C.jsx";

class C extends React.Component {
  render() {
    return template.call(this);
  }
}
const mapStateToProps = (state) => {
	return {
		n : state.reducer.name,
		l : state.reducer.loc
	}
}
export default connect(mapStateToProps)(C);


Now coming to the C.jsx file again lets receive the props from mapStateToProps()
C.jsx
======
import "./C.css";
import React from "react";

function template() {
  return (
    <div className="c">
      <h1>C</h1>
      <h1>{this.props.n}</h1>
      <h1>{this.props.l}</h1>
    </div>
  );
};

export default template;


====Flow===if action is there====
component - action - servercall - nodejs - db - userAction - state - reducer - state

Now in our case we dont have any action
So it is directly going from component to my reducer..



*******************************************************************************************************************************************
06/03/2020
*******************************************************************************************************************************************
Lets add some extra things to yesterdays requirement...
We already had 3 components...A,B,C rendered in App
From A and B i want to set the data name and loc respectively..and from component C i have to get the data from the store..

Now my requirement is to get all Users to get all the users(API) and show it in a table like structure..
How many components are required?
	Users - to get all the Users...It is having a button "get users". 
			If we click on that button... one method is going to trigger (this is action may be used multiple times from multiple places, lets use action for same)
			....action method will be called...now server call will be called....from server call to nodejs....nodejs to database...
			...data is coming back to server call....then to action method (now from here we have to update the store, how we can?)
			...we will call the reducer from action method by passing the data we received from database as part of action object payload (reducer second argument)
			...reducer is going to update the store.....

			now whatever data is available within the store that data only i want to display within the table..
	Table - Reusable component to display data in table..Now this table component has to take the data from the store..
	
Now lets create the components...
	cd src
	create-react-component Users
	create-react-component Table
	
Where we are going to add these components? in same root component App...
App.js
=======
import React from 'react';
import './App.css';
import A from "./A/index";
import B from "./B/index";
import C from "./C/index";
import Users from "./Users/index";
import Table from "./Table/index";

function App() {
  return (
    <div className="App">
      <Users />
      <A />
      <B />
      <C />
      <Table />
    </div>
  );
}

export default App;

Coming to the Users component what we need? One button - get users - to make a call to server to get all the users..
lets design....
Lets add a button to Users.jsx and add an onclick event to it...Ok how many ways we can add onclick event?? 
one way is directly giving the function name and binding..
	<input type="button" value="get users" onClick={this.fnGetUsers.bind(this)} /> 
second way is writing an arrow function within click event and from arrow function body calling that function...
	<input type="button" value="get users" onClick={()=>{this.fnGetUsers.bind(this)() }} />

See below code for both ways...

Users.jsx
==========
import "./Users.css";
import React from "react";

function template() {
  return (
    <div className="users">
      <h1>Users</h1>
      {/* <input type="button" value="get users" onClick={this.fnGetUsers.bind(this)} /> */}
      <input type="button" value="get users" onClick={()=>{this.fnGetUsers.bind(this)() }} />
    </div>
  );
};

export default template;


Users.js
=========
import React    from "react";
import template from "./Users.jsx";

class Users extends React.Component {
  fnGetUsers(){
  }
  render() {
    return template.call(this);
  }
}
export default Users;


Now what we have to do??
From Users.js fnGetUsers() method we have to call the action method..
In our application we might be having multiple actions.. so lets create one action folder..
We will add our userAction to the action folder..

cd src
mkdir actions
cd actions 
//create a file called userAction.js

Now here this action method - userAction() - is a normal javascript function only...

userAction.js
================
	cost userAction = () => {}
	export default userAction
	
This method - userAction() - should be called from where? from my component Users or not...
at the time of clicking on the button "get users" , fnGetUsers() will be triggered..
And from fnGetUsers() onclick method we are going to call this userAction()...
So now lets export this....

Now in his userAction() what we want? We have to make a call to ServerCall..
My ServerCall connect with the nodejs..At last who get that response? this action method or not?
Where is my data now? userAction()...whom I have to give? to the reducer...what the reducer requires?
dispatch() or not...
So now within userAction() method we need the dispatch...How we can get the dispatch() here....

How many ways we can get the dispatch?
	1) One is like store.dispatch()
	2) Another way is by passing the second argument to connect() method or not..


Can we get the dispatch() method from my connect method second argument from my Users component??
userAction() is a normal function so we cant use connect() here..
so Lets add the connect() method within the Users component and not in userAction.js
And then while calling userAction method from Users component we can pass the dispatch() method as an argument

Now the Users component has the dispatch() method and we will pass it to the userAction.js
Lets import userAction.js inside Users..
Also import connect inside Users..connect is coming from react-redux..
convert component C to a container...
Lets write the full code..

Users.js
=========
import React    from "react";
import {connect} from "react-redux"; 
import template from "./Users.jsx";
import userAction from "../actions/userAction";

class Users extends React.Component {
  fnGetUsers(){
  	//Now from here we have to give dispatch to whom to userAction()..my action method
    userAction(this.props.dispatch)
  }
  render() {
    return template.call(this);
  }
}
const mapDispatchToProps = (dispatch) =>{
  return {dispatch}
}
export default connect(null,mapDispatchToProps)(Users);


Now this userAction() method will receive dispatch sent from Users..as an argument...
  	//anything that is coming from outside should be received as props..
  	//But userAction() is a function not a class so we will receive dispatch as argument..
  	
Lets call the dispatch method we got as props in Users.js
We will have to call from button click method..
so lets call from fnGetUsers() and pass this.props.dispatch to it.. 
So that in userAction we can call the dispatch() method to call the reducer.. inside promise

	
UserAction.js
==============
const userAction = (dispatch) => {

}
export default userAction;

//Now my dispatch() method is available here..
//from here I have to call the ServerCall...
//lets create a folder services inside src..inside that create ServerCall.js

Lets write a class ServerCall...because any number of functions we can write inside it...
And lets add our required functions inside it..for example fnGetReq(), and fnPostReq() etc...
These methods will be called by throughout all components..wherever needed..
Now one get request to another get request what is the difference? only url...what about data? 
	data in case of get request will be different...but we will be sending as part of url only or not...
	so lets take an argument as url which we need to provide while calling fnGetReq() from action method..
Now one post request to another post request what is the difference? url and data...
	lets add - url and data as arguments to the method..which we need to provide while calling fnPostReq() from action method..
	
ServerCall.js
**************
class ServerCall {
	static fnGetReq(url){
	
	}
	static fnPostReq(url,data){
	
	}
}
export default ServerCall;


//To make any api call we need some third party library like jquery..or axios..If it is not there then we need to download..
//How to check? check in package.json
//lets download axios
	cd reduxapp
	npm i axios --save

	
//lets import axios in ServerCall.js 
	import axios from "axios";
//Then make the API call....using axios.get() and axios.post()
//Now these methods will return a promise...but we are not supposed to handle the promise here..as ServerCall is a generic file and should be used by all for API calls..
//We are not going to handle the promise here to get the user specific data...
//so lets just return these method calls i.e. the promise...
//Now if we want to call these methods from action method we are required to create an object for this class ServerCall or not..
//but we are going to call these methods any number of times or not..
//So i dont want to create object everytime..can we define these methods using static?
//now we will be using these methods in all components ..lets export this...

ServerCall.js
**************
import axios from "axios";

class ServerCall {
	static fnGetReq(url){
		return axios.get(url);
	}
	static fnPostReq(url,data){
		return axios.post(url,data);
	}
}
export default ServerCall;


Now we have to use this in our userAction() i.e. the action method...
//lets import the ServerCall within userAction.js
and then call the fnGetReq() to get all the users from server...within userAction() method
//now once we make the servercall it returns a promise..lets handle that..
inside then() we have 2 callbacks..one for success and one for failure...
inside success we have the result..can we update the store? Ok how we can?
We have to call the reducer..how? using dispatch() or not..
Now we have the dispatch() method here in userAction(dispatch) as argument coming from Users component...from connect()
Lets use that..

userAction.js
===============
import ServerCall from "../services/ServerCall";

const userAction = (dispatch) => {
    ServerCall.fnGetReq("https://jsonplaceholder.typicode.com/users").then(
        (res)=>{
            dispatch({
                type : "USERS",
                payload : res.data
            })
        },
        (err)=>{
            dispatch({
                type : "USERS",
                payload : []
            })
        }
    )
}
export default userAction;

Lets write the reducer part...We have to modify the reducers for users data or not..
Now firs lets add a state variable for users within initVal.js...for default values..
Now in reducer we have to add one more case "USERS"...
Once my reducer is executed from userAction() or whatever it is what it should return?
returns one object or not..object contains the previous data and updated data..
so that how we can get the previous data ...usng (...state) 
then for updated data what is the key? "users" or not? where we have mentioned this? in initVal.js or not..
if suppose previously "users" is already there then it will be overridden otherwise if not there in initVal.js then it will be created within reducer..when we write the below code..
		case "USERS" :
			state = {
		    	...state,
		    	users : action.payload
		    }
            break;
            
        
But in our application how many state variables we are going to maintain that we are going to put inside initVal.js for reference purpose or whatever it is..
ok for example one new person is joining your project...he wants to know how many state variables we are using..he will get a fair idea easily..
instead of going to each reducer and track there....


initVal.js
==========
const initVal = {
    name : '',
    loc : '',
    users : []
}

export default initVal;

reducer.js
===========
import initVal from "../utils/initVal";
const reducer = (state = initVal , action) => {
	switch(action.type){
		....
		....
		case "USERS" :
			state = {
		    	...state,
		    	users : action.payload
		    }
            break;
        default :
            state = state;
            break;
	}
	return state;
}
export default reducer;



Now save all the files...start the server
npm start

Go to browser and hit http://localhost:3000

Now we have the get users button..click on that and check in the browser network tab if service call is going or not..
ANd logger should print the state is updated ...



Next what? We need to display the data in the table right...
coming to Table component we need headers, keys and data....
headers and keys are not going to change..lets hardcode in Table.js..as instance variables..
	this.headers = ["ID","USER NAME","EMAIL"];
    this.keys = ["id","username","email"];
    
Table.js
=========
import React    from "react";
import template from "./Table.jsx";

class Table extends React.Component {
  constructor(){
    super();
    this.headers = ["ID","USER NAME","EMAIL"];
    this.keys = ["id","username","email"];
  }
  render() {
    return template.call(this);
  }
}
export default Table;


GO to Table.jsx for table creation....
Here the table first row is header...so lets loop through headers...
Table.jsx
=========
	...
		<table>
        	<tbody>
          		<tr>
          		{
            		this.headers.map((v,i) => {
              			return <th key={i+'h'}>{v}</th>
            		}) 
          		}
          		</tr>
          		<tr> ..... </tr>
       	 	</tbody>
    	</table>
    ...

Now after headers next row onwards the tr (table rows) are depending upon data..or not..
data is available in store...so that what we have to do??
To get the store we need connect()...Lets convert component Table using connect()..
We need connect() method 1st argument only for store..
and pass Table to the function it is returning..

Table.js
=========
import React    from "react";
import {connect} from "react-redux";
import template from "./Table.jsx";

class Table extends React.Component {
  constructor(){
    super();
    this.headers = ["ID","USER NAME","EMAIL"];
    this.keys = ["id","username","email"];
  }
  render() {
    return template.call(this);
  }
}
const mapStateToProps = (state) => {
    return{
      data : state.reducer.users
    }
}
export default connect(mapStateToProps)(Table);


Now lets use the store inside Table.jsx...anything that is coming from outside we will receive like props...
mapStateToProps() method is outside class..which is returning data and we will receive like this.props.data....
Now for creating rest all tr (table rows) we will loop through this.props.data..
And for individual row to create the td(column datas for each row) we will loop through this.keys.... as inner loop..
	And we have an object for each row and keys we have as inner loop..lets get the elements using obj[key]


Now the table component is loading on initial page load with only headers...which is wrong...
How can we fix this? If data is not there then dont load the table..simple..
Then lets do the conditional rendering....
	 { 
	 	this.props.data.length > 0 &&  
	 	<table>
	 		.....
	 		.....
	 	</table>
	 }
	 
	 
Here is the full code.....

Table.jsx
==========
import "./Table.css";
import React from "react";

function template() {
  return (
    <div >
      <h1>Table</h1>
      { this.props.data.length > 0 && 
      <table className="table">
        <tbody>
          <tr>
          {
            this.headers.map((v,i) => {
              return <th key={i+'h'}>{v}</th>
            }) 
          }
          </tr>
          { 
          this.props.data.map((obj,i)=>{
            return <tr key={i+"r"}>
                {
                  this.keys.map((v,i)=>{
                    return <td key={i+"td"}>{obj[v]}</td>
                  })
                }
            </tr>
          })

          }
        </tbody>
       
      </table>
    }
    </div>
  );
};

export default template;


Now lets refactor the code store.js a little bit...
As we can keep multiple reducers..let create a reducers folder and then store our reducer.js file inside that..
lets write one more rootReducer here...
lets combine all the reducers in this file using combineReducers().
Lets export this here and import it inside store.js


src/reducers/reducer.js
src/reducers/rootReducer.js

rootReducer.js
================
import reducer from "./reducer";
//like this we can add multiple reducers here...e.g.
//import reducer1 from "./reducer1";

import {combineReducers} from "redux";

//combineReducers({reducer,reducer1})
const rootReducer = combineReducers({reducer})

export default rootReducer;


lets modify the store.js as well..remove unwanted code....
import rootReducer here and use it as the first argument


store.js
====================================================
import {createStore,applyMiddleware} from "redux";
import logger from "redux-logger";
import rootReducer from "./reducers/rootReducer";

const store = createStore(rootReducer,applyMiddleware(logger));
export default store;


===::===================================================================================================================::===
===============================================:::::::::::IMPORTANT:::::::===================================================

We are able to get state and dispatch() from component connect() - 1st arg state and 2nd arg is dispatch()

We can also get the state from store as we are getting dispatch() from store....
//import the store.js in your file...
	import store from "../store";
	
//Use getState() predefined method available in store object...
	{store.getState().reducer.name}
	
But we need to always take state from our connect() method first argument...that is always updated current state...
If we dont use the connect method..store.getState() always takest the initial load value...later changes wont reflect....

So my component has to connect with connect() in order to get updated state from store....store.getState()
Otherwise only first time load only we will able to get the state from store using store.getState()....



*******************************************************************************************************************************************
07/03/2020
*******************************************************************************************************************************************

Now coming to our requirement lets enhance this application...
Next we are going to cover redux forms..
So far how we created the forms??
normal html structure right..

Now onwards there is some predefined library is there..redux-form
We will use this library..

For example you created this form..ok whats your responsibility as a client side developer?
	1. handle the event
	2. take the data
	3. validate the data
	4. prepare the json that the server side guy is expecting..
	5. send the request to server..

Send the request to the server is like common for all..
But first 4 steps..if we created the form we are responsible person to do that...
That is handle the event, take the data, validate the data, prepare the json object..

Now onwards i dont want to create y own form. I want to create the same form with redux-form library..
This is my requirement now..
So these 4 steps are handled by redux people only..
Lets start..


43:30
I need Menu items now..I have 4 menu items in App - the root component
	redux-sample
	redux-forms
	redux-saga
	redux-thunk
	
For example Whatever we have completed till now will place it under redux-sample

So for this we need routing or not..
Which library is required? react-router-dom.... lets install that first..
	npm i react-router-dom --save

So for our requirement the main component is Menu that we need. 
Lets create that.. and make it visible inside App. 
	cd src
	create-react-component Menu
	
App.js
======
import Menu from "./Menu/index";
.....
function App() {
  return (
    <div className="App">
      <Menu />
    </div>
  );
}
export default App;


Now as per our requirement in Menu component we have 4 links..For that we need 4 components for the routing...lets create that.
		create-react-component ReduxSample
		create-react-component ReduxForms
		create-react-component ReduxSaga
		create-react-component ReduxThunk

Now as all my components are created...
Lets move whatever components we used earlier inside my App e.g. A,B,C,Table,Users etc ,
	which was default visible to the page to my ReduxSample component. 
	So that these should be visible under ReduxSample Menu item..not under the others..
	
Now my ReduxSample.jsx looks like :- 
ReduxSample.jsx
================
import "./ReduxSample.css";
import React from "react";
import A from "../A/index";
import B from "../B/index";
import C from "../C/index";
import Users from "../Users/index";
import Table from "../Table/index";
function template() {
  return (
    <div className="redux-sample">
      <h1>ReduxSample</h1>
      <Users />
      <A />
      <B />
      <C />
      <Table />
    </div>
  );
};

export default template;


And my App.js looks like :- 
App.js
======
import React from 'react';
import './App.css';

import Menu from "./Menu/index";

function App() {
  return (
    <div className="App">
      <Menu />
    </div>
  );
}

export default App;


Now lets work on the routing part inside Menu component..
Lets use HashRouter here to implement routing..lets import that first...
	import {HashRouter,route} from "react-router-dom";

Now whatever components we want on route lets import those also..
	import ReduxSample from "../ReduxSample/index";
	import ReduxForms from "../ReduxForms/index";
	import ReduxSaga from "../ReduxSaga/index";
	import ReduxThunk from "../ReduxThunk/index";


Next lets create the menu items using HashRouter..Lets keep everything within a wrapper div inside HashRouter...

Menu.jsx
=========
import "./Menu.css";
import React from "react";
import {HashRouter,Route} from "react-router-dom";
import ReduxSample from "../ReduxSample/index";
import ReduxForms from "../ReduxForms/index";
import ReduxSaga from "../ReduxSaga/index";
import ReduxThunk from "../ReduxThunk/index";

function template() {
  return (
    <div className="menu">
        <HashRouter>
            <div>
                <div>
                  <a href="#/redux-sample">Redux Sample</a>
                  <a href="#/redux-forms">Redux Forms</a>
                  <a href="#/redux-saga">Redux Saga</a>
                  <a href="#/redux-thunk">Redux thunk</a>

                  <Route path="/redux-sample" component ={ReduxSample} />
                  <Route path="/redux-forms" component ={ReduxForms} />
                  <Route path="/redux-saga" component ={ReduxSaga} />
                  <Route path="/redux-thunk" component ={ReduxThunk} />

                </div>
            </div>  
        </HashRouter>      
    </div>
  );
};

export default template;

Now save everything ..start the server and refresh the page..
We have 4 menu items...
	redux-sample
		//when we click on this previous redux components are available...A,B,C,Table,Users
	redux-forms
		//Now here we will create a registration form using redux form..
		//my data i will save it in oracle db..mysql, mongodb we already covered..
		//my requirement is like this..
			user id is there, password is there.., email is there..and one register button
			on click of register button we have to create one object..
			{uid : "u1", pwd : "p1", email : "a@gmail.com" }
			Now these keys are uid,pwd,email are - these formats or exact keys given by sevrer side people..
			As a client side developer we have values..In the past days we create the jsons by matching the keys to server side code and values we have..
			And we send a request to the server..
			In the past we handled the event , get the data , prepared the json and validated it..
			
		//Now I dont want to create like the manual one..I want to create the form by using redux-form
		//my event format should be exact format, you have to write the validations here..
		//my pwd should be exact 5 char, my userid should be less than 5 characters
		//lets install the redux-form library..
			npm i redux-form --save
			
			
		//So we are not going to use like <input />
		//So what we have to do?
		//can we user their library first?
		//lets import the Field component available in redux-form
		//how many fields we have to create?
		//3 fields - 1st one like normal text field, second is like password, third is email
		//So we have to tell those guys is like what type of textbox we want..
		//So for that Field is the component available..
		//If it is a component how we can give the data? By attribute or not?
		//Now tell me who has to take the data from the textbox?
		//you are the responsible person or redux-form is the responsible person?
		//So that redux-form created the textbox, he can take data from the textbox
		//but our requirement is what ? you have to take the data and you have to prepare the json object or not?
		//Now the value is with them only whatever we are entering..but keys we have to mention or not?
		//key is coming from server side guy we have to tell it..
		//name is the attribute so for a field if we mention name="u", he will take the data from textbox and assign it to u while preparing json
		//So we are going to perform one operation on this particular field.. one component is required or not?
		//for that they have given one attribute "component" 
		//our textbox contains how many properties?//multiple..
		//Here we are going to override 2 properties..
		//All the properties will go into the Field component , it will be merged and give it back to component we specified..
		//We can also use our custom components we will see this in future
		
		
		//Field attribues :-
				type :-  we should give text or email or password , we have to mention which type of field we want..
		        name :- attribute for keys ...helpful to prepare json...
			    component :- component = "input" 
			    
			    e.g.
			    ReduxForm.jsx
			    =============
			    import "./ReduxForms.css";
				import React from "react";
				import {Field} from "redux-form";

				function template() {
				  return (
    				<div className="redux-forms">
      					<h1>ReduxForms</h1>
      					<p>
        					<Field type="text" name="u" component="input"/>
      					</p>
      					<p>
        					<Field type="password" name="p" component="input"/>
        				</p>
      					<p>
        					<Field type="email" name="e" component="input"/>
      					</p>
    				</div>
  					);
				};
				export default template;

		//Now save everything and start the server...refresh the page on browser..
		//We will get some error like..
			Error: Field must be inside a component decorated with reduxForm()

		//ok we are using like a redux form...Field or something..that is not understandable by my redux form component..
		//We have to make this Field understandable by my ReduxForm component..
		//This is same like connect() as we enhance a component to get some additional features..
		//So to make this component understandable by redux-form , is nothing but one decorator is there...ReduxForm() is the function...
		//lets import that one..
			import {ReduxForm} from "redux-form";
			
		//Now in our application n number of forms we can create..each form will have a name or not..unique identity..that is mandatory one..
		//reduxForm() method is like gives us a function as a return value..same like connect()
		//reduxForm() method when called returns a function which expects a component exactly like connect() - the component which wants to be understandable by redux-form..
		
		ReduxForm.js
		============
		import React    from "react";
		import template from "./ReduxForms.jsx";
		import {reduxForm} from "redux-form";

		class ReduxForms extends React.Component {
  			render() {
    			return template.call(this);
  			}
		}
		ReduxForms = reduxForm({
  			form : 'registerForm'
		})(ReduxForms)//this is component name
		export default ReduxForms;

		//Now save everything and start the server...refresh the page on browser..
		//We will get the menu items..go to Redux Forms link..
		//We will see the input text boxes..but it is not allowing us to edit..
		//how we can??
		
		//To whom I have to give this data back?
		//At the time of clicking on this particular register button whatever he prepares that data has to come here or not?

		//So it has to give the prepared json to my component or not?
		//So somewhere he has to maintain the data or not? 
		//If he didn't store the data the at te time of clicking button how i can give this data to the component?
		//Can you tell me where we can store the data?That is available to my component and everyone?
		//Within the store or not?
		//One common place is required or not?
		
		//Now tell me who is going to put the data within the store?
		//always reducer only
		//Now tell me in your application how many reducers are there?
		//one reducer is there ..that is for internal flow..so far we are using one reducer for this app..
		//Now if we are using our reducer what things are required? to update the data?
		//Now I have already given the keys to Fields..
		//That person has to set the data within the ReduxForm or not? Within a store or not?
		//That means who has to write the reducer? This ReduxForm people only write their own reducer or not?
		//And that reducer has to update our store or not?
		//Then how that ReduxForm reducer gets the capability to update this store?
		//Somewhere this ReduxForm reducer should have to be registered with store or not?
		//If it is not registered..we created a reducer..we said like its a reducer. 
			That reducer is going to update your store is nothing but this particular reducer should be registered with what? store or not?
		//Already we created one reducer..our data is going to be updated
		//Now this ReduxForm people created one reducer.. they will put their data.. We are not maintaining their data..
		//who is going to take the data and update the data? ReduxForm people or not?
		//That is not in my hand
		//but they created one reducer or not?
		//If we want to update the data within the store then their reducer also should be registered within the store or not?
		//So what is their reducer name if we know then that time can we store it? register it?
		
		So where we need to make change?
		We have to register within combinedReducers() or not?
		As store is always expecting a single rootreducer..
		SO lets modify rootReducer.js
		
		We are using redux-form library..		
		And they said while registering the reducer the key should be always "form" only
		Then how we can?
		Can we change the reducer alias to form while importing the reducer from "redux-form"?
				import {reducer as form} from "redux-form";

		Next can we pass it to combineReducers()?
				const rootReducer = combineReducers({reducer, form})

	
		
		rootReducer.js
		================
		import reducer from "./reducer";
		import {reducer as form} from "redux-form";
		
		import {combineReducers} from "redux";
		
		const rootReducer = combineReducers({reducer, form})
		export default rootReducer;

			
		
	redux-saga
	redux-thunk
	
	
Now when i click on the button one method has to trigger and i need the data or not?
in which format?
json or not?
I need that one...
Whre is my data tell me..
reduxform is going to store the data.. he knows where it is..

But i dont the keys 
Then who knows that one?
he prepared the data means what?
One function is required or not?
SO that he created one function like handleSubmit() is the method
This method at the time of clicking on the button this store has to give the data to this guy..
So now my data is available here..
Where you want?
In my register component i need the data or not?
When?
At the time of clicking on the button lets write one method.. fnregister()
Now at the time of clicking on button this method is going to trigger.
fnregister() is like a normal method or not?


Now at the time of button click which method we have to call?
handleSubmit() or not?
becase this person has the data...
Now we have to call this method and give the data to ___

So now we have to call their handleSubmit() method instead of our methods..
So that is coming from ? outside..
SO how we can?
using this.props or not?
So how we can write ? this.props.handleSubmit
      <form onSubmit={this.props.handleSubmit}>


But my data is available within the handleSubmit() method , but i want in our components or not?
Once we get the data we have to send ajax request everything or not?

Now tell me this handleSubmit() need some data from outside is nothing but coming like what?
//one argument or not?

	handleSubmit(cb){
		obj= {} --> reads our data 
		cb(obj); //returns obj using callback..
	}
	
So somebody has to call this method and pass your data or not?
who has the data?

Lets pass that method as a callback..
SO my handleSubmit() method takes like one argument.. that is like a function..
lets pass one function.. this.fnReg

so internally this is my callback...


ReduxForm.jsx
==============
import "./ReduxForms.css";
import React from "react";
import { Field } from 'redux-form';
import TextBoxCom from '../ReduxFormControls/textBoxComp'
function template() {
  return (
    <div className="redux-forms container-fluid">
      <h1>Registration</h1>
      <form onSubmit={this.props.handleSubmit(this.fnReg)}>
        <Field
          type='text'
          lbl="UID"
          name="u"
          component={TextBoxCom}
        />
        <Field
          lbl="Password"
          type='password'
          name="p"
          component={TextBoxCom}
        />
        <Field
          lbl="Email"
          type="text"
          name="e"
          component={TextBoxCom}
        />
        <div className="row">
          <div className="offset-sm-5 col-sm-7 text-left">
            <input disabled={this.props.invalid} className="btn btn-primary" type='submit' value="Register" />
          </div>
        </div>
      </form>
    </div>
  );
};

export default template;



ReduxForm.js
=============
import React    from "react";
import template from "./ReduxForms.jsx";
import {reduxForm} from 'redux-form';
class ReduxForms extends React.Component {
  render() {
    return template.call(this);
  }
  fnReg(data){
    debugger;
  }
}

ReduxForms=reduxForm({
  form:'registerForm'
})(ReduxForms)


export default ReduxForms;


lets see tomorrow how to customize this redux forms , look and feel and also validation..

*******************************************************************************************************************************************
08/02/2020
*******************************************************************************************************************************************
24:20
Yesterday we completed the redux form...if we click on the register button..the data we are printing..
Now I want to give some luk and feel..I want use the bootstrap one...i want to add some validation...
The input fields we are using Redux Form Field...
We are using their components...i.e. Redux Form Field looks like normal textbox only..
They said like if you are not satisfied with this you can write your own component 
And you can customize that one..how you want...bootstrap you want..or whatever..

So that what you have to customize means I created one component and I handled that one i.e. component="input" in <Field>
instead of that you can use yours also..and there you can customize...

And now if we want to write our textbox what we have to write?  input type = "text" only or not...
Other than that my browser wont understand anything or not..
So my goal is to get a textbox only of type text and password...

Lets create a folder ReduxFormControls in src..
And create one file inside it textBoxComp.js..
Ok tell me which one is the recommended one? class component or functional component?
Function component right? Why? 
Because we need this only for designing purpose right...there is no state nothing is required..
so we can go for functional component...


textBoxComp.js
==============
import React from "react";

const textBoxComp = () => {
	return <div> SS </div>
}

export default textBoxComp;

Lets return one div and see what is the problem....
This particular component we are going to use inside ReduxForm..
lets import that...in ReduxForm..ReduxForm.jsx...
replace component="input" with component={textBoxComp}


ReduxForm.jsx
===============
import "./ReduxForms.css";
import React from "react";
import {Field} from "redux-form";
import textBoxComp from "../ReduxFormControls/textBoxComp";

function template() {
  return (
    <div className="redux-forms">
      <h1>ReduxForms</h1>
      <form onSubmit={this.props.handleSubmit(this.fnReg)}>
      <p>
        <Field 
          type="text"
          name="u"
          component={textBoxComp}/>
      </p>
      <p>
        <Field 
          type="password"
          name="p"
          component={textBoxComp}/>
      </p>
      <p>
        <Field 
          type="text"
          name="e"
          component={textBoxComp}/>
      </p>
      <input type="submit" value="register" />
      </form>
    </div>
  );
};

export default template;

Now save everything...restart server and then open the application in browser..
So now we are getting some div values with labels... which is wrong..

lets go back to textBoxComp.js and change it to input type...
input tye=? ... we cant hard code like text ...because we are making it generic..
earlier these attributes type , name component was going to their component..
Now this is coming to my component..
my component is a functional component.. So we will receive like argument object..
like arguments...object
lets receive arguments like type and n
const textBoxComp = ({type,n}) => { }



textBoxComp.js
==============
import React from "react";

const textBoxComp = ({type,n}) => {
	return <input type={type} name={n} />
}
export default textBoxComp;


Now save everything...restart server and then open the application in browser..
Now we are getting the input textboxes... lets enter some values in all the fields and click on submit..
Inspect element..and put a deugger in fnGetData() to see if we are getting the data we entered or not in json format..
What do we get? We are not able to capture the data...but why? so something is missing....
some properties of input text is missing...
Which properties we missed..how we know that? Each and every textbox having some properties.
Within that properties you are going to override what?
We are only overridning type and name...but the rest all properties are missed or not..

To get all the default properties of textbox..in out textBoxComp one default property is there called "input"
We need to get this as well as part of arguments..
We got the default input property which has all the default properties..but we need to merge it..how we can?
By using spread operator at element level...
like  <input {...input} type={type} name={n} />

Now all properties will be available.. all the default properties..
Now save everything and test once again. 
It should be working as expected,.


textBoxComp.js
==============
import React from "react";

const textBoxComp = ({type,n,input}) => {
	return <input {...input} type={type} name={n} />
}
export default textBoxComp;

Now all good....lets add style
install bootstrap
npm i bootstrap --save


You know right what is grid system in bootstrap?
container we can use it.. it always gives some space in left and right..so it is not recommended
container-fluid it takes the full width.. but it has 


lets create the whole row in TextBoxComp i.e.  label , input textbox and error msg...
Each and every row contains 3 parts - label, textbox and error message
And we can decide how much part we want to give to label and how much for textbox and how much for error msg
And also resolution - ok how many resolution is there?
xs , sm , md, lg , xl

i have 12 columns
for which resolution how many columns u want to give for this textbox u decide..
so lets decide the partition..
Total should be 12 when u add for all the column partitions u have mentioned

So lets add the bootstrap file first in my index.js

index.js
===========
import React from 'react';
import ReactDOM from 'react-dom';
import './index.css';
import 'bootstrap/dist/css/bootstrap.css';
import App from './App';
import store from './store';
import {Provider} from 'react-redux'
import * as serviceWorker from './serviceWorker';

ReactDOM.render(<Provider store={store}><App /></Provider>, document.getElementById('root'));
serviceWorker.unregister();



Lets take a row to create for a single field that is label, textbox and error msg..for validation..
So this will be called 3 times from ReduxForm.js to create 3 rows....

So lets pass lbl, type, name from ReduxForm.js while calling this...
Lets not use container-fluid here at element level. lets use it at form level..
lets use className="form-control" for applying bootstrap css to the textbox...
Lets add some gap from oe row to another row. that is from one element to the next..
Which class is there? "form-group"


TextBoxComp.js
===============
import React from 'react'
const TextBoxComp = ({ lbl,type, name, input }) => {
    return <div className="row form-group">
        <div className="col-sm-5 text-right">
               <b>{lbl}:</b>
        </div>
        <div className="col-sm-3">
             <input className="form-control" {...input} type={type} name={name} />
        </div>
        <div className="col-sm-4 text-left">
        </div>
    </div>
}

export default TextBoxComp;


Lets pass lbl also to TextBoxComp as argument from ReduxForm <Field>
And from ReduxForm - lets remove the hardcoded labels..

Also for the button if you want to remove the spaces for columns then which class is there?
//offset is the class


ReduxForm.jsx
==============
import "./ReduxForms.css";
import React from "react";
import {Field} from "redux-form";
import textBoxComp from "../ReduxFormControls/textBoxComp";

function template() {
  return (
    <div className="redux-forms container-fluid">
      <h1>ReduxForms</h1>
      <form onSubmit={this.props.handleSubmit(this.fnReg)}>
        <Field 
          type="text"
          name="u"
          lbl="UID"
          component={textBoxComp}/>
        <Field 
          type="password"
          name="p"
          lbl="PASSWORD"
          component={textBoxComp}/>
        <Field 
          type="text"
          name="e"
          lbl="EMAIL"
          component={textBoxComp}/>
      <div className="row">
        <div className="offset-sm-5 col-sm-7 text-left">
          <input type="submit" value="register" />
        </div>
      </div>
      </form>
    </div>
  );
};

export default template;

===::===================================================================================================================::===
Validations
===::===================================================================================================================::===

46 =>

First tell me how we can validate normal in javascript?
We have to write if conditions only right..
How we can right?
If i want to write if conditions what inputs are required to you?
//data is required or not?

But who prepared the data?//redux people or not
That means once again we have to communicate with our redux-form people or not?
Where ever you wrote the validation validation file should be communicated with what?
My redux form or not?
Why because i am not taking the data
If i take the data then at that time i can write the if condition everything
This person redux-form has to give the data.. so we have to communicate with it..

redux-form is going to call the method with our data or not?
can you tell me the data is which type?
object type or not?
json data...

Lets work on the validation part...
create a folder validators under src..
and one file regValidations.js

regValidations.js
==================
const regValidations = (data) => {

}
export default regValidations;


here we have to write the if conditions or not..
For that we need the data or not?
How we can the data for this particular function?
through arguments or not?
because it is a normal js function..not a component..

This function we have to give to whom?
To our redux-form people or not?
That person is going to call this method with our data or not?


Where we have to use or map this function?
Inside ReduxForm.js or not?
Because ReduxForm component only we have converted to redux form using HOC..
we have converted to a redux form component

So lets import regValidations.js file inside ReduxForm.js
And there is a property called validate inside reduxForm component..
It is expecting a function..


ReduxForm.js
==================
import React    from "react";
import template from "./ReduxForms.jsx";
import {reduxForm} from 'redux-form';
import regvalidations from '../validations/regValidations';
class ReduxForms extends React.Component {
  render() {
    return template.call(this);
  }
  fnReg(data){
    debugger;
  }
}

ReduxForms=reduxForm({
  form:'registerForm',
  validate:regvalidations
})(ReduxForms)
//now this redux form is going to call this regvalidations() method when any changes happened


export default ReduxForms;

//Now lets write the regvalidations() fuction. lets define it..
//my data is which type?
//object type..
//ok how they prepared the object?
//with which keys they prepared?
//to my redux form whatever we passed like name attribute with that only they prepared the json object or not?
//So name we have passed like "u","p" and "e" from ReduxForm.jsx

	<form onSubmit={this.props.handleSubmit(this.fnReg)}>
        <Field 
          type="text"
          name="u"
          lbl="UID"
          component={textBoxComp}/>
        <Field 
          type="password"
          name="p"
          lbl="PASSWORD"
          component={textBoxComp}/>
        <Field 
          type="text"
          name="e"
          lbl="EMAIL"
          component={textBoxComp}/>
      <div className="row">
        <div className="offset-sm-5 col-sm-7 text-left">
          <input type="submit" value="register" />
        </div>
      </div>
      </form>
      
      
//hence can we retrieve the same keys?
//lets use exactly same keys from data object..
//now tell me the error message is like a common message or it is different from one element to another element?
//one value to another value? different right...

//If different error messages for different fields then how we can maintain that?
//using object right...
//lets create one object 
	let errors = {}; //any name we can put
//within this particular error this first msg is belongs to ? userid...means key is "u" or not?
//so lets put that particular one only on errors object...if any validation error we need to apply for userid
	errors.u = "error msg go here for user id..."
//similarly do it for the rest..
//and at last return the errors object..

//now tell me where you want me to display this error msg?


regValidations.js
====================
const regvalidations = (data) => {
    let errors={};
    if (!data.u) {
      errors.u="please enter uid"
    }
    if (!data.p) {
        errors.p="please enter password"
    }
    if(!data.e){
        errors.e="please enter email"
    }
    return errors;
}

export default regvalidations;


Now where we have to write this code?
TextBox component only or not?
because everything we designed there..the error the third column in every row..

First time on page load i put the cursor on textbox..
I didnt put anything
That means you focussed you touched.
You did not write any thing and you coming outside..
Then at that time you have to show the message or not?
That means on which condition you have to do?
First you have to touch that particular textbox..
and you enter some value is nothing but we dont have to show the message

But you touched but did nt enter anything means error is there..
SO if you touched then only show error messaage..
             {touched && error && <b className="text-danger">{error}</b>}


Also in argument you have to use like - meta:{touched,error}
This is given by those people...


	
TextBoxComp.js
===============
import React from 'react'
const TextBoxComp = ({ lbl,type, name, input, meta:{touched,error} }) => {
    return <div className="row form-group">
        <div className="col-sm-5 text-right">
               <b>{lbl}:</b>
        </div>
        <div className="col-sm-3">
             <input className="form-control" {...input} type={type} name={name} />
        </div>
        <div className="col-sm-4 text-left">
            {touched && error && <b className="text-danger">{error}</b>}
        </div>
    </div>
}

export default TextBoxComp;


Now save everything and check if it works or not...
It is woking as expected...
Can we add some more error scenarios??

i want less than 5 chars for userid..then how i can write?
i want greater than 5 chars for password..then how i can write?
i want some exact format for email id like it should have one @ and also a dot(.) after that..then how i can write?
In the same regvalidations.js file or not?
Any no of errors we can write it..

If data.u is not there then we can write like please enter userid
Else data is there, but my data.u.length < 5 then print another error msg...

If data.p is not there then we can write like please enter password
Else data is there, but my data.p.length > 5 then print another error msg...

If data.e is not there then we can write like please enter emailid
Else data is there, but my data.e.email is not valid then print another error msg...
Check for regex for email....

regvalidations.js
===================
const regvalidations = (data) => {
    let errors={};
    if (!data.u) {
      errors.u="please enter uid"
    }else{
        if(data.u.length > 5){
            errors.u="uid length should less that 5 chars"
        }
    }
    if (!data.p) {
        errors.p="please enter password"
    }else{
        if(data.p.length <5){
            errors.p="password length should grater that 5 chars"
        }
    }
    if(!data.e){
        errors.e="please enter email"
    }else{
        let emailReg=/^\w+([\.-]?\w+)*@\w+([\.-]?\w+)*(\.\w{2,3})+$/;
        if(!emailReg.test(data.e)){
            errors.e="pleae enter valid email id";
        }
    }
    return errors;
}

export default regvalidations;

Now save everything and check if it works or not...
It is woking as expected...

if theere is some error in the form then why we need to enable the button?
can we make it as disabled?
how we can disable?
who knows that one valid or invalid?
my redux form people or not?
they are going to give like one property invalid
ANything coming from outside we can use like propthis.props.invalid
Make changes in ReduxForm.jsx

<input disabled={this.props.invalid} className="btn btn-primary" type='submit' value="Register" />

Now save everything and check if it works or not...
It is woking as expected...


===::===================================================================================================================::===
Next is like redux thunk and saga..
Lets create one application using react redux and my backend is like nodejs and database is oracle db

react+redux => client
nodejs =>server
oracle => db

Now my requirement is like getpass application..
For example One company is there..
Any visitors came then at that time what we are going to do?
We are going to take some information from him.
then we are going to give one sheet or print out..

whom he is going to meet...what is the time and date..all these things..like this one simple information
What details we need?
//name,phone no, address,whom to contact, what is the purpose, one webcam 

webcam application we have to integrate here ad we have to capture his photo...
that photo should have to come here..
Now here i have to submit..
once i click on the submit button i want to design the form like this once again
one is for official use and one is to give it to visitor..

printout will have 2 parts.
one we have to give to visitor and the other we will keep

Ok how many forms are required?
Login page : userid,password,login

By default there is no registration nothing is there...
So within the oracle database I am going to create one users table 
Within the users table i am going to userid and password manually
Ok there is no registration nothing is there
So that herein the users table we are going to put like userid password and company name..
By default my userid is admin, password is 111, and company is like tcs..
somebody is going to create the database..then at that time they will enter some data..
if somebody has entered admin and 111 then at that time it should navigate to the next page...home page..
Otherwise if it is wrong then use msg like please enter ur correct userid and password..
In the home page we will have the below fields..
//name,phone no, address,whom to contact, what is the purpose, one webcam and a submit button

if i click on subit button then one popup should come with print..
If i click on the print it should appear one more table...visitors table..


lets see tomorrow..
*******************************************************************************************************************************************
09/02/2020
*******************************************************************************************************************************************

===:::=========================================================:::===
Assignment
===:::=========================================================:::===

I have another requirement as well..
I want to prepare a question answer sheet.
Simple I have 3 questions.
My questions are which format? 
in key value pairs..
lets create 3 objects 
first question is like - how to handle forms in redux? 
So the first object pointing to first question looks like this..
Similarly we have 2 more 2 questions..

So the data should look like a single array with multiple objects..

[
	{	Q. How to handle forms in redux?
		O1. redux-form
		O2. redux
		O3. react
		O4. form
		
		Ans. O1
	},{
		....
		....
		....
	},
	{
		....
		....
		....
	}
]
	
//Now once my data is available we have to design the question paper sheet online..
//How it will look like means 

	Question Paper           [timer]

	Q. How to handle forms in redux?
		(radiobutton) redux-form
		(radiobutton) redux
		(radiobutton) react
		(radiobutton) form

	Q. How to handle forms in redux?
		(radiobutton) redux-form
		(radiobutton) redux
		(radiobutton) react
		(radiobutton) form

	Q. How to handle forms in redux?
		(radiobutton) redux-form
		(radiobutton) redux
		(radiobutton) react
		(radiobutton) form

		[Submit Button]

The timer will be one minute..If not clicked on submit before the timer is up the question paper is automatically submitted
Then at last we have to give the score.. This is my requirement...

 


===:::=========================================================:::===
Redux Thunk
===:::=========================================================:::===
Ok tell me how many ways we can get the dispatch() method?
So as far we know we can get the dispatch in 2 ways..
	1. store.dispatch()
	2. connect() method second argument...
	
Basically for example my data is available within the database..
How we can fetch the data within the database?
Ok Where exactly you have wrote the code in past?

For example users are there within the database..
So all the users i want..
Exactly where I am going to write the code?

For example this is my component users..I have a button here getUsers
If i click on the getUsers then my dta is available in database..
So if i click on the database action is required or not? It is an asynchronous operation..
Now here my action is going to call or not?
Ok from my action servercall is going to call...remaining flow all are same...

This action requires what?
dispatch() method or not?
Why because this action method only gets the data from the database or not?
This action method should give the data to whom?
To the reducer or not?
reducer always called by dispatch()
So for that only the action method needs dispatch() method.
And 2 ways we can get it.
One is importing store..and use dispatch() from store.dispatch()
Second is passing dispatch to action method as an argument from the component who calls the action method..


ANd the next way like by using redux-thunk also we can make one dispatch() method available 
	for this particular component binding the dispatch() to your action..

SO now i dont want to use like store.dispatch() or i dont want to pass dispatch as argument from connect() method 2nd argument..
But at the same time i want my dispatch() to be available within the action to call to my reducer..(we can perform our async functions in actions)
How we can make this particular function.. we have to call this function..
What is the next thing? ANd we have to make the dispatch available within the action or not?

Ok from where we are going to call this function?
from the component or not?
If i click on the button we will be calling one method within component.
Then we are going to call this action from button click method or not?

Now if we call this action method directly is the dispatch() available within action? 
No right.
You have to do some extra things or not?
See we dont want store.dispatch() or any argument dispatch passed from connect() method 2nd argument from component in my action method..
But still at the time of calling this particular action i need dispatch() here in action method..
And then i want to perform sone operation or not?some async operation..
SO in this how i can make my dispatch() available here?

Can we use the closure one?
Ok how we can use that one?

action is a function..
can we write one more function here..inside of action method..
i dont want to pass dispatch like an argument.. to my outer function one..
i too dont want store.dispatch() also
still i need one dispatch()
and then i want to write some functionalities..

//action method containing dispatch()
	a = () => {
		(d) => {
		
		}
	}

Now from my component If i import the action method and call a() then the outer method is going to trigger or inner method?
outer method or not?
If it triggers the outer one it is returning some other function..Here in inner some outer functionality..
But this is not executed or not? 

Ok here you wrote your asynchronous calls to get your data or not?
Then your target is what?
You have to call the inner function or not? by passing? by passing dispatch as an argument or not?

That means what ? Here in the component only we have to call..
At the time of clicking on the button..
This is only the place to call action method inner function...
but not directly like the way we are using earlier or not..
If we call directly then what happen?
My outer method is going to trigger which returns another function 
If it returs another function how we can call it?
another open close parenthesis or not?
And then you have to pass what? the dispatch or not?
	i.e. a()(dispatch) //from the component button click..
	
But i dont like that one..
So this is only the right place...but this not the right way.
So i want to call the acton method inner closure method by passing dispatch as an argument..

First of all if i want to bind the dispatch method to my action, first of all my dispatch method is required or not?
Then only we can bind it.
In the component how we will get the dispatch method?
by using connect() method second argument or not?
first of all bind the dispatch method to my action method 
And then call that method...
got it or not?
So how you can?

This is my component..
lets import the action here..

Users.js
===========
import a from "./a";
class Users extends React.Component{
	...
	fnSubmit(){
		a(); //if we call like this we know what is the problem..it is calling the outer function..so that my dispatch() method is not available
		a()(dispatch); //this is also not right..
		I want to call directly the inner method of action() by binding dispatch or not?
	}
	...
}
export default Users;


So first of we need the connect() method in component to get the dispatch...2nd argument..
How we can write it?

Users.js
===========
import a from "./a";
class Users extends React.Component{
	...
	fnSubmit(){
	}
	
	mapDispatchToProps(dispatch){
		return { dispatch }
	}
	...
}
export default connect(null,mapDispatchToProps)(Users);

Now I have the dispatch method available in component.
This dispatch() we have to bind to whom?to my action
then we have to call that one or not?

Now tell me this 2 functions mapStateToProps() or mapDispatchToProps() always returns me what?
//returns always an object...
So that can we return one object here?
Within this object we can put like any number of properties..
We can put like a : 10
If we want to print this 10 how we can print it?
this.props.a

Ok whatever we return from this particular one upto whom we are trying to connect.. that we will receive as prop..
What we are going to return?
one action or not? that is binding with dispatch..

Now i have the action is there.. i have the dispatch method is there..
Can we bind this dispatch() method to my action?
For that purpose in my redux there is one method is there call bindActionCreators()
So that can i import that one?
import from redux library..

By using this method we can bind the action method to my dispatch...
lets write here..in component...
Think like my bindActionCreators() method is same as my javascript bind() method...
Can you tell me my bind() method returns me what?
one function or not?
So that can we put like one variable to point to this function
any name we can give..
like my bind() method returns the original function and the "this" context
Same like that bindActionCreators() also returns me one more function i.e. action function binding with dispatch..
So that we have to pass action and dispatch here within bindActionCreators()
And bindActionCreators() is going to bind my action method with dispatch...


Users.js
===========
import userAction from "./auserAction";
class Users extends React.Component{
	...
	fnSubmit(){
		this.props.userAction(); --> we need to call..
	}
	
	const mapDispatchToProps=(dispatch)=>{
  		return {
      		userAction :bindActionCreators(userAction,dispatch)
  	}
}
	...
}
export default connect(null,mapDispatchToProps)(Users);


Now tell me our original requirement..
At the time of button click fnSubmit() will be called .
our ultimate goal is what ?
We have to call this action method or not?
Which action method now we have to call?

The imported file action method or the one returned from mapDispatchToProps() with dispatch binding?
So we have to call action method with dispatch binding
How we can call it?
this.props.userAction()

Now this userAction is going to call the dispatch internally..
This is the overall flow..

This only not providing dispatch..it also provides current state also,..
based on the state also you can perform some operations..
This is your configuration
For that which library is needed?
//redux-thunk is the library
it is a middleware

Where we can put all our middlewares?
within the store or not?
within createStore() method first argument is the combineReducer() ie. rootReducer..
And second argument is for middleware.. We can use applyMiddleware() to pass all our middlewares..
Earlier we had used logger..
now lets use thunk...


store.js
========
import {createStore,applyMiddleware} from 'redux';
import logger from 'redux-logger';
import rootReducer from './reducers/rootReducer';
import thunk from 'redux-thunk';
import rootSaga from './sagas/rootSaga';
import createSagaMiddleware from 'redux-saga';

const sagaMiddleware=createSagaMiddleware();
const store=createStore(rootReducer,applyMiddleware(logger,thunk,sagaMiddleware));
sagaMiddleware.run(rootSaga);

export default store;


redux-thunk
//getting the dispatch with action() - bindActionCreator()
//npm i redux-thunk --save



Now lets implement this thunk now..
We have created 4 menus...
	redux-sample
	redux-forms
	redux-thunk
	redux-saga

We have already covered redux-sample and redux-forms
Now lets complete redux thunk  menu...

We will call the photos from database and load here...How we will do?
At the time of clicking on button or not? from component ReduxThunk...
so lets export the action.. from photosAction.js file so that we can use here..


photosAction.js
=================
import ServerCall from '../services/ServerCall';
const photosAction=()=>{
	//this is the inner function will get called automatically when we binded dispatch using bindActionCreators() in component
	//And called using props whatever returned action from bindActionCreators()
	//this inner function can get dispatch as well as getState() i.e. state
	
    return (dispatch,getState)=>{
        ServerCall.fnGetReq('http://jsonplaceholder.typicode.com/photos') 
        .then((res)=>{
            dispatch({
                type:'PHOTOS',
                payload:res.data
            });
        }) 
        .catch((res)=>{
            dispatch({
                type:'PHOTOS',
                payload:[]
            });
        })
    }
}

export default photosAction;

Lets bind the above action inside component with dispatch using bindActionCreators()
And call the binded action method.... from button click...method i.e. fnGetPhotos()

ReduxThunk.jsx
===============
import "./ReduxThunk.css";
import React from "react";

function template() {
  return (
    <div className="redux-thunk">
      <h1>ReduxThunk</h1>
      <input type='button' value='get photos' onClick={this.fnGetPhotos.bind(this)} />
    </div>
  );
};

export default template;



ReduxThunk.js
=============
import React    from "react";
import template from "./ReduxThunk.jsx";
import photosAction from '../actions/photosAction';
import {connect} from 'react-redux';
import {bindActionCreators} from 'redux'
class ReduxThunk extends React.Component {
  render() {
    return template.call(this);
  }
  fnGetPhotos(){
    debugger;
   this.props.photosAction();
  }
}
const mapDispatchToProps=(dispatch)=>{
  return {
       photosAction:bindActionCreators(photosAction,dispatch)
  }
}
export default connect(null,mapDispatchToProps)(ReduxThunk);



Lets add a case in the reducer..
reducer.js
===========
import {initVal} from '../utils/initVal';

const reducer=(state=initVal,action)=>{
     switch(action.type){
     	....
 		case 'PHOTOS':
            state={
                ...state,
                photos:action.payload
            }
			 break;
		....
		 }
     return state;
}

export default reducer;


This is your configuration
For that which library is needed?
//redux-thunk is the library
it is a middleware

Where we can put all our middlewares?
within the store or not?
within createStore() method first argument is the combineReducer() ie. rootReducer..
And second argument is for middleware.. We can use applyMiddleware() to pass all our middlewares..
Earlier we had used logger..
now lets use thunk...


store.js
========
import {createStore,applyMiddleware} from 'redux';
import logger from 'redux-logger';
import rootReducer from './reducers/rootReducer';
import thunk from 'redux-thunk'
import rootSaga from './sagas/rootSaga';
import createSagaMiddleware from 'redux-saga';

const sagaMiddleware=createSagaMiddleware();

const store=createStore(rootReducer,applyMiddleware(logger,thunk,sagaMiddleware));
sagaMiddleware.run(rootSaga);

export default store;




===:::=========================================================:::===
token
===:::=========================================================:::===
Why we go for tokens?
Without the tokens what is the problem?
If the token is no there then what is the problem?
simple..

I have a login page is there..
Login page is what? 
You created a service..
ok that service is like.. http://localhost:8080/users/getUsers

Now if you know this particular call this data is available where?
This data is available within the database it is coming via nodejs
Now this server nodejs can communicate with any number of clients or not?
Ok I open one browser..

In this particular browser it is a get request..
Think like that.
From here If i enter this particular one if i click on this particular button one request comes to this server or not?
ok another person also knows about this url.
Then at that time he also opens another browser and hit same url http://localhost:8080/users/getUsers

Then at that time he also gets the data or not?
Now any person trying to access this particular url,can we check if he is the authorized person or not?
Ok how we can check that one?

We have to access these urls after authentication only..
after authentication you will be authenticated person. then only you are allowed to get the data otherwise not..
But if i didnt check anything then what happen?
ANybody who knows the url can access the data or not?

First  we will create a login page..
At the time of clicking on button one request will go to the server or not? yes or no?
Now this guy is going to check if the user is there or not within the database..
If the user is there then he is going to create one token with some of the characters
Now this token is going to send as part of response to the client..
Now tell memy client contains what now?
If my userid and password is wrong then there is no issue. We are going to print msg like the entered username and password is not matching.
If my userid and password is correct then at that time he is going to send the user details plus extra thing is what?
Your tokens or not?

that means my user details comes to where?
My login page or not?
So that my login page contains user details like username, email, role all these things i need for future purpose..
SOmewhere i need to store it or not?

And my token also..

Once my userid and password is ok we will get all these userdetails and token.
Now We have to save this token and userdetails somewhere in session storage or store or some place or not?

Now my data is available where now?
Within my store or not?

My token and userdetails everything we can store it within store..
Now it goes to which place?
If the login is success... then it goes to the home page..
Now my form is like users...getUsers..
If he click on users then what we have to do?
One more request comes to my sevrer.
My server side people what he is going to do is now i already gave one token to this particular guy..
That token he is going to send to me or not?
First he is going to authenticate that token
That means i give the token like abc..
That token comes to client.
My client stored it in store..
Now one more request comes to the store..
Now within this request my token is there or not he is going to check...
Now if client side person is going to pass like abcd..
Now server has sent abc first time..
Now abc and abcd both are different.
Then at that time he is not the authorized person..

Then at that time server is going to send a msg like you are not the authorized person...

Now if another person knows the url also..one request goes to the server
He can hit the url..but what about the token?
He does no have the token so that he is not able to pass the token.
my token is mismatching
Then at that time we are going to send a response like what?
You are not a authorised person...


===:::=========================================================:::===
gatePassApp
===:::=========================================================:::===
lets create the project...gatePassApp



cd server 
npm i cors oracledb --save

https://apex.oracle.com/
workspace - MY-ORACLE-DB
userid - SSURAJITA111@GMAIL.COM
password : soumya@123



users
=======
username
password
myrole


visitor
=========
uname
phone
address
contactPerson
purpose
date
photo - blob








*******************************************************************************************************************************************
10/02/2020
*******************************************************************************************************************************************
Redux Saga :
	- One middleware to handle the asynchronous calls..
	- So far can you tell me what is the flow..
	  for example I have the data in the database..then how we can take the data from the database..and update the state...
	- Now suppose I have button is there..and my data is there within the database. My database is going to communicate with the nodejs
	- If i click on the button then we have to handle the event..
		from my component to action..
		from action to server call..
		from server call to server(nodejs)...
		from server(nodejs) to database..
		
		then my data will be returned back to action..
		from database to server(nodejs)...
		from server(nodejs) to service(servercall)...
		from service(servercall) to action...
		
		Now my action is going to give this data to reducer.
		My reducer is going to update this data in store..
		This is the general flow...
		
	- Now here most of the times at component level no one writes the business logic whatever you want.
	- For that reason only we were writing actions. Any method or whatever we want to use we were calling actions.
	- Now this particular action part we are going to replace with SAGA.
	- Now when I will click on the button...this is going to be the flow...
		from my component to saga..
		from saga to server call..
		from server call to server(nodejs)...
		from server(nodejs) to database..
		
		then my data will be returned back to SAGA..
		from database to server(nodejs)...
		from server(nodejs) to service(servercall)...
		from service(servercall) to SAGA...
		
		Now my SAGA is going to give this data to reducer.
		My reducer is going to update this data in store..
		This is the SAGA flow...
		
- So we are going to replace the action with SAGA..
- Here in SAGA..there are some extra features are there...some predefined methods are there..
- Because of that reason we are going to use SAGA instead of action..
- This SAGA is working like a middleware only..
- If it is a middleware , where we are going to register? 
  All these things operated where?on store only or not..
  Ok how we can register the middlewares with the store? 
  
  i.e. const store = createStore(rootReducer,applyMiddleware(logger,thunk,<--add saga middleware-->));


- Now how my syntax should look like to create the saga? 
  At the time of clicking on the button one method should have to execute..tha method should be now a saga method and no more actions..
  From this saga method we have to call our service..from service we have to call server(nodejs)..from server(nodejs) to database..
  And we will get the data back from database in saga method..process is same as we did with actions..
  
- But the main point is at the time of clicking on button from my component , I	should be calling the SAGA method.
- For example i have a table is there... "albums" table..on this table what is the general operations we can perform? insert,update,delete and fetch
- For example i have another table is there... "comments" table..on this table what is the general operations we can perform? insert,update,delete and fetch
- Suppose I have 2 components Albums and Comments...Each component is having one one button..
  I want to insert some data to the above tables i.e. albums and comments present in database..
  On click of button from Albums component I have to insert data to albums table
  On click of button from Comments component I have to insert data to comments table

- And earlier we created action files for each component..similarly we will be creating saga files here for each component..
  Example :- albumsSaga.js, and commentsSaga.js
  
  albumsSaga.js - this particular file I am going to operate some of the operations on this particular albums table like 
  				- insert,update,delete and select
- So at the time of clicking on the button one method should have been triggered..
  similarly on click of delete button one method should have to trigger..
  
  Suppose in Albums component we have 2 buttons - insertAlbum and getAlbums. so lets write 2 saga methods for same inside albumsSaga.js file.
  And here on click it will come to this albumsSaga.js file..
  Can we write some operations here? So that how we can write?
  If we want to write some operation we have to write one function or not? yes so lets write few..
  
  albumSaga.js
  =================
  function insertAlbums(){}
  function getAlbums(){}

- Same like that we have another component is there. It also has 2 buttons -  deleteComment and getComments. 
  so lets write 2 saga methods for same inside commentsSaga.js file. (replacement to action file)
  
  And here on click it will come to this commentsSaga.js file..
  Can we write some operations here? So that how we can write?
  If we want to write some operation we have to write one function or not? yes so lets write few..
  
  commentsSaga.js
  =================
  function deleteComments(){}
  function getComments(){}


Now our goal is what? These are our components..Albums and Comments..
In the past we were calling directly actions..now i am going to call one saga method..
How it is going to work like saga methods or call from component we will see that later...
Now just remember that one function we are going to trigger on clicking of button..

Like this how many saga files we can write? any number or not..
can we combine all the saga files within a single file? like we combined all the reducers to rootReducer...

SO lets create a file rootSaga.js and place it in same saga folder..
In this rootSaga.js what is required? //All the other saga files are required or not..like albumsSaga.js, and commentsSaga.js

Now coming to individual saga files like albumsSaga.js, and commentsSaga.js...
Individual saga files may contain n number of functions..
for ex..albumsSaga.js now having 2 methods..insertAlbums() and getAlbums()...In future it may increase..
Same for commentsSaga.js now having 2 methods..deleteComments() and getComments()...In future it may increase..

At the time of exporting how many saga functions we have to give to rootSaga.js? all or not..
How we can give? 

At application level I am going to combine all saga files in one saga file..
At each saga file level I am going to combine all saga functions within a single saga function...
Then at that time if you include all saga functions into a single function ...
	And we have to export this function where we have included all saga functions..as this contains all our functionality..
So lets write one more method on each saga file to combine all the methods available on that particular saga page... ex below..
And then lets export this single function from saga file so that we can use it in rootSaga.js to combine all the saga methods...

And then import these 2 within rootSaga.js

albumsSaga.js
=================
  function insertAlbums(){}
  function getAlbums(){}
  function albumsSaga(){
  	//return the above 2
  }
  export default albumsSaga;	


commentsSaga.js
=================
  function deleteComments(){}
  function getComments(){}
  function commentsSaga(){
  	//return the above 2
  }
  export default commentsSaga;


rootSaga.js
============
import commentsSaga from "./commentsSaga";
import albumsSaga from "./albumsSaga";



Now in this rootSaga.js file what we have to do?
commentsSaga.js saga file gives me 2 saga functions..
albumsSaga.js saga file gives me 2 saga functions..

Like that any number of saga files can be written and imported to this file..
And each imported saga file returns me some functions or not..
Now all these saga functions we have to combine here...
Now how we can combine ere?
Lets write a function again like rootSaga()...
In order to get all the functions from a specific saga file, we have to call that single function which returns all the remaining functions in the same file..
At the time of calling albumsSaga(); it gives 2 functions...
At the time of calling commentsSaga(); it gives 2 functions...

multiple functions now we received finally...we can put all in an array...
Now this rootSaga contains all the functions...
Now this rootSaga containing all saga methods we want to register within the store...


rootSaga.js
============
import commentsSaga from "./commentsSaga";
import albumsSaga from "./albumsSaga";

const rootSaga = () =>{
	return [albumsSaga(), commentsSaga()]
}
export default rootSaga;


But all these functions are generic functions...We will see about this in some time..
Now we have to include this rootSaga within the store..lets import in that file...

Now coming to our requirement we have a component Albums..and it has 2 buttons.. insertAlbum and getAlbums
On click on the button it should trigger a function within the component itself...
and from there it should call the corresponding saga method..

So how we can call a saga method from our application? 
If we want to call a particular saga method first of all..that saga method or each and every saga method should have a unique identities..
Why because we are going to getAlbums() in albumsSaga.js and in some other saga files also we can have the same method name...
So to call that one each and every saga method should have a unique identity..With that identity only we are going to call that method..
Now tell me where we are going to give the identity for these all saga methods?

Suppose in a saga file like albumsSaga.js - we create one saga function insertAlbum()..created another saga function getAlbums()..
where we are going to register all these functions? Within this particular albumsSaga() function or not...
So at the time of registering the above 2 functions within albumsSaga() we are going to tell like this is the identity for this particular method..
At the same time we are also going to mention the behaviour also for that particular method...
There are saga predefined methods are there...

for example think this is the getAlbums()..
if i click on getAlbums button that time what happens? one request is going to the server and get the data...
Suppose think like this request is taking 5 mins of time to fetch the data...
for example within this 5 minutes of time 10 times I click on the getAlbums button..then at that time what happens?
10 requests are going or not?
ok..within 10 milliseconds how many times I have clicked on this particular button?10 times..or not..
If you want to complete this particular request how much time it will take? 5 minutes or not..
If you click 10 times then what happens 10 request is going and getting the same response or not..
Is it recommended one?
Then what we have to do is - this particular method  getAlbums() method we have to give some behaviour for this..
Do you want me to call each and every time before completing your request or you want ignore all remaining (if we click button in between...)
So we have to tell the behaviour for this particular method..
for that particular one at the time of registering this saga method inside the single exported function 
	we have to mention the behaviour as well as the identity..
	
For the behaviour - methods are coming from the saga only...
for example if we click on this particular button one request is going to server and taking 5mins...
In between if i click on the same button once again...do you want me to continue this request or you want me to stop that one?
so ignore the previous one and take the latest one...this is recommended one..
for that purpose 2 saga methods are there i.e.
	
		takeEvery() - How many times we are going to click on the button that many times you want me to send the request to server..
		takeLatest() -  How many times we are going to click on the button, take the latest request to server..
		
My behaviour is like takeLatest() one... Lets write the code below..

		

albumsSaga.js
=================
  function insertAlbums(){}
  function getAlbums(){}
  function albumsSaga(){
  		takeLatest(insertAlbums,"IA")
  		takeLatest(getAlbums,"GA")
  }
  export default albumsSaga;	


commentsSaga.js
=================
  function deleteComments(){}
  function getComments(){}
  function commentsSaga(){
  	//return the above 2
  }
  export default commentsSaga;



So as shown above the unique identity for getAlbums() is "GA".
With this unique identity we have to call this method...
Once again if we want to call a saga method we have to call the dispatch() method only...
dispatch() is called to call the reducer..
which argument is the mandatory one? type is the mandatory one..
So in dispatch() which takes an object as an argument and here the type also we will pass like GA.. i.e. the unique identity
At this time what happens?
My reducer will be triggered..at the same time it is going to check which saga method is having this unique identity "GA"
And that particular method is going to be executed...
Now from this method what we want to do? servercall -> server -> db....


@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
What is a generator function? What is the difference between a generator function and a normal function?
The methods we discussed we write it like normal methods..

function* show(){ } //generator function
function show(){ } //normal function

Suppose we have written 10 lines of code in a generator function and the same lines of code in my normal function..
if I call my normal function, then at that time what happens? it is going to execute lines one by one...
But if it is a generator function it does not call directly the function body..
Ok..so this returns me an object of this particular operations what we did..inside generator function..
so one object will be returned when we will call a generator function.. 
and based on that object we are going to perform some operation..
How it is going to do... we will see that one...

function f1(){
	console.log('1');
	console.log(2);
}
f1();
//1
//2

function* f1(){
	console.log('1');
	console.log(2);
}
f1();
//f1 {<suspended>}


lets store that returning value to a variable...
function* f1(){
	console.log('1');
	console.log(2);
}
vr a = f1();

//Now we can call next() on a to get the function body executed...this is like iterators..
a.next();
//1
//2


Now I want to perform some operation like this.
I want to send one request to the server..
My response takes 5 minutes to get that response..
After that only i want to perform some operation.
for ex first line we are sending a request to server..
and second line we want to perform some operation on that response that we receive from server..
that means second line it has to wait 5minutes...
After 5 minutes only the second line should execute..
Like this we want to handle by using generator functions..Ok how we can?

Now in case of a normal function how we could have handled this using promise or not...using then and all
With the generator how we can handle?

//general one...
function f1(){
	ServerCall.fnGetReq("/..")
	.then(()=>{
		console.log(res.slice(0,1));
	}).catch(()=>{
	
	});
}

//generator 
function* f1(){ 
	//now here saga people have written some method to handle the ajax operations...
	//so we have to call that method... that is coming from saga..
	
	//our goal is what? we have to get the data..
	//to get the data we have to call our service method only or not...that is ServerCall method or not.
	//So the saga method here has to know which service method it is going to call...and the url and everything..
	//this call() method knows if request is now completed or not.. it handles the promise internally and returns some response
	//if we have to wait for some operation in a generator function then we have a keyword called "yield"
	//done:false => in case if there is if any yield available..when we call obj.next
	//done:true => if no yield found when we call obj.next
	//obj.next() => value is undefined means no yield available..
	//if there is 2 yield inside a method then we have to call 2 times the function using... next()
	function* f()
		yield console.log(1);
		yield console.log(2);
	}
	
	var a  = f1();
	a.next(); //1
	//note 2 will never get executed if you dont call a.next() again for second yield..function is paused..or you can say it is terminated
	a.next(); //1
	
	35:00
	
	
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@

Now lets do the coding for redux-saga...

1. Install redux-saga in reduxapp
	$ npm i redux-saga --save
	
2. Lets add 2 state variables in initVal.js for albums and comments..
	
	initVal.js
	===========
	const initVal = {
    	name : '',
    	loc : '',
    	users : [],
    	photos :[],
    	albums : [],
    	comments: []
	}
	export default initVal;
	
3. Lets create 3 saga files..src/saga
   albumsSaga.js
   commentsSaga.js
   rootSaga.js - to combine the saga functions from above 2 files..
   
   albumsSaga.js
   ==============
   import {takeLatest} from "redux-saga/effects";
   
   function* getAlbums(){}
   function* insertAlbums(){}
   function* albumsSaga(){
   	 	yield takeLatest(getAlbums, 'GA');
    	yield takeLatest(insertAlbums, 'IA');
   }
   
   export default albumsSaga;
   
   
   commentsSaga.js
   ================
 	import {takeLatest} from "redux-saga/effects";

	function* getComments(){}
	function* deleteComments(){}
	function* commentsSaga(){
    	yield takeLatest(getComments, 'GC');
    	yield takeLatest(deleteComments, 'DC');
	}

	export default commentsSaga;

 
   rootSaga.js
   ================
	import commentsSaga from "./commentsSaga";
	import albumsSaga from "./albumsSaga";
	import {all} from 'redux-saga/effects';

	function *rootSaga(){
    	yield all([
        	commentsSaga(),
        	albumsSaga()
    	])
	}

	export default rootSaga;


4. register rootSaga in store..

	store.js
	========
	import {createStore,applyMiddleware} from "redux";
	import thunk from "redux-thunk";
	import logger from "redux-logger";
	import rootReducer from "./reducers/rootReducer";

	import createSagaMiddleware from "redux-saga";
	import rootSaga from "./saga/rootSaga";

	const sagaMiddleware = createSagaMiddleware()
	const store = createStore(rootReducer,applyMiddleware(logger,thunk,sagaMiddleware));
	sagaMiddleware.run(rootSaga);

	export default store;

5. lets add 2 buttons from ReduxSaga component we already created...
	
	ReduxSaga.jsx
	==============
	import "./ReduxSaga.css";
	import React from "react";

	function template() {
  		return (
    		<div className="redux-saga">
      			<h1>ReduxSaga</h1>
      			<input type ="button" value="get albums" onClick={this.fnGetAlbums.bind(this)} />
      			<input type ="button" value="get comments" onClick={this.fnGetComments.bind(this)} />
    		</div>
  		);
	};

	export default template;

6. lets now add the onclick methods in ReduxSaga.js file - the class component code..
   From these button onClick methods we are going to call redux saga methods with unique identity...
   To call the saga methods , we need dispatch() call.. 
   we can get dispatch using store or connect()....in the action we can also use redux thunk..but we dont have action method. we have saga..
   lets get te store and then use dispatch() from store object.
   
	
	ReduxSaga.js
	==============
	import React from "react";
	import template from "./ReduxSaga.jsx";

	import store from "../store";

	class ReduxSaga extends React.Component {
  		render() {
    		return template.call(this);
  		}
  		fnGetAlbums(){
    		store.dispatch({
      			type : "GA"
    		})
  		}
  		fnGetComments(){
    		store.dispatch({
      			type : "GC"
    		})
    	}
	}
	export default ReduxSaga;
	
 	Now these saga methods will be called from the buttn onclick methods...

7. Now from this saga method we have to inform redux saga about the service(Servercall and about the url , method everything..)
   Two methods are provided by redux-saga...which we will use now..
   	
   		1. call()
   		2. put()
   		
   SO that redux-saga has provided one function called "call()" and we have to use this to make service call from saga method....
   And we will get res and lets store it in a variable for later use..
   e.g..
    const res = yield call(ServerCall.fnGetReq, 'https://jsonplaceholder.typicode.com/albums');


   Now saga also provides another method called "put()" which acts like dispatch().
   We need to send an object the same format we use to send to dispatch()...
   yield put({
        type: 'ALBUMS',
        payload : res.data
    })
    
    So lets modify below 2 fils..
    
    albumsSaga.js
    ==============
    import {takeLatest,call,put} from "redux-saga/effects";
	import ServerCall from "../services/ServerCall";

	function* getAlbums(){
    	const res = yield call(ServerCall.fnGetReq, 'https://jsonplaceholder.typicode.com/albums');
    	yield put({
        	type: 'ALBUMS',
        	payload : res.data
    	})
	}

	function* insertAlbums(){

	}

	function* albumsSaga(){
    	yield takeLatest('GA', getAlbums);
    	yield takeLatest('IA', insertAlbums);
	}

	export default albumsSaga;


    commentsSaga.js
    ==============
    import {takeLatest,call,put} from "redux-saga/effects";
	import ServerCall from "../services/ServerCall";

	function* getComments(){
    	const res = yield call(ServerCall.fnGetReq, 'https://jsonplaceholder.typicode.com/comments');
    	yield put({
        	type: 'COMMENTS',
        	payload : res.data
    	})
	}

	function* deleteComments(){

	}

	function* albumsSaga(){
    	yield takeLatest('GC', getComments);
    	yield takeLatest('DC', deleteComments);
	}

	export default commentsSaga;



8. Now we received the data and we called the put() same as dispatch() to call the reducer.
   Now lets add the matching case for albums and comments..in reducer..type should be "COMMENTS" and "ALBUMS" as we can see above code..


	reducer.js
	===========
   	import initVal from "../utils/initVal";
   
	const reducer = (state = initVal , action) => {
    	console.log(action.payload)
    	
		switch(action.type){
			.....
			.....
			
   			case "ALBUMS" :
				console.log("inside..",state)
				state = {
		    		...state,
		    		albums : action.payload
		    	}
				break;
			case "COMMENTS" :
				console.log("inside..",state)
				state = {
		    		...state,
		    		comments : action.payload
		    	}
           	   break;
   		}
   		return state;
	}
	export default reducer;


9. Now save all files and run the project..
   npm start
   
   go to redux-saga menu and click on each buttons..and see the concole.log...logger for next state reducer value..
   
***************************************************************************************************************************
11/03/2020
***************************************************************************************************************************

step 1: Install the required dependancies first

	$ cd GatePassApp/client/gatepassapp
	$ npm i react-router-dom redux react-redux bootstrap axios redux-saga redux-thunk redux-logger redux-form --save


step 2: create the initVal.js inside src/utils folder.

	initVal.js
	===========
	export const initVal = {
    	isLoggedIn : false,
    	userInfo : []
	}
	
	
	
step 3: create the reducer as it has no dependancy inside src/reducers folder. import initVal.js

	reducer.js
	==========
	import {initVal} from "../utils/initVal";

	const reducer = (state = initVal,action) => {
    	switch(action.type){
        	case "LOGIN":
            	state = {
                	...state,
                	isLoggedIn : true,
                	userInfo : action.payload
            	}
    	}
    	return state;
	}

	export default reducer;


step 4: create the rootReducer to combine all the reducers.. inside src/reducers folder..

	rootReducer.js
	================
	import { combineReducers } from "redux";
	import {reducer as form} from "redux-form";
	import reducer from "./reducer";

	const rootReducer = combineReducers({reducer,form});

	export default rootReducer;


step 5: create the store to register all the reducers..and also for middleware. create store.js inside src.

	store.js
	=========
	import  {createStore,applyMiddleware} from "redux";
	import {logger} from "redux-logger";
	import rootReducer from "./reducers/rootReducer"

	const store = createStore(rootReducer,applyMiddleware(logger));

	export default store;


step 6: Lets send the store to App so that it is available globally to all components..
		Lets import bootstrap as well...

	index.js
	=========
	import store from "./store";
	import {Provider} from "react-redux";
	import "bootstrap/dist/css/bootstrap.css";

	ReactDOM.render(<Provider store={store}> <App /> </Provider>, document.getElementById('root'));


step 7: Lets create the ServerCall file for services ...and use axios to make get and post calls..

	ServerCall.js
	==============
	import axios from axios;
	const baseURL = "http://localhost:2020/";

	class ServerCall{
    	static fnGetReq(url){
        	return axios.get(baseURL+url);
    	}

    	static fnPostReq(url,ddata){
        	return axios.post(baseURL+url,data);
    	}
	}
	export default ServerCall;


step 8: Lets create the components we need...
		Header,Footer,Login,BeforeLogin,AfterLogin,Register,Table,PrintComp

	$ cd src
	$ create-react-component Header
	$ create-react-component Footer
	$ create-react-component Login
	$ create-react-component AfterLogin
	$ create-react-component BeforeLogin
	$ create-react-component Register
	$ create-react-component Table
	$ create-react-component PrintComp

step 9: Lets include Header and Footer Component to App

	App.js
	======
	import React from 'react';
	import Header from "./Header/index";
	import Footer from "./Footer/index";

	function App() {
  		return (
   			 <div className="App">
      			<Header />
      			<Footer />
    		</div>
  		);
	}
	export default App;


step 10: Now we have to show AfterLogin or BeforeLogin based on the state variable flag - isLoggedIn..
		 How we will get this inside App?...we need the state...
		 Lets use connect() to get state from mapStateToProps() and use it like an argument to App()..
		 
	App.js
	=======
	import React from 'react';
	import {connect} from"react-redux";
	import Header from "./Header/index";
	import Footer from "./Footer/index";
	import AfterLogin from "./AfterLogin/index"
	import BeforeLogin from "./BeforeLogin/index"

	function App(props) {
  		return (
    		<div className="App">
      			<Header />
      				{props.isLoggedIn ? <AfterLogin /> :  <BeforeLogin /> }
      			<Footer />
    		</div>
  		);
	}

	const mapStateToProps = (state) => {
    	return {
      		isLoggedIn : state.reducer.isLoggedIn
    	}
	}
	export default connect(mapStateToProps)(App);

		 
		 
Step 11: Lets add some css to header component and Footer component...
	
	Footer.css
	===========
	.footer{
    	font-size: 15px;
    	font-weight:bold;
    	font-style: italic;
    	position:fixed;
    	bottom:0px;
    	width : 100%;
	}

	Footer.jsx
	===========
	import "./Footer.css";
	import React from "react";

	function template() {
  		return (
    		<div className="footer text-center bg-primary">
      			&copy; rights belongs to me.
    		</div>
  		);
	};

	export default template;

	
	Header.css
	===========
	.footer{
    	font-size: 50px;
    	font-weight: bold;
    	font-style: italic;
	}



	Header.jsx
	============
	import "./Header.css";
	import React from "react";

	function template() {
  		return (
    		<div className="header text-center bg-primary">
      			<h1>GatePass Application</h1>
    		</div>
  		);
	};
	export default template;



Step 11: Lets add routing to BeforeLogin...We dont need the menu...just 2 routings..
         BeforeLogin means we need the Login component here... when url is /login or /
         

	BeforeLogin.jsx
	================
	import "./BeforeLogin.css";
	import React from "react";
	import {HashRouter,Route} from "react-router-dom";
	import Login from "../Login/index";

	function template() {
  		return (
    		<div className="before-login">
      			<HashRouter>
        			<div>
          				<Route path="/" exact component={Login} />
          				<Route path="/login" component={Login} />
        			</div>
      			</HashRouter>
    		</div>
  		);
	};

	export default template;



Step 12:   In Login.jsx here we are not going to use default input component within Field...
    	   We will use our own bootstrap styled textBox..Lets create the same first...
    

	Lets design the TextBox component.. 

	TextBox.js
	==========
	import React from "react";

	const TextBox = ({type,name,lbl,input, meta:{touched,error}}) =>{
    	return <div className="row">
                <div className="col-sm-4">
                    <b>{lbl}</b>
                </div>
                <div className="col-sm-3">
                    <input type={type} name={name} {...input} />
                </div>
                <div className="col-sm-5">
                    { touched && error && <b className="text-danger"> {error}</b>}
                </div>
    	</div>
	}

	export default TextBox;



Step 13: Lets design the Login Page.. Here we are going to use redux-form Fields...
	
	Login.jsx
	==========
	import "./Login.css";
	import React from "react";
	import {Field} from "redux-form";
	import TextBox from "../reduxFormControls/TextBox";
	function template() {
  		return (
    	<div className="login">
        	<h1>Login</h1>
        	<form>
          		 <Field type="text" name="uid" lbl="UID" component={TextBox}/>
         		 <Field type="password" name="pwd" lbl="PASSWORD" component={TextBox}/>
          		 <input type="submit" value="login" />
        	</form>
    	</div>
  	);
	};

	export default template;

  
  
Step 14: To allow <Field /> to be understandable by Login.js we need to make this component as HOC using reduxForm() given by "redux-form"
   
   	Login.js
   	=========
   	import React    from "react";
	import template from "./Login.jsx";
	import {reduxForm} from "redux-form";

	class Login extends React.Component {
  		render() {
    		return template.call(this);
  		}
	}

	Login = reduxForm({
  		form : "LoginForm"
	})(Login);

	export default Login;


Step 15:  Add container-fluid class to remove the horizontal scroll..
		  

	Login.jsx
	==========
	import "./Login.css";
	import React from "react";
	import {Field} from "redux-form";
	import TextBox from "../reduxFormControls/TextBox";
	function template() {
  		return (
    	<div className="login container-fluid">
        	<h1>Login</h1>
        	<form>
          		 <Field type="text" name="uid" lbl="UID" component={TextBox}/>
         		 <Field type="password" name="pwd" lbl="PASSWORD" component={TextBox}/>
          		 <input type="submit" value="login" className="btn btn-primary" />
        	</form>
    	</div>
  	);
	};

	export default template;


Step 16:   Add the below bootstrap classes for look and feel
		   
		   Add form-group class to the wrapper root div..
      	   Add form-control class to the input i.e. <input className="form-control" />
    

	Lets design the TextBox component.. 

	TextBox.js
	==========
	import React from "react";

	const TextBox = ({type,name,lbl,input, meta:{touched,error}}) =>{
    	return <div className="row form-group">
                <div className="col-sm-5 text-right">
                    <b>{lbl}</b>
                </div>
                <div className="col-sm-3">
                    <input type={type} className="form-control" name={name} {...input} />
                </div>
                <div className="col-sm-4">
                    { touched && error && <b className="text-danger"> {error}</b>}
                </div>
    	</div>
	}

	export default TextBox;


Step 17:   Lets now focus on the form submit...
		   handleSubmit() will be called...given by redux-form only..
		   To send the data..we can use a callback...
		   
		   
		
	Login.jsx
	==========
	import TextBox from "../reduxFormControls/TextBox";
	function template() {
  		return (
    		<div className="login container-fluid">
        		<h1>Login</h1>
        		<form onSubmit ={this.props.handleSubmit(this.fnLogin)}>
          			<Field type="text" name="uid" lbl="UID" component={TextBox}/>
          			<Field type="password" name="pwd" lbl="PASSWORD" component={TextBox}/>
          			<input disabled={this.props.invalid}  type="submit" value="login" className="btn btn-primary"/>
        		</form>
    		</div>
  		);
	};

	export default template;
	
	
	
	Login.js
	=========	   
	import React    from "react";
	import template from "./Login.jsx";
	import {reduxForm} from "redux-form";
	import loginValidations from "../validations/loginValidations";
	class Login extends React.Component {
  		render() {
    		return template.call(this);
  		}
  		fnLogin(data){
    		console.log(data);
  		}
	}

	Login = reduxForm({
  		form : "LoginForm"
  	})(Login);

	export default Login;



Step18 : Now in order to make the validations work we have to pass validate property to reduxForm() method in login.js
		 Lets create the validation...src/validations/loginValidations.js
		 And then use this in reduxForm() in Login.js
		 
	loginValidations.js
	=====================
	const loginValidations = (data) => {
    let error={};
    if(!data.uid){
        error.uid = "please enter uid";
    }
    if(!data.pwd){
        error.pwd = "please enter password";
    }
    return error;
	}

	export default loginValidations;
		 

	Login.js
	=========	   
	import React    from "react";
	import template from "./Login.jsx";
	import {reduxForm} from "redux-form";
	import loginValidations from "../validations/loginValidations";
	class Login extends React.Component {
  		render() {
    		return template.call(this);
  		}
  		fnLogin(data){
    		console.log(data);
  		}
	}

	Login = reduxForm({
  		form : "LoginForm",
  		validate : loginValidations
  	})(Login);

	export default Login;


Save everything and run the application....
We should see a login page with header and footer...
with validations readyy....



****************************************************************************************************************************************
12/03/20
****************************************************************************************************************************************
As a client side developer how much part we can complete after successful login without any server side dependancy...
login event we already handled...on click of login button now we have the data...
We have to send the request to server or not..
once you get the response from server..may be success or failure what we need to do?

//fnLogin() is the method in Login.js and we have the data...to sent to server.. now what we need to do?
 fnLogin(data){
    console.log(data);
  }

From here we have to call one loginAction one method we need to call..
In this method redux thunk we have to bind our dispatch or not..how we can bind? 

Using bindActionCreators() or not..
At the time of calling this method its going to return one method with dispatch and state...
From here what we have to do? From here we have to call the ServerCall..
Now this ServerCall is going to communicate with nodejs. 
If the username and password is correct or not it is going to check and give the response back to the loginaction..
So my response now is available in action...So if it is a success what we have to do ? And if is a failure what we have to do?

For ex..If it is a failure what we have to? 
In the login page we have to show a message like "please check entered userid and password"

If it is success then what we have to do? We have to change the flag name i.e. isLoggedIn as true..
Now if it is a success we have to call what?our reducer or not..
And in the reducer we are going to put like isLoggedIn to true..

Now fnLogin() is in a Login component..
If it is a success or failure we get to know inside loginAction..
But we want to display the message in Login Component incase login fails..
Then How we can?

In a component level if anything is there then we can put like this.state.msg or something...
But some other person guy is going to decide it...if user id and password is valid or not..
Then how we can maintain the state again? Can we take a global state again?



Lets create an action - loginAction.js within src/actions folder..
It is a normal function. lets write it.. We are going to call this from Login component. So lets export this one..

loginAction.js
===============
const loginAction = () => {

} 

export default loginAction;


Now at the time of clicking on login button I want to call this action method and from here we will make the server call or whatever it is..
Once we get the response by using dispatch we will get this response to the reducer..

Without thunk how many ways I can get the dispatch() method here in loginAction.js?
By using store.dispatch() and by using connect() method second argument...
DO you want me to put connect() 2 argument here? Then how I can?
using store.dispatch()....

Another way to pass as an argument..why because this loginAction we are going to call from the component Login only..
So my connect() method where we can write? within my component only or not?

That means we are calling the loginAction from the component..my connect() method also we can bind with the component.
From there we can take dispatch() and can we pass the dispatch() as an argument or not...That is also another way or not..

But i dont want those 2...

Can we bind our dispatch() method to this particular action loginAction by using thunk?yes or no?
If we bind like this then that dispatch() is available like what? It is going to return us a function...with dispatch and state...


Next??
This action we going to use inside Login component. Lets import it there...
Now this loginAction() is of type function or not..
If we call like loginAction(data) from fnLogin() from Login component then what happens?
It calls the loginAction() outer function and returns me one more function..
If it returns me one more function how we can call it?

At the time of calling this loginAction() my second return method should call by passing my dispatch and getState.
So that directly calling loginAction() like this is not recommended..like below not recommended.

	
Login.js
==========
import loginAction from "../actions/loginAction";

class Login extends React.Component {
  render() {
    return template.call(this);
  }
  fnLogin(data){
    console.log(data);
    loginAction(data)(dispatch);
  }
}



So first thing is to bind our dispatch to this particular action and we are going to tae care with middleware thunk...
Now if we need to bind the dispatch first of all dispatch() is required or not?
So that how we get that dispatch()? by using the connect() method ...
 
Login.js
==========
import React    from "react";
import template from "./Login.jsx";
import {reduxForm} from "redux-form";
import {connect} from "react-redux";

import loginValidations from "../validations/loginValidations";

import loginAction from "../actions/loginAction";

class Login extends React.Component {
  render() {
    return template.call(this);
  }
  fnLogin(data){
    console.log(data);
    loginAction(data);
  }
}

Login = reduxForm({
  form : "LoginForm",
  validate : loginValidations
})(Login);

const mapStateToProps = (state) => {
  return {

  }
}

const mapDispatchToProps = (dispatch) =>{
  return {
    
  }
}
export default connect(mapStateToProps,mapDispatchToProps)(Login);


Now tell me in the loginAction which one we need? mapStateToProp() or mapDispatchToProp() or both?
Both right...Why both?
Why because if my user id and password is wrong then msg also should take from the store only or not...
Lets handle both two...
Both mapStateToProp() or mapDispatchToProp() returns object..
Within this object whatever we return that one is available to your connect() component like a prop..

Now tell me within mapStateToProp() what you are expecting to write? "msg" or not..in case of login fail we need that..
So lets add this as a global state variable within initVal.js

initVal.js
------------
export const initVal = {
    isLoggedIn : false,
    userInfo : [],
    msg : ''
}

We can use this msg for any msg.. can we update the msg? Where we are going to update the msg? reducer right..
Lets go the reducer.js

Now tell me how i cn update this one?If it is success case "LOGIN" is going to be called..
If it is a failure can we write another switch case to handle "LOGIN_FAIL"

How we can write that? How it looks like?

reducer.js
===========
import {initVal} from "../utils/initVal";

const reducer = (state = initVal,action) => {
    switch(action.type){
        case "LOGIN_FAIL":
            state = {
                ...state,
                isLoggedIn : false,
                msg : action.payload
            }
        case "LOGIN":
            state = {
                ...state,
                isLoggedIn : true,
                userInfo : action.payload
            }
    }
    return state;
}

export default reducer;

msg we are going to pass while calling the dispatch() method..


Now coming back to Login.js we need to return a "msg" in the object that is returned from mapStateToProps(state){} 
From where I will get the msg? from the reducer or not.. so lets get it from state.reducer.msg.. like below..
And now this msg is available like a prop to my component.

const mapStateToProps = (state) => {
  return {
	msg : state.reducer.msg
  }
}


Now lets show the message in Login.jsx...

Login.jsx
===========
import "./Login.css";
import React from "react";
import {Field} from "redux-form";
import TextBox from "../reduxFormControls/TextBox";
function template() {
  return (
    <div className="login container-fluid">
        <h1>Login</h1>
        <form onSubmit ={this.props.handleSubmit(this.fnLogin)}>
          <Field type="text" name="uid" lbl="UID" component={TextBox}/>
          <Field type="password" name="pwd" lbl="PASSWORD" component={TextBox}/>
          <input disabled={this.props.invalid}  type="submit" value="login" className="btn btn-primary"/>
        </form>
        <h3 className="text-center">{this.props.msg}</h3>
    </div>
  );
};

export default template;

When user enters userid and password and clicks on login button and In case of a failure my msg is going to be shown immediately...

Now I have dispatch is there I have my action is there...can we bind the dispatch() to my action?
For that which method is there? bindActionCreator() is the method...which is coming from redux library handled by thunk..
so lets use that one..

bindActionCreator() returns me what? one more function or not...That function contains what?
Our original function plus adding the binding with dispatch()...

So we will call this returning function which has the binding with dispatch()...
Lets add that as well to my Login.js



import React    from "react";
import template from "./Login.jsx";
import {reduxForm} from "redux-form";
import {connect} from "react-redux";
import {bindActionCreators} from "redux";
import loginValidations from "../validations/loginValidations";

import loginAction from "../actions/loginAction";

class Login extends React.Component {
  render() {
    return template.call(this);
  }
  fnLogin(data){
    console.log(data);
    loginAction(data);
  }
}

Login = reduxForm({
  form : "LoginForm",
  validate : loginValidations
})(Login);

const mapStateToProps = (state) => {
  return {
    msg : state.reducer.msg
  }
}

const mapDispatchToProps = (dispatch) =>{
  return {
    loginAction : bindActionCreators(loginAction,dispatch)
  }
}
export default connect(mapStateToProps,mapDispatchToProps)(Login);


Within this bindActionCreators() we will mention which action and the dispatch to bind
Now lets call this returning loginAction from mapDispaatchToProps like an object...




Lets integrate the redux thunk in store..
store.js
=========
import  {createStore,applyMiddleware} from "redux";
import {logger} from "redux-logger";
import thunk from "redux-thunk"
import rootReducer from "./reducers/rootReducer"

const store = createStore(rootReducer,applyMiddleware(logger,thunk));

export default store;


fnLogin() bind is missing..lets add that...
  constructor(){
    super();
    this.fnLogin = this.fnLogin.bind(this);
  }



Now lets work for isLoggedIn as true...lets handle the case...
lets change the initVal.js by setting isLoggedIn as true..
Save program and refresh browser we see our AfterLogin.....

What we have to do here?
First we can have a menu with 2 tabs...Home and visitors..
In our home we will put all contents for register with a webcam...
and in visitors tab i want to put the Table component...


Instead of using Table component directly in visitors tab lets create another component which will use Table component to create the table by passing data dynamically.
Table comp is a generic one. SO lets keep it generic..

LEts create one more component - visitors.. inside this we will use Table comp..
$ cd src
cd src
$ create-react-component Visitors
Finished

Lets add the routing....to AfterLogin.jsx

AfterLogin.jsx
===============
import "./AfterLogin.css";
import React from "react";
import {HashRouter, Route} from "react-router-dom";

import Register from "../Register/index";
import Visitors from "../Visitors/index";

function template() {
  return (
    <div className="after-login">
      <HashRouter>
        <div>
          <div className="munu text-right bg-info">
            <a href="#/home">HOME</a>
            <a href="#/visitors">VISITORS</a>
          </div>
          <Route path="/" exact component={Register} />
          <Route path="/home" component={Register} />
          <Route path="/visitors" component={Visitors} />
        </div>
      </HashRouter>
    </div>
  );
};

export default template;


Now lets add the content to Register.jsx..
Here we will have few fields like uname , address, phone, contact person , date etc and webcam and register button..

lets use the redux form to create the form...

$ npm i react-webcam --save


































