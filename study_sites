NodeJS 
********
https://medium.com/@olinations/the-javascript-runtime-environment-d58fa2e60dd0



Reactjs -  25feb
_________________
React.useState() 
React.useEffect() 
React.useContext() 
React.useRef() 
React.useReducer() 
React.Memo() 

*************************************************
What is useContext()? Why we go for useContext()? 
So basically we are going to use useContext() instead of contexr.Consumer() 
context.Provider will remain same.. 
Lets write the code.. 

We will write only functional components. 
App, A, B, C

We have the main bootstrapping component i.e. App
App loads component A. 
A loads B. 
B loads C. 
.. 

useContext.html
-----------------
//all 3 scripts
<div id="root"></div>
<script type = "text/babel">
  const A = () => {
    return <div> <B /> </div>
  }

  const B = () => {
    return <div><C /></div>
  }
  
  const C = () => {
    return <div>I am C</div>
  }

  const App = () => {
    return <div> <A /></div>
  }
  
</script>



Now my App component has the data.. 

Let's write some data in App component.. 
If you want to change the data that time we have to use the state variable.
If it is a normal variable then at that time we can put like a var or const.. 
For now let's add a normal variable using const..
What is the next one.. We have to pass this data or not to C. 

How we can create the context?
We have to create the context at global level or not.. 
So here inside the script directly we will write the below code.. 
const ctx = React.createContext()

Here to the createContext() method we can pass default value if we wish.. 
When this value will be visible?? 
When we are not providing any value to the React.provider "value" Attribute or not.. 
If "value" Attribute is provided from React.Provider along with default value from ctx.createContext() ,
   then it will consider the data provided in the "value" attribute over that default value provided in 
   ctx.createContext() 


So let's now modify the App component. 
App component has the data..
We have to pass the data to Component C. 
We will write ctx.Provider in App component 
  and will pass our variable name to the above Provider
  as value attribute. . 


Now in my component C i need the data name.. 
How we can get it? How many ways are there?? 
One way is ctx.Consumer..
And the other way is React.useContext() 

Now leets use the React.useContext() as we are using functional components
  And working on the hook methods.. 
So now let's modify the component C.. 
Create a variable to store the data from App component using React.useContext(ctx). 
To the useContext() method pass the global context variable name. 
In this case it is ctx.. 
const data = React.useContext(ctx)

Now we have the data in component C from component App.. 
We can use data using expression.. Like {data}

useContext.html
-----------------
//all 3 scripts
<div id="root"></div>
<script type = "text/babel">
  const name = "Sachin";
  //for default value.. To the context variable.. 
  //const ctx = React.createContext("soumya..");
  const ctx = React.createContext();

  const A = () => {
    return <div> <B /> </div>
  }

  const B = () => {
    return <div><C /></div>
  }
  
  const C = () => {
    const data = React.useContext(ctx) 
    return <div>I am C : {data}</div>
  }

  const App = () => {
    return <ctx.Provider value={name}> <A /></ctx.Provider>
  }
  
ReactDOM.render(<App />, document.getElementById("root")) 
</script>


********************************************************************************

26/02/20



Ok.. Can you tell me what is the syntax of useReducer()? 
How it is working..?? 
Ok .. UseReducer() i.e. const [state,dispatch] = React.useReducer(reducer,initiaState);
      It is going to return array destructions.. 
      Takes how many arguments? 2 arguments.. 
      First argument is the reducer function. 
      Second argument is the initial state.. 
      Initial state is which type?? Any type... 
      
      For example if we want to put two state variables cnt and name then at that time i need to store it as an object.. 
      const initialState = { cnt :0, name : '' }
      
      So if we want to create multiple state variables with some initial value. How we can create that..
      Ok.. in general how we can write it?
      this.state = {
        cnt :0, 
        name : ''
      }
      
      The same thing if we want to use by using React.useState() how we can write it?
      const [cnt,updateCnt] = React.useState(0)
      const [name,updateCnt] = React.useState('')
      
      Now by using React.useReducer() I want to maintain the state..How we can do that?
      Just create a simple variable..thats it.
      Pass that variable as an argument to this React.useReducer() method..thats it..
      const initValue = {
        cnt :0, 
        name : ''
      }
      Like this any number of values we can put it..any type we can put it...
      Lets pass initValue to useReducer() method..this initial state is always passed as the second argument.
      The first argument to useReducer() method is a reducer() function..This takes again 2 arguments..currentstate and action
      How we can get the cuurrentstate?We are passing rigt..here first time it is initialValue..
      
      const reducer = (state,action) => { //code..}
      const [state,dispatch] = React.useReducer(reducer,initValue);
      
      In the reducer() function what we want? Based on our requirement we can do something..
      At last what we have to return from reducer()? 
         return the updated state..that we get in the array destruction state variable..
      reducer() also returns a dispatch() method. dispatch()method is to call the reducer() 
      Now this dispatch() method takes how many arguments?It takes only one argument always...may be any type..
      For example multiple datas are there..That time we have to use like an object..
      If we want normal string like increment or decrement then we can pass like a string...
      Whatever we are passing, dispatch() method is used to call your reducer() by passing some argument is snothing but 
        that is coming like reducer() method second argument.
        
      The state is coming to reducer() as first argument always..
      Once we get this arguments operations is our wish..We have to return the state finally..
    
    
    
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
========================================================================
First Requirement
========================================================================
Now my requirement is like this..
I have 2 components...Click and Hover..
  Click component has a button  - button text by default is - He clicked me 0 times..
  Hover component has a h1 tag  - h1 text by default is - He hover me 0 times..

Already we did this one using higher order component..
The same requirement I want to use like useReducer() method..

Here by using higher order component what we achieved? 
Here see..if we click on this button of Click component we are going to increment this count..
If we hover on h1 of Hover component we are going to increment this count..
My functionality is same or not? 
If the functionality we want to share across the components, then at that time in our class components what we have?
Higher order components..Same requirement I want to achieve by using useReducer()...

How we are going to do this??
Ok ca you tell me what is the common functionality? incrementing the count or not..
Where we have to write that functionality? Within my reducer or not?
How my reducer looks like..Can we write the reducer? pass 2 arguments state and action as we already know.

  const reducer = (state,action) => {
  
  }

What is my initial state here? What we are going to keep? 
I want to keep cnt which will be incremented on click or hover.. 
another one I want to keep is users which is coming from database.., 
and another one I want to keep is photos which is coming from database..
These all the 3 (cnt,users,photos) I want to maintain within the state variable..
So that what is my intialVal?? i.e.

const initialVal = {
  cnt : 0,
  users : [],
  photos : []
}

Now tell me.. this reducer is the responsible person for updating all our state variables or not...i.e. cnt,users,photos..
This cnt state variable we are using in Hover and Click component.
There is one more component is there - Users component - we have using users state variable 
One more Photos component is there - We are going to maintain photos state variable

So can you tell me how many operations we are going to perform? 
  1) increment count on hover and click - general function
  2) load users 
  3) load photos
  
How we can differentiate this operations? By using action or not
  

How I can differentiate those functionalities here?? 
By using action or not... Based one?? 
We are going to put like type or not.. 
So how it looks like?? Switch case.. 
So we will write a switch case and action.type we need to pass.. 
We will check for case 'INCRE' : then at that time i need to perform some operation.. 
What operations we will perform?? We will increment the cnt.. 
If my case is like users i.e. case 'USERS' :
Then at that time i ma going to update that users or not.. 
If my case is like photos i.e. case 'PHOTOS' :
Then at that time i ma going to update that photos or not.. 

Now this Hover and Click component is going to call which method?? 
reduce() method by passing ? ? 
Ok how we can call this reduce() method?? Using dispatch() or not.. 
Ok how many arguments we have to pass?? 
One argument.. What is that argument?? 
INCRE..what type of argument it is??One object or not.. 
Why because see.. 
Whatever we are passing that is going to 
 reducer() method and in switch case it takes 
 that data by using dot(.) notation or not.. 
 Then it is nothing but what.. 
 My action is object type or not.. 

So here from dispatch() I am going to pass like an object.. 
And here my type is equal to what?? INCRE.. 

i.e. dispatch({type : 'INCRE'}) 
So this is how the dispatch() method will be called 
from Hover and Click component events.. 
i.e. click and onchange events respectively.. 
Now whoever component calls we have to increment the cnt or not.. 
But cnt should be incremented separately for both components.. 
One should not impact the other.. 


Ok yesterday we did all these operations in a single component.. 
Now we are using different different components
One is Click and another one is Hover... 
Now coming to the reducer() function when the 
 case 'INCRE' is matched we have to update the 
 state variable cnt or not.. 

How we can write it?? 
We have to bring our previous property.. 
Along with we will update the state variable cnt
In the state we have the existing cnt variable.. 
Let's get that.. And then increment with 1..

Same like that we have to add other use cases.. 
And finally we have to return the state variable or not.. 


const reducer = (state, action) => {
       switch (action.type) {
           case 'INCRE' :
              state={
                 ...state, 
                 cnt : state.cnt + 1
              }
           //add remaining cases
       }
    return state;
}

In yesterday's program if you remember I had 
 3 buttons in the same component.. 
 And all are operating on the same cnt.. 
 
But now in this case we have 2 different components. 
We are maintaining cnt state variable seprately. 
If we click on button from Click component 
 it should not have nay impact on 
 Hover component cnt.. It will only update the Click component cnt.. 

Which means my state is independent to components always.. 

If I have class A and class B bad both have same state variable names, 
 Then both are independent or not.. To their classes.. 
So that we are using useReducer() for particular component state or not.. 

So in our case 2 state variables are created and which are independent. 
i.e. one for Click and one for Hover


@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
========================================================================
Second Requirement
========================================================================

Now this is my another requirement. 
I have my App component. 
Within App I have 3 components are there.. 
A, B, and C.. all are siblings
Now within my A component i have 
   a label Name
   an inputt text
   a button

Now within my B component i have 
   a label Location
   an inputt text
   a button


Now whatever I enter in the component A textbox and click on submit it should have to print within the C component.
Same like whatever I put in the component B textbox  and click on submit it should have to print within the C component. 

Now see.. My App component is the root component. 
Within the App component I have Components A, B, C. 
A, B, C are what? They are siblings or not..There is no relationship nothing is there..
So far you know what? 
If a component A, under that another component B.. 
 then at that time we have to pass data 
 from A to B we know(parent to child using props).. we know
 and B to A (child to parent using event delegation).. we know
 
Ok.. now our requirement is what? I have some data within the A..we have to pass to component C..
My C have supose one component as child i.e. D and D have E and E have F...
Within my F also I want the same data..name and location from C..
Generally how we can do it?
  From my A i pass the data to its parent App using event delegation..
  then from my App to its child C, C to its child D, D to its child E, and E to its child F using props...
  like this or not..
  
Now I dont want to do with this hierarchy. Only one hierarchy is there.. 
  then that time it is ok.. we can maintain like this.. I dont want to ddo like this..
  By using useReducer() how we can share the data across your components?yes or no..same data..
  This is my another requirement.. how i can do this?
  
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
========================================================================
Solution to my first Requirement
========================================================================

Solution :: 
lets create an html file..
useReducerEx2.html
===================
//import three mandatory script files - react, react-dom and babel..
//create the container div..<div id="root"></div>
//embed the script tag to write our react code..and the script type should be "text/babel"
//within the script tag take help of ReactDOM.render() to load our App component to the root container div..
//Now within the script tag lets create the App component and return one div.. <div> and close your div.. </div>...
 const App = () => { return <div> </div> }
//lets create 2 components Click and Hover just above the App component..
 const Click = () => { return <h1> Click </h1> }
 const Hover = () => { return <h1> Hover </h1> }
//these 2 components I have to put within my App. Now lets modify my App..
 const App = () => { return <div> <Click /> <Hover /> </div> }
//Run this html and see if the skeletal structure works fine till now..

//Now lets add a button to the Click component..
 const Click = () => { return <h1> Click <button> He clicked me 0 times </button> </h1> }
 //Now here my zero(0) is tatic..i have to make it dynamic..
 //so lets take out that zero from above code..and make it dynamic.
 //ok..how many ways we can maintain the data??
 //we can use state variable or not..we can use useState().
 //but I dont want that one..
 //If we use useState() here then at that time what happens? 
 //That is the local for me..We have to operate within this particular component only or not..
 //I want that functionality like what?its a global..multiple people are using that one or not..
 //so that can we write one initial state as global..write it outside of all components...
 //Now What do you want me to maintain?
   const initval = {
      cnt : 0,
      users : [],
      photos : []
   }
 //users and photos later will be loaded with multiple records from rest api call..so take empty array as of now..
 //Now this initialVal.cnt we have to print within Click component or not..it should take place of hardcoded zero(0)..
 //I want to get this intialVal..how we can write?? 
 //Which means this initialVal.. the state variable we have to make it avaiable to the Click component or not..
 //So by using useReducer() we can get it or not..
 //lets write this code inside of Click component as we will be using the state variable cnt here..
 //React.useReducer() gives us array destruction..it gives us what?our current state..or not..as first argument/.
   our updatedstate and currentstate is first time is equal to initialVal or not ? both are same first time..
   and second argument is a dispatch() method..to call our reducer() function or not..
   React.useReducer() takes how many arguments? 2 arguments..what are those?? reducer() and initialState or not..
      const [state,dispatch] = React.useReducer(reducer,initialVal)
//Now here in the above assignment left side what is state? in  const [state,dispatch]?.. our updated state or not..
//Now as we have our updated state in component Click can we use in the button text to update the count dynamically 
  instead of hardcoded zero? How we can write that? using expression or not? i.e. {}
   const Click = () => { 
      const [state,dispatch] = React.useReducer(reducer,initialVal);
      return <h1> Click <button> He clicked me {state.cnt} times </button> </h1> 
   }
//Ok what is missing? It gives me error like what? my reducer() is not defined..
//so that can we define the reducer()..lets add that..
  it takes 2 arguments..state and action.
  it returns the updated state at last.
  can we perform some operation here?
  can we write some switch condition here to operate on multiple state values or not?so that i have to differentiate..
  for example..for this particular cnt if we want to put.. for this particular action we will write like.. 
    switch(action.type){}
  now this action is coming from where?? our dispatch() method argument or not..
  now when the case is "INCRE" , i have to update the cnt to cnt + 1 and return the existing state plus this change..
  so in order to return existing state we will use spread operator before state.. ie. (...state)
  Here is the code how my reducer() method will look like after all these changes..
  
  const reducer = (state,action) => {
    switch(action.type){
        case "INC" :
            state = {
                ...state,
                cnt : state.cnt + 1
            }
            break;
        case "USERS" :
            //add code for users
            break;
        case "PHOTOS" :
            //add code for photos
            break;
        default :
            state = {
                ...state,
                //add code for others..
            }
    }
    return state;
}

//for this "INCRE" type.. how my dispatch() method will look like? 
  We have to pass one object or not as we are using action.type in swicth case condition..i.e. switch(action.type){}
  dispatch() will look like -> dispatch({type : 'INCRE' }) 
  
//similarly if I have to update users or photos I have to call the reducer() method or not..
  how we will call? using dispatch() method or not.. So how my dispatch() method will look that time?
  dispatch({type : 'USERS', data : [100] })
  
//similarly for photos it will be as below..
  dispatch({type : 'PHOTOS', data : [100] })

//dipatch() mthod will call the reducer() method..
  and whatever data I am passing from dispatch() it will be coming like second argument to my reducer() method.
  
//So When the dispatch() method we trigger from anywhere we send an object..
  And within this object what all properties are there? one is type and another property is data..
  The dispatch() method will invoke the reducer() method by passing this argument as second argument to this reducer()..
  Now inside the reducer() based on this object action type..state changes will be done or some action will be performed.
  ANd finally from my reducer() method state will be returned..
  So we will only decide that one while calling the dispatch() method based on our requirement we will mwntion the acton type and data.
  And we can pass any number of properties to this object when passed to dispatch()
  
//In case of case "INCRE" - only action.type is required..no data is required.. 
  because we are already having state variable cnt..and on every click or hover we are updating the cnt with hardcoded plus 1.
  
//But for other cases like "USERS" or "PHOTOS" i have to pass data or not..
  when we call dispatch we will pass one single object with 2 attributes..type and data here..
  lets update the switch case of reducer() method to update the state variables users and photos..
  
  const reducer = (state,action) => {
    switch(action.type){
        case "INC" :
            state = {
                ...state,
                cnt : state.cnt + 1
            }
            break;
        case "USERS" :
            state = {
                ...state,
                users : action.data
            }
            break;
        case "PHOTOS" :
            state = {
                ...state,
                photos : action.data
            }
            break;
    }
    return state;
  }
  
//Now I ahev to update the cnt always when i click on button..
  So lets call the dispatch() method from onClick..my dispatch() method takes how many argument?? one or not..
  For which action I want to perform this operation? "INCRE" or "USERS" or "PHOTOS"? for our "INCRE" or not..
  so lets send one object with type as "INCRE" to our dispatch() method..i.e. {type:"INCRE"}
  dispatch() method is used to trigger the reducer() method and update the state variable cnt..
  Lets add the onclick function there only inline code instead of writing a separate function..
  
  const Click = () => {
    const [state,dispatch] = React.useReducer(reducer,initialVal)
    return <div>
            <h1> Click : </h1>
            <button onClick={()=>{dispatch({type: "INCRE"})}}> I am clicked {state.cnt} times </button>
        </div>
  }
  
//Now save the html and test it again..if we are able get the cnt in Click component..from the initialVal..default value 0.
//And also cnt should be updated by plus 1 each time we click on button..
  because we are calling the dispatch() method internally calling the reducer() method 
    which internally updates the state variable cnt...

//lets write the same code for Hover component...first let add useReducer() 
  i.e. const [state,dispatch] = React.useReducer(reducer,initialVal)
  The meaning of above line is what??
  it gives me one state variable or not..which contain three properties or not..
  my state is independent to one component..another component or not..
  Now as we get the state variable...
  Now lets change the static zero(0) to dynamic value inside Hover component..using {state.cnt}
  
  Now the count variable cnt is coming from initial state.. but we have to perform increment with plus one on hover or not..
  Here what we have to do? We have to add one event onMouseHover or not..lets add this inline as well.
  i.e. <h1 onMouseOver={()=>{dispatch({type: "INCRE"})}}>
  
  So the final Hover component will look like :- 
  
  const Hover = () => {
    const [state,dispatch] = React.useReducer(reducer,initialVal)
    return <div>
            <h1 onMouseOver={()=>{dispatch({type: "INCRE"})}}> Hover : I am hover {state.cnt} times</h1>
        </div>
  }
  
//Now save the html and test it again..if we are able get the cnt in Hover component as well..
//Now we have to write code for Users and Photos the same way we did like HOC..


@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
========================================================================
Solution to my second Requirement
========================================================================
I have to share the data across the components..
My data is avaiable in component A..
We have to give it to C..
My C contains D and D contain E and E contains F..or whatever it is..
I want to share it..
That means what? We have to maintain the state or not..across our application now..
Lets start the coding..

Solution ::

lets create an html file..
useReducerEx3.html
===================
//import three mandatory script files - react, react-dom and babel..
//create the container div..<div id="root"></div>
//embed the script tag to write our react code..and the script type should be "text/babel"
//within the script tag take help of ReactDOM.render() to load our App component to the root container div..
//Now within the script tag lets create the App component and return one div.. <div> and close your div.. </div>...
 const App = () => { return <div> <A /> <B /> <C /> </div> }
//Now my App contains three components A, B , C lets return those from within wrapper div..
 const App = () => { return <div> <A /> <B /> <C /> </div> }
//lets create component A..
  it contains what? 
  1)one label Name: 
  2)an input textbox 
  3)a button or not..
  SO component A code will look like :-
 const A = () => { return <div> Name: <input /> <input type="button" value="submit"> </div> }
  
//lets create component B..
  it contains what? 
  1)one label Loc: 
  2)an input textbox 
  3)a button or not..
  SO component B code will look like :-
 const B = () => { return <div> B: Loc: <input /> <input type="button" value="submit"> </div> }
 
//Think..now we wrote all these components in one page..so no import nothing is required..
  we can keep in different different pages also..how we can include? by import and export only..
  SO if we want to write like clean separation..create 3 different files for three different components A, B , C..
  and import all to our App component..nothing more than that..
  
//Now lets create our C component..C component has to display Name coming from A.. and also display Loc coming from B..
  The initial skeleton looks like - 
  const C = () => { return <h1> C: Name: Loc: </h1> }

//Now whenever we put some data in Name textbox and click on submit that data immediately has to reflect in C after Name :
//Now whenever we put some data in Loc textbox and click on submit that data immediately has to reflect in C after Loc :
//But suppose by default I want Name as "Sachin" and Location as "Mumbai" to display in C..
  How we can do that? That should be affected by outside person..should be dynamic values..
  Do you want us to write name sachin and location mumbai as local variables or global? global or not..
  using useReducer() we can do that right..as useState() is used for handling state variables locally..
  
  yes we can write state variable inside component C.. name as Sachin and loc as Mumbai.. 
  two state variables we can keep by using useState()..but that is not affected by what?outside person or not..
  If it is not affected then that time what happened? Always name value is Sachin only..always loc value is Mumbai only..
  Whatever we want to put here(Inside C)..that should be affected by some other people is nothing but global or not.. 
  that should be global to all components..
  ok..global state how we can maintain??by using useReducer() or not..
  Can we write that first..which data we want to maintain we will put that one..
  
//so lets add initVal outside of all components...
  const initVal = {
    name : "Sachin",
    loc : "Mumbai"
  }
  
//Ok..Now at the time of clicking on A component button, what we have to do?
  We have to update the state variable name or not..
  that updation happened where? in the reducer() method or not..
  Who is going to update this state?? reducer() method or not..
  Can we write this reducer() method...we can use this reducer() method wherever we want...
  ok..we know what we are going to update..we know how to get the data from outside to my reducer..
  that time can we write the code directly? my reducer() method.. who is going to update the state..my initial state..
  
  my reducer() is a function..
  my first argument is like what? is current state..
  my second argument is what?? is action..coming from outside data..i.e. coming from dispatch() method..
  at last it returns what? return our state or not..
  Now only one operation is there? or multiple operations are there? 
  multiple operations or not..one is what? update the name and another one is what? update the location or not..
  multiple operations means what multiple functionalities..How we can differentiate? By using switch..
  add switch(action.type){} and the case statements inside..for name and loc...
  update the state variable name when case is name that is action.type is "NAME" 
    How can we update the name? where is the name?? It is coming from outside..from dispatch() method..
    now I am not performing any operation on my existing state name variable..
    like we did for cnt..incrementing exisiting state cnt with + 1.. 
    we are not operating on exisiting name.. name value we are going to completely change or update from outside event..
    for example here.. my initialVal state variable name has value "Sachin".
    I dont want to add something to "Sachin"..I want to override that "Sachin" to "Dhoni"..
    So dont use previous state to update the name..instead we are going to use the data coming from dispatch like action object..
    So lets change the state as existng state (using ... spread operator) plus our name key.. holding action.payload..
    Usually the keyword we use to send data in action object is "payload"..
    So the dispatch() method from component A button click will look like - 
      dispatch({
        type : "NAME", 
        payload: "Dhoni"
      })
    Like the above we have to call the dispatch() to call our reducer() method..to update our state from name sachin to dhoni..
    This total object passed from dispatch() method is coming like action object in reducer() 
    And we are using action.payload to update our state variable name..
    And add same thing for "LOC" case as well..
    
    Lets write the full code for reducer() method..
      const reducer = (state,action) => {
        switch(action.type){
            case "NAME" :
                state = {
                    ...state,
                    name : action.payload
                }
                break;
            case "LOC" :
                state = {
                    ...state,
                    loc : action.payload
                }
                break;
        }
        return state;
      } 
  
//now where we want to use this useReducer()?
//in all the components or not..
//see - already my previous example tells what? 
  If I am using useReducer() is nothing but a new state is going to created or not..
  Each and every time the new state is going to be created..But I dont want to create the new state right..
  Now I want to maintain only one state..can anybody put the data..can anybody get the data..
  ok.. then How many useReducer() we have to write? 
  only one useReducer() we have to write it or not..that will be shared with all components or not..
  Then if i create the useReducer() it returns me what? state and dispatch() or not?
  Who wants the state? and who wants the dispatch() method?
  My C component want the state..My state contains what name and loc..My C has to display that one..
  Who wants the dispatch() method? A and B or not..Why? 
    My A has to call the dispatch() method and which invokes the reducer() method to update my name..
    My B has to call the dispatch() method and which invokes the reducer() method to update my loc..
  Ok now there are three components..
  In future there will be 100 components..For All the components Can I make it available my state and dispatch()?
  Then at that time who wants to put the data then at that time which method they are using? dispatch() or not..
  Then at that time who wants to get the data then at that time what we are using? state or not..
  
  NNow within my app there has 100 components..can i give for all these components - my state and dispatch()??
  If I give my state and dispatch() method to all..
    the components which wants to put the data they will use dispatch()
    the components which wants to get the data they will use state
    
  So only one time we have to create the useReducer() declaration. Multiple times if we create then what happens?
  Each and every time new state is going to be created or not..I dont want that one..
  I want total global one..it should be shared..
  Important - now tell me who has to supply this state and dispatch to all our compnents?
  App only or not..Within App how many components are there I want to give some data to all my components..
  How i can give? I want to give some data to all my children .. how i can give it? By using context or not..
  ok not prop here.. prop is nothing but what ...not only A,B,C..my C contains D,my D contains E,my E contains F..
  sharing data from App to A or App to B or App to C is fine..upto one level we can go with props..
  But here in our requirement we can go to any level down..So why to use props at each component..
  why to maintain at every hierarchy?As the prop has to travel all the way down to the compnent which actually needs it..
  
  So for all the components if we need the data we will go for context..
  Now if we give the context value at App, then all the components of A can use it..all the components of B can use it..all the components of C can use it..
  As A,B,C are children only so A contains how many children they all can use it..B contains how many children they all can use it..C contains how many children they all can use it..
  
//Ok now lets add the useReducer() within my App component..
  only one time we have to write in App..and supply to all my children..
  const [state,dispatch] = React.useReducer(reducer,initialVal)
  
//Now as we want to give my state and dispatch() to all my components..any level down..not a problem..
//how we can do that? Can we use the context?Where we will create the context?? 
  It is global right.. so lets use it outside of all components..
  const ctx = React.createContext();
  
  Now this createContext() takes how many arguments? one argument or not..to maintain the default value..
  Now we are not passing any default value..lets pass it from ctx.Provider
  Now who wants this data? A,B, C or not? lets put all these within ctx.Provider and pass this state and dispatch as value..
  Now as I can pass only single element to my ctx.Provider value attribute..
  but here my requirement is to send state and dispatch both.. so lets wrap both as an object and sent it..
  i.e. {state:state,dispatch:dispatch} 
  is nothing but equivalent to {state,dispatch}
  i.e. if my key and value are same in an object we can just mention once..
  
  const App = () => {
    const [state,dispatch] = React.useReducer(reducer,initialVal)
    return <div>
        <ctx.Provider value={{state,dispatch}} >
            <A />
            <B />
            <C />
        </ctx.Provider>
    </div>
}

Now my state,dispatch is available to all my componnets..as discussed my components A and B wants dispatch and C want state..
lets first display the state variable name and loc in c..using the state that we will receive from App..
Now How we will receive the data from my ctx.Provider component?
there are 2 ways right..one is ctx.Consumer and other is React.useContext() or not..
So that lets use our React.useContext() hook as we are dealing with functional components..

lets modify the component C..
    var ctxData = React.useContext(ctx);
    Now ctxData is of which type? object type or not?
    Within the object what we have? state and dispatch or not?
    Now within the state what we have?my name and location variable or not..
    ok how we can print?? {ctxData.state.name} and {ctxData.state.loc} or not..
    lets see the complete changes in C..
    
//Now save the html and test it again..Now we will be able to get the initial value Sachin and Mumbai..
//now if i put some data in name textbox and click on button immediately it should reflect in component C name..
and same for loc..

//Lets go to component A and add onClick event..
  <input type="button" value="submit" onClick={fnUpdateName}/> 
  
  And then define the function fnUpdateName() within component A..Here what i need to do?
    const fnUpdateName = () => {
       //dispatch() --call dispatch and pass data..and action..as an obj
    }
   
  I need to call the dispatch() method with updated name as argument to invoke the reducer() 
    and update the state variable name or not..ok somy dispatch() method is coming from where? from my context ctx or not..
    for that first i need to get the ctx or not..How I will get that?
    Using useContext() or not..same code..we wrote in C to get the state..Can we write that..
    
    var ctxData = React.useContext(ctx);
    Now how can I get the dispatch() method..my ctxData is an object which contains state and dispatch..
    so lets call it ctxData.dispatch()..now this dispatch() takes how many arguments? one or not? What is that?
    My reducer is expecting one action type to match the case in switch and also payload to update the name or not..
    so lets pass it as an object to my dispatch() as a single variable..
      so my dispatch() method will look like - 
            ctxData.dispatch({
                type: "NAME",
                payload : "Dhoni"
            });


    here type: "NAME" understood.. but my payload should be dynamic..we need to send the textbox value..
    can we get that data? How we can get it?? 
    can we use the onChange() on input textbox?or we can also use useState() inside component A to maintain a local state variable..
    
    So lets add a local state using useState() inside A..
    const [name,updateName] = React.useState('');

  Add one onChange() event to my textbox and call this updateName() to update my local state..
  Now on every time we enter some data to textbox name..my local variable name is updated to his value.
  Now ca we send this name as payload..during the dispatch() from button click within the same component..
  ...to invoke the reducer()...to update the global state name..

Now my complete code for A component looks like :-
 const A = () => { 
    const ctxData = React.useContext(ctx);
    const [name,updateName] = React.useState('');
     const fnUpdateName = () => {
            ctxData.dispatch({
                type: "NAME",
                payload : name
            })
     }
     return <div> 
        A: Name:
        <input onChange={(e)=>{updateName(e.target.value)}}/> 
        <input type="button" value="submit" onClick={fnUpdateName}/> 
    </div>
  }

//Now save the html and test it again..Now we will be able to get the updated value for name field or not..when we enter and click..


Again my component B has to be the same code but for loc change..
  We will go to component B. First take the data from textbox..
  so forr that one variable is required..that variable should be local for my component..then better to with state..
  lets create a state variable..
          const [loc,updateLoc] = React.useState('');
    //updateLoc() is to update my local state variable loc..acts as setState() for state variable loc..
    
  Add one onChange() event to my textbox which takes one callback fucntion as argument 
  And call this updateLoc() to update my local state.. from inside the callback..
  Now within updateLoc() we have to update the loc or not.. 
          <input onChange={(e)=>{updateName(e.target.value)}}/> 

  Now I have the local state variable loc.. which always holds the textbox updated value.. and I have to pass this tomy reducer..
  How I can pass it? From my button click event or not? 
  Now from button click which method is required to call the reducer()?
  dispatch() method is required or not..dispatch() method is now coming from where? from our context ctx or not..
  So that can we first get the context?How can we get ctx? using useContext() or not..
          const ctxData = React.useContext(ctx);
  
  Now in my ctxData I have my state and dispatch() method..
  Now where will call this dispatch()? from my onclick() method or not..
  Now for this component lets write the fucntion inline on event onClick={()=>{}} i.e.
         <input type="button" value="submit" onClick={()=>{ctxData.dispatch({type:'LOC', payload :'loc'})}}/> 

  
Now my complete code for B component looks like :-
const B = () => { 
    const ctxData = React.useContext(ctx);
    const [loc,updateLoc] = React.useState('');

     return <div> 
        B: Loc:
        <input onChange={(e)=>{updateLoc(e.target.value)}}/> 
        <input type="button" value="submit" onClick={()=>{ctxData.dispatch({type:'LOC', payload :loc})}}/> 
    </div>
}

//Now save the html and test it again..Now we will be able to get the updated value for loc field as well or not..when we enter and click..

Note :- So throughout the application if we want to share the data we will use useReducer() along with context..
      Both we need to use..using simply useReducer() it is not possible..
      

@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@

There are few more hooks..These are for performance related hooks..
1. useCallback()
2. usemeno()

Now see what is the problem..Then we can rectify the problem by using useCallback().
Ok simply I have 3 components are there..one is Heading..another is like Count..and the other is Button..
These are the components..Heading,Count,Button.. By using these 3 components I have to design the form
My view should be like this...
  Heading - My NareshIT
  Count -   My age is 31 
            I need a button (If i click on button this age should be incremented by 1)
            My Salary is 10000
            I need a button (If i click on button this salary should be incremented by 1000)
  Button -  for reusable 
  
  We will need Button component inside Count..
  and pass the text like dynamic..
  
Solution
=========
lets create an html file..
useCallback.html
===================
//import three mandatory script files - react, react-dom and babel..
//create the container div..<div id="root"></div>
//embed the script tag to write our react code..and the script type should be "text/babel"
//within the script tag take help of ReactDOM.render() to load our App component to the root container div..
//Now within the script tag lets create the App component and return one div.. <div> and close your div.. </div>...
 const App = () => { return <div>  </div> }
 
<script src="react.development.js"></script>
<script src="react-dom.development.js"></script>
<script src="babel.js"></script>
<div id="root"></div>

<script type="text/babel">
const App = () => {
    return <div>
        </div>
}
ReactDOM.render(<App />, document.getElementById("root"))
</script>
  

//Now return the <Title /> component from App..and pass name="MyNIT" as attribute..
const App = () => {
    return <div>
           <Title name="MyNIT" />
        </div>
}

//Now lets create the title component..
The attribute sent from App to Title is coming like what?? 
if it is a class component it should receive like props..
if it is a functional component it will receive like argument ot not..
usually we receive as an variable data..and retrieve the exact attribute using dot(.) operator.
ex..
const Title = (data) => {
    return <div>
           {data.name}
        </div>
}

Which means my argument data is object type or not..
so that can we write directly as an object format in the argument..
which takes how many properties? name..can we put name within it? 
  i.e. const Title = ({name}) => { }
ok how we can use that name ? using expression or not.. {name}
This is also another way of writing it..

Next add 2 buttons...to App
<Button />
<Button />

Now go and refresh the HTML page..we should see one label NIT and 2 buttons with text "INC" on it..

Now lets add the text like "Inc Age" and "Inc Salary" on button text..
lets pass these as title attribute to my Button component..
How my Button component will receive it ? As argument or not?
Can we receive the same way we did for Title component..using object notation..
const Button = ({title}) =>{
    return <div><button>{title} </button></div>
}


Now my App looks like :
const App = () => {
    return <div>
        <Title name="NIT" />
        <Button title="INC Age"/>
        <Button title="INC Salary"/>
        </div>
}

//But i do nt want to pass it as attribute from my App component..
//there is another way...can we pass like below?
        <Button>INC Age</Button>
        <Button>INC Salary</Button>
//Now for this Button component what is this content?children or not??
//So whatever is there inside <Button>....</Button> all are children..
//Ok now how I can represent all my children in my component Button..
//we have "children" one prop is there..directly we can use for functional components..
//In case of class components we have this.props.children..
//And now in my Button component I can get it like : 
  const Button = ({children}) =>{
      return <div><button>{children} </button></div>
  }

//So if we are passing any other attribute to button we will receive it using an object..
  but for receiving its children we have to use the keyword children..eg..
  const Button = (arg, {children}) =>{
      return <div><button>{arg.title} - {children} </button></div>
  }
  
//lets create the Count component..and return from App..
  same as Title component..lets pass title attribute to Count from my App component..
  And in Count Component receive it in argument object notation..
  const Count = ({title}) =>{
    return <h1>{title}</h1>
  }

Now my App looks like : 

const App = () => {
      return <div>
        <Title name="NIT" />
        <Count title="Age"/>
        <Button>INC Age</Button>
        <Count title="Salary"/>
        <Button>INC Salary</Button>
       </div>
}

So in browser it is loaded like......
NIT
Age: 
INC Age//a button
Salary: 
INC Salary//a button

So now instead of labels Age: and Salary: I want to show like default values..
Age: 1 and Salary: 1000
This is also dynamic value or not...so it should be coming from outside it or not..
So can we take another argument inside my Count component as follows..
  as we will be capturing here the value sent from <Count /> object from App..
  e.g. 
  const Count = ({title, val}) =>{
    return <h1>{title} {val}</h1>
  }
  
And my App should look like :- 
const App = () => {
    return <div>
        <Title name="NIT" />
        <Count title="Age: " val="0"/>
        <Button>INC Age</Button>
        <Count title="Salary: " val="1000"/>
        <Button>INC Salary</Button>
        </div>
}

But now I want dynamic data..Do you want me to hardcode like 0 and 1000 ? No then what?
We have to use state or not?So that lets remove this 0 from <Count title="Age: " val="0"/> and make it as state variable..
Similarly remove this 1000 from <Count title="Salary: " val="1000"/> and make it as state variable..
Ok how we can do that? Where we will add the state variable? Within my App or not?
We will use useState() for that...

const [age,updateAge] = React.useState(0);
const [salary,updateSalary] = React.useState(1000);

 and now use this state variable instead..
 const App = () => {
    const [age,updateAge] = React.useState(0);
    const [salary,updateSalary] = React.useState(1000);

    return <div>
        <Title name="NIT" />
        <Count title="Age: " val={age} />
        <Button>INC Age</Button>
        <Count title="Salary: " val={salary}/>
        <Button>INC Salary</Button>
        </div>
}


//Now if i want to click on this age button I want to increment the age in the Count component 
//Now if i want to click on this salary button I want to increment the salary in the Count component 
//Now where we will write the code for onClick?
Within my Button component return actual html button or not..
Because my Button component will not understand the click event...

const Button = ({fnUpdate,children}) =>{
    return <div><button onClick={fnUpdate}>{children} </button></div>
}

Ok now tell me how many buttons we are using?? 2 so lets write a generic function..fnUpdate..
now my age is present where? in my App..So my requirement is like when i click on age butto i have to increment age..
which means i have to perform some operation in my App..can we pass that function?
now my Count will take that function as props..

Both the methods are going with which key? fnUpdate or not..so Button component will trigger the same function..
const App = () => {
    const [age,updateAge] = React.useState(0);
    const [salary,updateSalary] = React.useState(1000);

    const fnSetAge = () => {
        updateAge(age + 1)
    }

    const fnSetSalary = () => {
        updateSalary(salary+1000)
    }
    return <div>
        <Title name="NIT" />
        <Count title="Age: " val={age} />
        <Button fnUpdate={fnSetAge}>INC Age</Button>
        <Count title="Salary: " val={salary}/>
        <Button fnUpdate={fnSetSalary}>INC Salary</Button>
        </div>
}


Can we put console.log messages to my components...
const Title = ({name}) =>{
    console.log('Title Component...')
    return <h1>{name}</h1>
}

const Button = ({fnUpdate,children}) =>{
    console.log('Button Component...', children)
    return <div><button onClick={fnUpdate}>{children} </button></div>
}

const Count = ({title, val}) =>{
    console.log('Count Component...', title)
    return <h1>{title} {val}</h1>
}


Now can we save this and load the page...open my console..and see the logs..
Title Component...
Count Component... Age: 
Button Component... INC Age
Count Component... Salary: 
Button Component... INC Salary

which is expected..

Now I click on the increment age..lets see what gets printed..
Title Component...
Count Component... Age: 
Button Component... INC Age
Count Component... Salary: 
Button Component... INC Salary

Again all the components gets loaded or not? 
Why I need that one?Only i have updated age..there is no updattion to Button and Title component or not..
first tell me if the state is not changed i dnt want to execute the methods..what component is there?
pure component is there or not..
pure component purpose is what?
If there is no update nothing is there..dont call it..

Recat.Memo() is there..alternative to pue component..is not a hook..
how many components are there all are like functional components..can we make it like pure?
How we can? By using React.Memo() is same as my class extends React.PureComponent
Lets change all the components..

const Title = React.memo(({name}) =>{
    console.log('Title Component...')
    return <h1>{name}</h1>
})

const Button = React.memo(({fnUpdate,children}) =>{
    console.log('Button Component...', children)
    return <div><button onClick={fnUpdate}>{children} </button></div>
})

const Count = React.memo(({title, val}) =>{
    console.log('Count Component...', title)
    return <h1>{title} {val}</h1>
})


Now can we save this and load the page...open my console..and see the logs..
Now on initial load it loads all which is as expected..
Now click on increment age and here is the log..
Count Component... Age: 
Button Component... INC Age
Button Component... INC Salary

So far we did not use callback..
My title is not changed..its a static one..so it is not loaded..
My Count Age sgould be rendered..because you are updating what? Age..
Next One? Button incrementing Age..We are performing some operation on Button..
But I dont want to render Button incrementing Salary.. or not? because no changes made for salary..

this is because we are using same button for both..same compnent..
lets handle this by using callback hook..We will be mentioning for which variable we are performing the operation...
   const fnSetAge = React.useCallback(() => {
        updateAge(age + 1)
    },[age]);

    const fnSetSalary = React.useCallback(() => {
        updateSalary(salary+1000)
    },[salary]);

Count Component... Age: 
Inline Babel script:8 Button Component... INC Age

Now this is the expected output or not...





*******************************************************************************************************************************************
*******************************************************************************************************************************************
27/02/2020
*******************************************************************************************************************************************
*******************************************************************************************************************************************
useCallback() works like a memoized callback hook
My useMemo() and useCallback() used for performance improvements..

useMemo() is one more hook available..This one is going to work for values..
If you made some change on values..
Now we will handle like values..like how we will handle? we will see one example..

Requirement :- 
I have one button is there..on button i want to show like count - 0
I have one more button also..on button i want to show like count - 0 
If i click on the button I want to increment the count for that button..
example button 1 click should increment its count by 1..
example button 2 click should increment its count by 1..
both counts are independent..

for the first button - in the same line i have label and for button there is no label..
for button 1 if count is even value - label will be visible as even otherwise odd.. 

How it looks..rough sketch

Button count 0  even
Button count 0  

Button count 1  odd
Button count 3 


Lets write the code for same..

useMemo.html
===================
//import three mandatory script files - react, react-dom and babel..
//create the container div..<div id="root"></div>
//embed the script tag to write our react code..and the script type should be "text/babel"
//within the script tag take help of ReactDOM.render() to load our App component to the root container div..
//Now within the script tag lets create the App component and return one div.. <div> and close your div.. </div>...
 const App = () => { return <div>  </div> }
 
// Now I have to return first button with label and then next button..
 const App = () => { 
 		return <div>  
 			<button>count: {count1} </button>
 			<button>count: {count2} </button>
 		</div>
 }



//Now if we write this code what is missing here?? count1 and count2 is missing or not?
//These variables are static or having dynamic data? keeps on changing or not?so that can we create the state variables?
//lets start..modifying App..lets add 2 state variables for count1 and count2 using useState() as we are using functional component..
 const App = () => { 
 	const [count1,updateCount1] = React.useState(0);
 	const [count2,updateCount2] = React.useState(0);

 		return <div>  
 			<button>count: {count1} </button>
 			<button>count: {count2} </button>
 		</div>
 }



//what next??state variable default values gets printed on first time load on buttons as 0 for both..
//but we have to increment the count or not..and we have updateCount1() and updateCount2() to increment the state variables count1 & count2..
//lets add onClick event to the buttons and call these methods to update state variables..
 const App = () => { 
 	const [count1,updateCount1] = React.useState(0);
 	const [count2,updateCount2] = React.useState(0);

 		return <div>  
 			<button onClick={()=>{ updateCount1(count1+1); } }> count: {count1} </button>
 			<button onClick={()=>{ updateCount2(count2+2); } }>count: {count2} </button>
 		</div>
 }
//Now save this html file and refresh the browser..
//We should be able to see 2 buttons ready with initial count as 0 on them..
//When we click on any button it is incrementing its count..


//Now we have print the label EVEN or ODD for our first button count1 value or not..
//How we can do this??
//Can we write a function isEven() inside App and use the same for label?
	const isEven = () => {
		return count1%2 == 0;
	}
//lets add a <h1> tag after the first button.. and call this isEven() there...
            <h1>{isEven() ? 'EVEN' : 'ODD'}</h1>
//Now my App should look like -
	const App = () => { 
    	const [count1,updateCount1] = React.useState(0);
    	const [count2,updateCount2] = React.useState(0);
		const isEven = () => {
			return count1 % 2 == 0;
		}
        return <div>  
            <button onClick={()=>{ updateCount1(count1+1); } }> count: {count1} </button>
            <h1>{isEven() ? 'EVEN' : 'ODD'}</h1>
            <button onClick={()=>{ updateCount2(count2+1); } }>count: {count2} </button>
        </div>
	}
//Now save this html file and refresh the browser..and now my label even and odd should be visible or not..


//ok now is my label is changing ? even..odd..even...? based on the state value change or not..
//if we update the state value then what happens? my render() method gets triggered or not..
//within the render() what we did? isEven() we are calling or not?
//when we are calling isEven() at that time my count1 is what?changed or not...and it returns true or false..and keeps on changing
//Now we have this label even or odd right.. Which is coming from isEven() 
//let's put a delay here.. 
//On button one click.. After some time I am going to return this value.. 
//so for that I am going to put some condition.. A loop or something
//for example :-
const isEven = () => {
let i= 0;
while(i < 2000000000) {
i++;
} 
return court%2 == 0;
}

//so this while loop only for delay I put.. 
//so after this while loop only my return statement will work or not.. 
//this is synchronous one.. 
//if u put like setTimeout() then what happens?? 
//that is asynchronous one.. So it won't wait for this setTimeout() to finish.. And returns immediately

//This while loop code does not have any impact on variable court.. 
//we have added this loop in order to just add some delay... 
//now save the HTML file and refresh the browser.. 
//now click on button 1 and we can see it's taking time to lod the label.. Even or Odd.. 
//So now clicking on button 1 .. Incrementing it's count 1..
  And displaying the even or odd based on count1 value with some delay is ok.. 
  As we are showing label on basis of count1 state variable change.. 

//Now coming to button 2 if we click on it, it is not having nay impact on label even or odd.. It's value is same.. 
//but this operation also takes time.. With delay count2  is updated on button 2..
Now why is this happening?? We are not expecting this right.. 
As there is no change to state variable count1 and label is supposed to change if this state variable count1 is changed.. 
//that means if there is no impact on my state variable..then at that time why I need to be waiting or paying for that changes?? 

//can we use some hook method here? If it is a call back we were using React.useCallback()... 
//if it is a blue then we are using hook.. React.useMemo() 

//where we are going to write this code?? On the value where we are going to perform some operation or not... 

//for example :-
const isEven = React.useMemo(() => {
let i= 0;
while(i < 2000000000) {
i++;
} 
return court%2 == 0;
},[count1]) 

//now this one should now impact on my count1 only or not... 

//Now save this html file and refresh the browser..and now there won't be any delay if we are clicking on button 2..
//that means what?? My useMemo() is going to return me what?? 
That value it is going to return me directly or not.. 
If we use isEven() now.. We will get error.. Because we are using useMemo() on the isEven() function definition which returns me a value.. 

//ok tell me.. Before we used useMemo(), why button 2 click event was taking time?? 





@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@

For example I want my own hooks also.. Custom hook.. Ok
How my hooks looks like? In general.. 

      const [] = useCustom(DefaultValue) 


      
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@



@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@

@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@

@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@

      The same thing if you have to create independently as separate variables how can you create?? 
      By using useState() two times or not.. 
      




























