NodeJS 
********
https://medium.com/@olinations/the-javascript-runtime-environment-d58fa2e60dd0



Reactjs -  25feb
_________________
React.useState() 
React.useEffect() 
React.useContext() 
React.useRef() 
React.useReducer() 
React.Memo() 

*************************************************
What is useContext()? Why we go for useContext()? 
So basically we are going to use useContext() instead of contexr.Consumer() 
context.Provider will remain same.. 
Lets write the code.. 

We will write only functional components. 
App, A, B, C

We have the main bootstrapping component i.e. App
App loads component A. 
A loads B. 
B loads C. 
.. 

useContext.html
-----------------
//all 3 scripts
<div id="root"></div>
<script type = "text/babel">
  const A = () => {
    return <div> <B /> </div>
  }

  const B = () => {
    return <div><C /></div>
  }
  
  const C = () => {
    return <div>I am C</div>
  }

  const App = () => {
    return <div> <A /></div>
  }
  
</script>



Now my App component has the data.. 

Let's write some data in App component.. 
If you want to change the data that time we have to use the state variable.
If it is a normal variable then at that time we can put like a var or const.. 
For now let's add a normal variable using const..
What is the next one.. We have to pass this data or not to C. 

How we can create the context?
We have to create the context at global level or not.. 
So here inside the script directly we will write the below code.. 
const ctx = React.createContext()

Here to the createContext() method we can pass default value if we wish.. 
When this value will be visible?? 
When we are not providing any value to the React.provider "value" Attribute or not.. 
If "value" Attribute is provided from React.Provider along with default value from ctx.createContext() ,
   then it will consider the data provided in the "value" attribute over that default value provided in 
   ctx.createContext() 


So let's now modify the App component. 
App component has the data..
We have to pass the data to Component C. 
We will write ctx.Provider in App component 
  and will pass our variable name to the above Provider
  as value attribute. . 


Now in my component C i need the data name.. 
How we can get it? How many ways are there?? 
One way is ctx.Consumer..
And the other way is React.useContext() 

Now leets use the React.useContext() as we are using functional components
  And working on the hook methods.. 
So now let's modify the component C.. 
Create a variable to store the data from App component using React.useContext(ctx). 
To the useContext() method pass the global context variable name. 
In this case it is ctx.. 
const data = React.useContext(ctx)

Now we have the data in component C from component App.. 
We can use data using expression.. Like {data}

useContext.html
-----------------
//all 3 scripts
<div id="root"></div>
<script type = "text/babel">
  const name = "Sachin";
  //for default value.. To the context variable.. 
  //const ctx = React.createContext("soumya..");
  const ctx = React.createContext();

  const A = () => {
    return <div> <B /> </div>
  }

  const B = () => {
    return <div><C /></div>
  }
  
  const C = () => {
    const data = React.useContext(ctx) 
    return <div>I am C : {data}</div>
  }

  const App = () => {
    return <ctx.Provider value={name}> <A /></ctx.Provider>
  }
  
ReactDOM.render(<App />, document.getElementById("root")) 
</script>


********************************************************************************

26/02/20



Ok.. Can you tell me what is the syntax of useReducer()? 
How it is working..?? 
Ok .. UseReducer() i.e. const [state,dispatch] = React.useReducer(reducer,initiaState);
      It is going to return array destructions.. 
      Takes how many arguments? 2 arguments.. 
      First argument is the reducer function. 
      Second argument is the initial state.. 
      Initial state is which type?? Any type... 
      
      For example if we want to put two state variables cnt and name then at that time i need to store it as an object.. 
      const initialState = { cnt :0, name : '' }
      
      So if we want to create multiple state variables with some initial value. How we can create that..
      Ok.. in general how we can write it?
      this.state = {
        cnt :0, 
        name : ''
      }
      
      The same thing if we want to use by using React.useState() how we can write it?
      const [cnt,updateCnt] = React.useState(0)
      const [name,updateCnt] = React.useState('')
      
      Now by using React.useReducer() I want to maintain the state..How we can do that?
      Just create a simple variable..thats it.
      Pass that variable as an argument to this React.useReducer() method..thats it..
      const initValue = {
        cnt :0, 
        name : ''
      }
      Like this any number of values we can put it..any type we can put it...
      Lets pass initValue to useReducer() method..this initial state is always passed as the second argument.
      The first argument to useReducer() method is a reducer() function..This takes again 2 arguments..currentstate and action
      How we can get the cuurrentstate?We are passing rigt..here first time it is initialValue..
      
      const reducer = (state,action) => { //code..}
      const [state,dispatch] = React.useReducer(reducer,initValue);
      
      In the reducer() function what we want? Based on our requirement we can do something..
      At last what we have to return from reducer()? 
         return the updated state..that we get in the array destruction state variable..
      reducer() also returns a dispatch() method. dispatch()method is to call the reducer() 
      Now this dispatch() method takes how many arguments?It takes only one argument always...may be any type..
      For example multiple datas are there..That time we have to use like an object..
      If we want normal string like increment or decrement then we can pass like a string...
      Whatever we are passing, dispatch() method is used to call your reducer() by passing some argument is snothing but 
        that is coming like reducer() method second argument.
        
      The state is coming to reducer() as first argument always..
      Once we get this arguments operations is our wish..We have to return the state finally..
    
    
    
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
========================================================================
First Requirement
========================================================================
Now my requirement is like this..
I have 2 components...Click and Hover..
  Click component has a button  - button text by default is - He clicked me 0 times..
  Hover component has a h1 tag  - h1 text by default is - He hover me 0 times..

Already we did this one using higher order component..
The same requirement I want to use like useReducer() method..

Here by using higher order component what we achieved? 
Here see..if we click on this button of Click component we are going to increment this count..
If we hover on h1 of Hover component we are going to increment this count..
My functionality is same or not? 
If the functionality we want to share across the components, then at that time in our class components what we have?
Higher order components..Same requirement I want to achieve by using useReducer()...

How we are going to do this??
Ok ca you tell me what is the common functionality? incrementing the count or not..
Where we have to write that functionality? Within my reducer or not?
How my reducer looks like..Can we write the reducer? pass 2 arguments state and action as we already know.

  const reducer = (state,action) => {
  
  }

What is my initial state here? What we are going to keep? 
I want to keep cnt which will be incremented on click or hover.. 
another one I want to keep is users which is coming from database.., 
and another one I want to keep is photos which is coming from database..
These all the 3 (cnt,users,photos) I want to maintain within the state variable..
So that what is my intialVal?? i.e.

const initialVal = {
  cnt : 0,
  users : [],
  photos : []
}

Now tell me.. this reducer is the responsible person for updating all our state variables or not...i.e. cnt,users,photos..
This cnt state variable we are using in Hover and Click component.
There is one more component is there - Users component - we have using users state variable 
One more Photos component is there - We are going to maintain photos state variable

So can you tell me how many operations we are going to perform? 
  1) increment count on hover and click - general function
  2) load users 
  3) load photos
  
How we can differentiate this operations? By using action or not
  

How I can differentiate those functionalities here?? 
By using action or not... Based one?? 
We are going to put like type or not.. 
So how it looks like?? Switch case.. 
So we will write a switch case and action.type we need to pass.. 
We will check for case 'INCRE' : then at that time i need to perform some operation.. 
What operations we will perform?? We will increment the cnt.. 
If my case is like users i.e. case 'USERS' :
Then at that time i ma going to update that users or not.. 
If my case is like photos i.e. case 'PHOTOS' :
Then at that time i ma going to update that photos or not.. 

Now this Hover and Click component is going to call which method?? 
reduce() method by passing ? ? 
Ok how we can call this reduce() method?? Using dispatch() or not.. 
Ok how many arguments we have to pass?? 
One argument.. What is that argument?? 
INCRE..what type of argument it is??One object or not.. 
Why because see.. 
Whatever we are passing that is going to 
 reducer() method and in switch case it takes 
 that data by using dot(.) notation or not.. 
 Then it is nothing but what.. 
 My action is object type or not.. 

So here from dispatch() I am going to pass like an object.. 
And here my type is equal to what?? INCRE.. 

i.e. dispatch({type : 'INCRE'}) 
So this is how the dispatch() method will be called 
from Hover and Click component events.. 
i.e. click and onchange events respectively.. 
Now whoever component calls we have to increment the cnt or not.. 
But cnt should be incremented separately for both components.. 
One should not impact the other.. 


Ok yesterday we did all these operations in a single component.. 
Now we are using different different components
One is Click and another one is Hover... 
Now coming to the reducer() function when the 
 case 'INCRE' is matched we have to update the 
 state variable cnt or not.. 

How we can write it?? 
We have to bring our previous property.. 
Along with we will update the state variable cnt
In the state we have the existing cnt variable.. 
Let's get that.. And then increment with 1..

Same like that we have to add other use cases.. 
And finally we have to return the state variable or not.. 


const reducer = (state, action) => {
       switch (action.type) {
           case 'INCRE' :
              state={
                 ...state, 
                 cnt : state.cnt + 1
              }
           //add remaining cases
       }
    return state;
}

In yesterday's program if you remember I had 
 3 buttons in the same component.. 
 And all are operating on the same cnt.. 
 
But now in this case we have 2 different components. 
We are maintaining cnt state variable seprately. 
If we click on button from Click component 
 it should not have nay impact on 
 Hover component cnt.. It will only update the Click component cnt.. 

Which means my state is independent to components always.. 

If I have class A and class B bad both have same state variable names, 
 Then both are independent or not.. To their classes.. 
So that we are using useReducer() for particular component state or not.. 

So in our case 2 state variables are created and which are independent. 
i.e. one for Click and one for Hover


@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
========================================================================
Second Requirement
========================================================================

Now this is my another requirement. 
I have my App component. 
Within App I have 3 components are there.. 
A, B, and C.. all are siblings
Now within my A component i have 
   a label Name
   an inputt text
   a button

Now within my B component i have 
   a label Location
   an inputt text
   a button


Now whatever I enter in the component A textbox and click on submit it should have to print within the C component.
Same like whatever I put in the component B textbox  and click on submit it should have to print within the C component. 

Now see.. My App component is the root component. 
Within the App component I have Components A, B, C. 
A, B, C are what? They are siblings or not..There is no relationship nothing is there..
So far you know what? 
If a component A, under that another component B.. 
 then at that time we have to pass data 
 from A to B we know(parent to child using props).. we know
 and B to A (child to parent using event delegation).. we know
 
Ok.. now our requirement is what? I have some data within the A..we have to pass to component C..
My C have supose one component as child i.e. D and D have E and E have F...
Within my F also I want the same data..name and location from C..
Generally how we can do it?
  From my A i pass the data to its parent App using event delegation..
  then from my App to its child C, C to its child D, D to its child E, and E to its child F using props...
  like this or not..
  
Now I dont want to do with this hierarchy. Only one hierarchy is there.. 
  then that time it is ok.. we can maintain like this.. I dont want to ddo like this..
  By using useReducer() how we can share the data across your components?yes or no..same data..
  This is my another requirement.. how i can do this?
  
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
========================================================================
Solution to my first Requirement
========================================================================

Solution :: 
lets create an html file..
useReducerEx2.html
===================
//import three mandatory script files - react, react-dom and babel..
//create the container div..<div id="root"></div>
//embed the script tag to write our react code..and the script type should be "text/babel"
//within the script tag take help of ReactDOM.render() to load our App component to the root container div..
//Now within the script tag lets create the App component and return one div.. <div> and close your div.. </div>...
 const App = () => { return <div> </div> }
//lets create 2 components Click and Hover just above the App component..
 const Click = () => { return <h1> Click </h1> }
 const Hover = () => { return <h1> Hover </h1> }
//these 2 components I have to put within my App. Now lets modify my App..
 const App = () => { return <div> <Click /> <Hover /> </div> }
//Run this html and see if the skeletal structure works fine till now..

//Now lets add a button to the Click component..
 const Click = () => { return <h1> Click <button> He clicked me 0 times </button> </h1> }
 //Now here my zero(0) is tatic..i have to make it dynamic..
 //so lets take out that zero from above code..and make it dynamic.
 //ok..how many ways we can maintain the data??
 //we can use state variable or not..we can use useState().
 //but I dont want that one..
 //If we use useState() here then at that time what happens? 
 //That is the local for me..We have to operate within this particular component only or not..
 //I want that functionality like what?its a global..multiple people are using that one or not..
 //so that can we write one initial state as global..write it outside of all components...
 //Now What do you want me to maintain?
   const initval = {
      cnt : 0,
      users : [],
      photos : []
   }
 //users and photos later will be loaded with multiple records from rest api call..so take empty array as of now..
 //Now this initialVal.cnt we have to print within Click component or not..it should take place of hardcoded zero(0)..
 //I want to get this intialVal..how we can write?? 
 //Which means this initialVal.. the state variable we have to make it avaiable to the Click component or not..
 //So by using useReducer() we can get it or not..
 //lets write this code inside of Click component as we will be using the state variable cnt here..
 //React.useReducer() gives us array destruction..it gives us what?our current state..or not..as first argument/.
   our updatedstate and currentstate is first time is equal to initialVal or not ? both are same first time..
   and second argument is a dispatch() method..to call our reducer() function or not..
   React.useReducer() takes how many arguments? 2 arguments..what are those?? reducer() and initialState or not..
      const [state,dispatch] = React.useReducer(reducer,initialVal)
//Now here in the above assignment left side what is state? in  const [state,dispatch]?.. our updated state or not..
//Now as we have our updated state in component Click can we use in the button text to update the count dynamically 
  instead of hardcoded zero? How we can write that? using expression or not? i.e. {}
   const Click = () => { 
      const [state,dispatch] = React.useReducer(reducer,initialVal);
      return <h1> Click <button> He clicked me {state.cnt} times </button> </h1> 
   }
//Ok what is missing? It gives me error like what? my reducer() is not defined..
//so that can we define the reducer()..lets add that..
  it takes 2 arguments..state and action.
  it returns the updated state at last.
  can we perform some operation here?
  can we write some switch condition here to operate on multiple state values or not?so that i have to differentiate..
  for example..for this particular cnt if we want to put.. for this particular action we will write like.. 
    switch(action.type){}
  now this action is coming from where?? our dispatch() method argument or not..
  now when the case is "INCRE" , i have to update the cnt to cnt + 1 and return the existing state plus this change..
  so in order to return existing state we will use spread operator before state.. ie. (...state)
  Here is the code how my reducer() method will look like after all these changes..
  
  const reducer = (state,action) => {
    switch(action.type){
        case "INC" :
            state = {
                ...state,
                cnt : state.cnt + 1
            }
            break;
        case "USERS" :
            //add code for users
            break;
        case "PHOTOS" :
            //add code for photos
            break;
        default :
            state = {
                ...state,
                //add code for others..
            }
    }
    return state;
}

//for this "INCRE" type.. how my dispatch() method will look like? 
  We have to pass one object or not as we are using action.type in swicth case condition..i.e. switch(action.type){}
  dispatch() will look like -> dispatch({type : 'INCRE' }) 
  
//similarly if I have to update users or photos I have to call the reducer() method or not..
  how we will call? using dispatch() method or not.. So how my dispatch() method will look that time?
  dispatch({type : 'USERS', data : [100] })
  
//similarly for photos it will be as below..
  dispatch({type : 'PHOTOS', data : [100] })

//dipatch() mthod will call the reducer() method..
  and whatever data I am passing from dispatch() it will be coming like second argument to my reducer() method.
  
//So When the dispatch() method we trigger from anywhere we send an object..
  And within this object what all properties are there? one is type and another property is data..
  The dispatch() method will invoke the reducer() method by passing this argument as second argument to this reducer()..
  Now inside the reducer() based on this object action type..state changes will be done or some action will be performed.
  ANd finally from my reducer() method state will be returned..
  So we will only decide that one while calling the dispatch() method based on our requirement we will mwntion the acton type and data.
  And we can pass any number of properties to this object when passed to dispatch()
  
//In case of case "INCRE" - only action.type is required..no data is required.. 
  because we are already having state variable cnt..and on every click or hover we are updating the cnt with hardcoded plus 1.
  
//But for other cases like "USERS" or "PHOTOS" i have to pass data or not..
  when we call dispatch we will pass one single object with 2 attributes..type and data here..
  lets update the switch case of reducer() method to update the state variables users and photos..
  
  const reducer = (state,action) => {
    switch(action.type){
        case "INC" :
            state = {
                ...state,
                cnt : state.cnt + 1
            }
            break;
        case "USERS" :
            state = {
                ...state,
                users : action.data
            }
            break;
        case "PHOTOS" :
            state = {
                ...state,
                photos : action.data
            }
            break;
    }
    return state;
  }
  
//Now I ahev to update the cnt always when i click on button..
  So lets call the dispatch() method from onClick..my dispatch() method takes how many argument?? one or not..
  For which action I want to perform this operation? "INCRE" or "USERS" or "PHOTOS"? for our "INCRE" or not..
  so lets send one object with type as "INCRE" to our dispatch() method..i.e. {type:"INCRE"}
  dispatch() method is used to trigger the reducer() method and update the state variable cnt..
  Lets add the onclick function there only inline code instead of writing a separate function..
  
  const Click = () => {
    const [state,dispatch] = React.useReducer(reducer,initialVal)
    return <div>
            <h1> Click : </h1>
            <button onClick={()=>{dispatch({type: "INCRE"})}}> I am clicked {state.cnt} times </button>
        </div>
  }
  
//Now save the html and test it again..if we are able get the cnt in Click component..from the initialVal..default value 0.
//And also cnt should be updated by plus 1 each time we click on button..
  because we are calling the dispatch() method internally calling the reducer() method 
    which internally updates the state variable cnt...


//

 
//lets add same text to Hover component..
 const Hover = () => { return <h1> Hover </h1> }

//lets create 


  
















@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@



      
      
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@



@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@

@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@

@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@

      The same thing if you have to create independently as separate variables how can you create?? 
      By using useState() two times or not.. 
      




























